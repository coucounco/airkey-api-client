<?php
/**
 * OfficeModeSlot
 *
 * PHP version 5
 *
 * @category Class
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v18.0.4
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Coucounco\Airkey\Swagger\Client\Model;

use \ArrayAccess;
use \Coucounco\Airkey\Swagger\Client\ObjectSerializer;

/**
 * OfficeModeSlot Class Doc Comment
 *
 * @category Class
 * @description Model that describes an office mode slot.
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OfficeModeSlot implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OfficeModeSlot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'weekday' => 'string',
        'opens_at' => 'string',
        'closes_at' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'weekday' => null,
        'opens_at' => null,
        'closes_at' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'weekday' => 'weekday',
        'opens_at' => 'opensAt',
        'closes_at' => 'closesAt',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'weekday' => 'setWeekday',
        'opens_at' => 'setOpensAt',
        'closes_at' => 'setClosesAt',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'weekday' => 'getWeekday',
        'opens_at' => 'getOpensAt',
        'closes_at' => 'getClosesAt',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_AUTOMATIC_OFFICE_MODE = 'AUTOMATIC_OFFICE_MODE';
    const TYPE_CLOSING_TIME_MANUAL_OFFICE_MODE = 'CLOSING_TIME_MANUAL_OFFICE_MODE';
    const WEEKDAY_MONDAY = 'MONDAY';
    const WEEKDAY_TUESDAY = 'TUESDAY';
    const WEEKDAY_WEDNESDAY = 'WEDNESDAY';
    const WEEKDAY_THURSDAY = 'THURSDAY';
    const WEEKDAY_FRIDAY = 'FRIDAY';
    const WEEKDAY_SATURDAY = 'SATURDAY';
    const WEEKDAY_SUNDAY = 'SUNDAY';
    const STATUS_ASSIGNMENT_PENDING = 'ASSIGNMENT_PENDING';
    const STATUS_ASSIGNED = 'ASSIGNED';
    const STATUS_REMOVAL_PENDING = 'REMOVAL_PENDING';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AUTOMATIC_OFFICE_MODE,
            self::TYPE_CLOSING_TIME_MANUAL_OFFICE_MODE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeekdayAllowableValues()
    {
        return [
            self::WEEKDAY_MONDAY,
            self::WEEKDAY_TUESDAY,
            self::WEEKDAY_WEDNESDAY,
            self::WEEKDAY_THURSDAY,
            self::WEEKDAY_FRIDAY,
            self::WEEKDAY_SATURDAY,
            self::WEEKDAY_SUNDAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ASSIGNMENT_PENDING,
            self::STATUS_ASSIGNED,
            self::STATUS_REMOVAL_PENDING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['weekday'] = isset($data['weekday']) ? $data['weekday'] : null;
        $this->container['opens_at'] = isset($data['opens_at']) ? $data['opens_at'] : null;
        $this->container['closes_at'] = isset($data['closes_at']) ? $data['closes_at'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['weekday'] === null) {
            $invalidProperties[] = "'weekday' can't be null";
        }
        $allowedValues = $this->getWeekdayAllowableValues();
        if (!is_null($this->container['weekday']) && !in_array($this->container['weekday'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'weekday', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['closes_at'] === null) {
            $invalidProperties[] = "'closes_at' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of an office mode slot. CLOSING_TIME_MANUAL_OFFICE_MODE leaves the manually activated office mode at a certain time, if the lock is actually in office mode at given time. AUTOMATIC_OFFICE_MODE enters and leaves the office mode automatically at given times.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets weekday
     *
     * @return string
     */
    public function getWeekday()
    {
        return $this->container['weekday'];
    }

    /**
     * Sets weekday
     *
     * @param string $weekday Day of the week
     *
     * @return $this
     */
    public function setWeekday($weekday)
    {
        $allowedValues = $this->getWeekdayAllowableValues();
        if (!in_array($weekday, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'weekday', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weekday'] = $weekday;

        return $this;
    }

    /**
     * Gets opens_at
     *
     * @return string
     */
    public function getOpensAt()
    {
        return $this->container['opens_at'];
    }

    /**
     * Sets opens_at
     *
     * @param string $opens_at Opening time (format: hh:mm, 24-hour notation, only certain minute values are allowed (like authorization time definitions), check general documentation). Only used (and required) for type 'AUTOMATIC_OFFICE_MODE'.
     *
     * @return $this
     */
    public function setOpensAt($opens_at)
    {
        $this->container['opens_at'] = $opens_at;

        return $this;
    }

    /**
     * Gets closes_at
     *
     * @return string
     */
    public function getClosesAt()
    {
        return $this->container['closes_at'];
    }

    /**
     * Sets closes_at
     *
     * @param string $closes_at Closing time (format: hh:mm, 24-hour notation, only certain minute values are allowed (like authorization time definitions), check general documentation)
     *
     * @return $this
     */
    public function setClosesAt($closes_at)
    {
        $this->container['closes_at'] = $closes_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of an office mode slot
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


