<?php
/**
 * Lock
 *
 * PHP version 5
 *
 * @category Class
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v18.0.4
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Coucounco\Airkey\Swagger\Client\Model;

use \ArrayAccess;
use \Coucounco\Airkey\Swagger\Client\ObjectSerializer;

/**
 * Lock Class Doc Comment
 *
 * @category Class
 * @description Model that describes a lock defined in the access control system.
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Lock implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Lock';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'version' => 'int',
        'lock_type' => 'string',
        'ownership' => 'string',
        'lock_technology' => 'string',
        'lock_identifier' => 'string',
        'locking_system_id' => 'int',
        'lock_door' => '\Coucounco\Airkey\Swagger\Client\Model\LockDoor',
        'lock_firmware' => '\Coucounco\Airkey\Swagger\Client\Model\LockFirmware',
        'comment' => 'string',
        'removal_requested' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'version' => 'int64',
        'lock_type' => null,
        'ownership' => null,
        'lock_technology' => null,
        'lock_identifier' => null,
        'locking_system_id' => 'int64',
        'lock_door' => null,
        'lock_firmware' => null,
        'comment' => null,
        'removal_requested' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'lock_type' => 'lockType',
        'ownership' => 'ownership',
        'lock_technology' => 'lockTechnology',
        'lock_identifier' => 'lockIdentifier',
        'locking_system_id' => 'lockingSystemId',
        'lock_door' => 'lockDoor',
        'lock_firmware' => 'lockFirmware',
        'comment' => 'comment',
        'removal_requested' => 'removalRequested'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'lock_type' => 'setLockType',
        'ownership' => 'setOwnership',
        'lock_technology' => 'setLockTechnology',
        'lock_identifier' => 'setLockIdentifier',
        'locking_system_id' => 'setLockingSystemId',
        'lock_door' => 'setLockDoor',
        'lock_firmware' => 'setLockFirmware',
        'comment' => 'setComment',
        'removal_requested' => 'setRemovalRequested'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'lock_type' => 'getLockType',
        'ownership' => 'getOwnership',
        'lock_technology' => 'getLockTechnology',
        'lock_identifier' => 'getLockIdentifier',
        'locking_system_id' => 'getLockingSystemId',
        'lock_door' => 'getLockDoor',
        'lock_firmware' => 'getLockFirmware',
        'comment' => 'getComment',
        'removal_requested' => 'getRemovalRequested'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOCK_TYPE_CYLINDER = 'CYLINDER';
    const LOCK_TYPE_WALLREADER = 'WALLREADER';
    const OWNERSHIP_OWNER = 'OWNER';
    const OWNERSHIP_EXTERNAL = 'EXTERNAL';
    const LOCK_TECHNOLOGY_NFC_ONLY = 'NFC_ONLY';
    const LOCK_TECHNOLOGY_NFC_AND_BLE = 'NFC_AND_BLE';
    const LOCK_TECHNOLOGY_BLE_SMX3 = 'BLE_SMX3';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLockTypeAllowableValues()
    {
        return [
            self::LOCK_TYPE_CYLINDER,
            self::LOCK_TYPE_WALLREADER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOwnershipAllowableValues()
    {
        return [
            self::OWNERSHIP_OWNER,
            self::OWNERSHIP_EXTERNAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLockTechnologyAllowableValues()
    {
        return [
            self::LOCK_TECHNOLOGY_NFC_ONLY,
            self::LOCK_TECHNOLOGY_NFC_AND_BLE,
            self::LOCK_TECHNOLOGY_BLE_SMX3,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['lock_type'] = isset($data['lock_type']) ? $data['lock_type'] : null;
        $this->container['ownership'] = isset($data['ownership']) ? $data['ownership'] : null;
        $this->container['lock_technology'] = isset($data['lock_technology']) ? $data['lock_technology'] : null;
        $this->container['lock_identifier'] = isset($data['lock_identifier']) ? $data['lock_identifier'] : null;
        $this->container['locking_system_id'] = isset($data['locking_system_id']) ? $data['locking_system_id'] : null;
        $this->container['lock_door'] = isset($data['lock_door']) ? $data['lock_door'] : null;
        $this->container['lock_firmware'] = isset($data['lock_firmware']) ? $data['lock_firmware'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['removal_requested'] = isset($data['removal_requested']) ? $data['removal_requested'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        $allowedValues = $this->getLockTypeAllowableValues();
        if (!is_null($this->container['lock_type']) && !in_array($this->container['lock_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lock_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOwnershipAllowableValues();
        if (!is_null($this->container['ownership']) && !in_array($this->container['ownership'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ownership', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLockTechnologyAllowableValues();
        if (!is_null($this->container['lock_technology']) && !in_array($this->container['lock_technology'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lock_technology', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['lock_identifier']) && (mb_strlen($this->container['lock_identifier']) > 16)) {
            $invalidProperties[] = "invalid value for 'lock_identifier', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['lock_identifier']) && (mb_strlen($this->container['lock_identifier']) < 0)) {
            $invalidProperties[] = "invalid value for 'lock_identifier', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['lock_door'] === null) {
            $invalidProperties[] = "'lock_door' can't be null";
        }
        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 500)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) < 0)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Current version number of the lock
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets lock_type
     *
     * @return string
     */
    public function getLockType()
    {
        return $this->container['lock_type'];
    }

    /**
     * Sets lock_type
     *
     * @param string $lock_type Type of lock
     *
     * @return $this
     */
    public function setLockType($lock_type)
    {
        $allowedValues = $this->getLockTypeAllowableValues();
        if (!is_null($lock_type) && !in_array($lock_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lock_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lock_type'] = $lock_type;

        return $this;
    }

    /**
     * Gets ownership
     *
     * @return string
     */
    public function getOwnership()
    {
        return $this->container['ownership'];
    }

    /**
     * Sets ownership
     *
     * @param string $ownership Describes if the lock is your own or it belongs to someone else who has shared it with you.
     *
     * @return $this
     */
    public function setOwnership($ownership)
    {
        $allowedValues = $this->getOwnershipAllowableValues();
        if (!is_null($ownership) && !in_array($ownership, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ownership', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ownership'] = $ownership;

        return $this;
    }

    /**
     * Gets lock_technology
     *
     * @return string
     */
    public function getLockTechnology()
    {
        return $this->container['lock_technology'];
    }

    /**
     * Sets lock_technology
     *
     * @param string $lock_technology Type of lock technology
     *
     * @return $this
     */
    public function setLockTechnology($lock_technology)
    {
        $allowedValues = $this->getLockTechnologyAllowableValues();
        if (!is_null($lock_technology) && !in_array($lock_technology, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lock_technology', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lock_technology'] = $lock_technology;

        return $this;
    }

    /**
     * Gets lock_identifier
     *
     * @return string
     */
    public function getLockIdentifier()
    {
        return $this->container['lock_identifier'];
    }

    /**
     * Sets lock_identifier
     *
     * @param string $lock_identifier Identifier of the lock
     *
     * @return $this
     */
    public function setLockIdentifier($lock_identifier)
    {
        if (!is_null($lock_identifier) && (mb_strlen($lock_identifier) > 16)) {
            throw new \InvalidArgumentException('invalid length for $lock_identifier when calling Lock., must be smaller than or equal to 16.');
        }
        if (!is_null($lock_identifier) && (mb_strlen($lock_identifier) < 0)) {
            throw new \InvalidArgumentException('invalid length for $lock_identifier when calling Lock., must be bigger than or equal to 0.');
        }

        $this->container['lock_identifier'] = $lock_identifier;

        return $this;
    }

    /**
     * Gets locking_system_id
     *
     * @return int
     */
    public function getLockingSystemId()
    {
        return $this->container['locking_system_id'];
    }

    /**
     * Sets locking_system_id
     *
     * @param int $locking_system_id Technical identifier of the lock
     *
     * @return $this
     */
    public function setLockingSystemId($locking_system_id)
    {
        $this->container['locking_system_id'] = $locking_system_id;

        return $this;
    }

    /**
     * Gets lock_door
     *
     * @return \Coucounco\Airkey\Swagger\Client\Model\LockDoor
     */
    public function getLockDoor()
    {
        return $this->container['lock_door'];
    }

    /**
     * Sets lock_door
     *
     * @param \Coucounco\Airkey\Swagger\Client\Model\LockDoor $lock_door Door information associated with the lock
     *
     * @return $this
     */
    public function setLockDoor($lock_door)
    {
        $this->container['lock_door'] = $lock_door;

        return $this;
    }

    /**
     * Gets lock_firmware
     *
     * @return \Coucounco\Airkey\Swagger\Client\Model\LockFirmware
     */
    public function getLockFirmware()
    {
        return $this->container['lock_firmware'];
    }

    /**
     * Sets lock_firmware
     *
     * @param \Coucounco\Airkey\Swagger\Client\Model\LockFirmware $lock_firmware Current firmware of the lock
     *
     * @return $this
     */
    public function setLockFirmware($lock_firmware)
    {
        $this->container['lock_firmware'] = $lock_firmware;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 500)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling Lock., must be smaller than or equal to 500.');
        }
        if (!is_null($comment) && (mb_strlen($comment) < 0)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling Lock., must be bigger than or equal to 0.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets removal_requested
     *
     * @return bool
     */
    public function getRemovalRequested()
    {
        return $this->container['removal_requested'];
    }

    /**
     * Sets removal_requested
     *
     * @param bool $removal_requested Indicates if a lock is to be removed. Needs lock synchronization to actually remove the lock.
     *
     * @return $this
     */
    public function setRemovalRequested($removal_requested)
    {
        $this->container['removal_requested'] = $removal_requested;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


