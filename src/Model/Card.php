<?php
/**
 * Card
 *
 * PHP version 5
 *
 * @category Class
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v18.0.4
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Coucounco\Airkey\Swagger\Client\Model;
use \Coucounco\Airkey\Swagger\Client\ObjectSerializer;

/**
 * Card Class Doc Comment
 *
 * @category Class
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Card extends Medium 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Card';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'medium_type' => 'string',
        'card_uid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'medium_type' => null,
        'card_uid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'medium_type' => 'mediumType',
        'card_uid' => 'cardUid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'medium_type' => 'setMediumType',
        'card_uid' => 'setCardUid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'medium_type' => 'getMediumType',
        'card_uid' => 'getCardUid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MEDIUM_TYPE_CARD = 'CARD';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMediumTypeAllowableValues()
    {
        return [
            self::MEDIUM_TYPE_CARD,
        ];
    }
    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['medium_type'] = isset($data['medium_type']) ? $data['medium_type'] : null;
        $this->container['card_uid'] = isset($data['card_uid']) ? $data['card_uid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getMediumTypeAllowableValues();
        if (!is_null($this->container['medium_type']) && !in_array($this->container['medium_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'medium_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['card_uid']) && (mb_strlen($this->container['card_uid']) > 20)) {
            $invalidProperties[] = "invalid value for 'card_uid', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['card_uid']) && (mb_strlen($this->container['card_uid']) < 0)) {
            $invalidProperties[] = "invalid value for 'card_uid', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets medium_type
     *
     * @return string
     */
    public function getMediumType()
    {
        return $this->container['medium_type'];
    }

    /**
     * Sets medium_type
     *
     * @param string $medium_type Card type of the medium
     *
     * @return $this
     */
    public function setMediumType($medium_type)
    {
        $allowedValues = $this->getMediumTypeAllowableValues();
        if (!is_null($medium_type) && !in_array($medium_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'medium_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['medium_type'] = $medium_type;

        return $this;
    }

    /**
     * Gets card_uid
     *
     * @return string
     */
    public function getCardUid()
    {
        return $this->container['card_uid'];
    }

    /**
     * Sets card_uid
     *
     * @param string $card_uid ISO/IEC 14443 UID of the card
     *
     * @return $this
     */
    public function setCardUid($card_uid)
    {
        if (!is_null($card_uid) && (mb_strlen($card_uid) > 20)) {
            throw new \InvalidArgumentException('invalid length for $card_uid when calling Card., must be smaller than or equal to 20.');
        }
        if (!is_null($card_uid) && (mb_strlen($card_uid) < 0)) {
            throw new \InvalidArgumentException('invalid length for $card_uid when calling Card., must be bigger than or equal to 0.');
        }

        $this->container['card_uid'] = $card_uid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


