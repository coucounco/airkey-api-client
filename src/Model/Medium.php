<?php
/**
 * Medium
 *
 * PHP version 5
 *
 * @category Class
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v18.0.4
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Coucounco\Airkey\Swagger\Client\Model;

use \ArrayAccess;
use \Coucounco\Airkey\Swagger\Client\ObjectSerializer;

/**
 * Medium Class Doc Comment
 *
 * @category Class
 * @description Model that describes a medium defined in the access control system. Possible types of media are: &lt;br/&gt;&lt;a href&#x3D;\&quot;#model-Phone\&quot;&gt;Phone&lt;/a&gt;: describes a phone (\&quot;appType\&quot;, \&quot;platformVersion\&quot;, \&quot;phoneSettings\&quot;, \&quot;pairingCode\&quot;, \&quot;pairingCodeValidUntil\&quot;, \&quot;phoneNumber\&quot;, \&quot;sentKeyOn\&quot;) &lt;br/&gt;&lt;a href&#x3D;\&quot;#model-Card\&quot;&gt;Card&lt;/a&gt;: describes a card
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Medium implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = 'mediumType';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Medium';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'version' => 'int',
        'name' => 'string',
        'medium_identifier' => 'string',
        'locking_system_id' => 'int',
        'medium_type' => 'string',
        'last_synchronized_on' => 'string',
        'comment' => 'string',
        'release_duration_extended' => 'bool',
        'permanent_opening_enabled' => 'bool',
        'activated' => 'bool',
        'person_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'version' => 'int64',
        'name' => null,
        'medium_identifier' => null,
        'locking_system_id' => 'int64',
        'medium_type' => null,
        'last_synchronized_on' => null,
        'comment' => null,
        'release_duration_extended' => null,
        'permanent_opening_enabled' => null,
        'activated' => null,
        'person_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'name' => 'name',
        'medium_identifier' => 'mediumIdentifier',
        'locking_system_id' => 'lockingSystemId',
        'medium_type' => 'mediumType',
        'last_synchronized_on' => 'lastSynchronizedOn',
        'comment' => 'comment',
        'release_duration_extended' => 'releaseDurationExtended',
        'permanent_opening_enabled' => 'permanentOpeningEnabled',
        'activated' => 'activated',
        'person_id' => 'personId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'name' => 'setName',
        'medium_identifier' => 'setMediumIdentifier',
        'locking_system_id' => 'setLockingSystemId',
        'medium_type' => 'setMediumType',
        'last_synchronized_on' => 'setLastSynchronizedOn',
        'comment' => 'setComment',
        'release_duration_extended' => 'setReleaseDurationExtended',
        'permanent_opening_enabled' => 'setPermanentOpeningEnabled',
        'activated' => 'setActivated',
        'person_id' => 'setPersonId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'name' => 'getName',
        'medium_identifier' => 'getMediumIdentifier',
        'locking_system_id' => 'getLockingSystemId',
        'medium_type' => 'getMediumType',
        'last_synchronized_on' => 'getLastSynchronizedOn',
        'comment' => 'getComment',
        'release_duration_extended' => 'getReleaseDurationExtended',
        'permanent_opening_enabled' => 'getPermanentOpeningEnabled',
        'activated' => 'getActivated',
        'person_id' => 'getPersonId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MEDIUM_TYPE_PHONE = 'PHONE';
    const MEDIUM_TYPE_CARD = 'CARD';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMediumTypeAllowableValues()
    {
        return [
            self::MEDIUM_TYPE_PHONE,
            self::MEDIUM_TYPE_CARD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['medium_identifier'] = isset($data['medium_identifier']) ? $data['medium_identifier'] : null;
        $this->container['locking_system_id'] = isset($data['locking_system_id']) ? $data['locking_system_id'] : null;
        $this->container['medium_type'] = isset($data['medium_type']) ? $data['medium_type'] : null;
        $this->container['last_synchronized_on'] = isset($data['last_synchronized_on']) ? $data['last_synchronized_on'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['release_duration_extended'] = isset($data['release_duration_extended']) ? $data['release_duration_extended'] : null;
        $this->container['permanent_opening_enabled'] = isset($data['permanent_opening_enabled']) ? $data['permanent_opening_enabled'] : null;
        $this->container['activated'] = isset($data['activated']) ? $data['activated'] : null;
        $this->container['person_id'] = isset($data['person_id']) ? $data['person_id'] : null;

        // Initialize discriminator property with the model name.
        $discriminator = array_search('mediumType', self::$attributeMap, true);
        $this->container[$discriminator] = static::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['medium_identifier']) && (mb_strlen($this->container['medium_identifier']) > 16)) {
            $invalidProperties[] = "invalid value for 'medium_identifier', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['medium_identifier']) && (mb_strlen($this->container['medium_identifier']) < 0)) {
            $invalidProperties[] = "invalid value for 'medium_identifier', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getMediumTypeAllowableValues();
        if (!is_null($this->container['medium_type']) && !in_array($this->container['medium_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'medium_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['last_synchronized_on']) && (mb_strlen($this->container['last_synchronized_on']) > 24)) {
            $invalidProperties[] = "invalid value for 'last_synchronized_on', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['last_synchronized_on']) && (mb_strlen($this->container['last_synchronized_on']) < 0)) {
            $invalidProperties[] = "invalid value for 'last_synchronized_on', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 500)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) < 0)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['release_duration_extended'] === null) {
            $invalidProperties[] = "'release_duration_extended' can't be null";
        }
        if ($this->container['permanent_opening_enabled'] === null) {
            $invalidProperties[] = "'permanent_opening_enabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Current version number of the medium
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the medium (max. 50 characters)
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Medium., must be smaller than or equal to 50.');
        }
        if (!is_null($name) && (mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Medium., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets medium_identifier
     *
     * @return string
     */
    public function getMediumIdentifier()
    {
        return $this->container['medium_identifier'];
    }

    /**
     * Sets medium_identifier
     *
     * @param string $medium_identifier Identifier of the medium
     *
     * @return $this
     */
    public function setMediumIdentifier($medium_identifier)
    {
        if (!is_null($medium_identifier) && (mb_strlen($medium_identifier) > 16)) {
            throw new \InvalidArgumentException('invalid length for $medium_identifier when calling Medium., must be smaller than or equal to 16.');
        }
        if (!is_null($medium_identifier) && (mb_strlen($medium_identifier) < 0)) {
            throw new \InvalidArgumentException('invalid length for $medium_identifier when calling Medium., must be bigger than or equal to 0.');
        }

        $this->container['medium_identifier'] = $medium_identifier;

        return $this;
    }

    /**
     * Gets locking_system_id
     *
     * @return int
     */
    public function getLockingSystemId()
    {
        return $this->container['locking_system_id'];
    }

    /**
     * Sets locking_system_id
     *
     * @param int $locking_system_id Technical identifier of the medium
     *
     * @return $this
     */
    public function setLockingSystemId($locking_system_id)
    {
        $this->container['locking_system_id'] = $locking_system_id;

        return $this;
    }

    /**
     * Gets medium_type
     *
     * @return string
     */
    public function getMediumType()
    {
        return $this->container['medium_type'];
    }

    /**
     * Sets medium_type
     *
     * @param string $medium_type Type of the medium
     *
     * @return $this
     */
    public function setMediumType($medium_type)
    {
        $allowedValues = $this->getMediumTypeAllowableValues();
        if (!is_null($medium_type) && !in_array($medium_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'medium_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['medium_type'] = $medium_type;

        return $this;
    }

    /**
     * Gets last_synchronized_on
     *
     * @return string
     */
    public function getLastSynchronizedOn()
    {
        return $this->container['last_synchronized_on'];
    }

    /**
     * Sets last_synchronized_on
     *
     * @param string $last_synchronized_on Timestamp of the last synchronization (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)
     *
     * @return $this
     */
    public function setLastSynchronizedOn($last_synchronized_on)
    {
        if (!is_null($last_synchronized_on) && (mb_strlen($last_synchronized_on) > 24)) {
            throw new \InvalidArgumentException('invalid length for $last_synchronized_on when calling Medium., must be smaller than or equal to 24.');
        }
        if (!is_null($last_synchronized_on) && (mb_strlen($last_synchronized_on) < 0)) {
            throw new \InvalidArgumentException('invalid length for $last_synchronized_on when calling Medium., must be bigger than or equal to 0.');
        }

        $this->container['last_synchronized_on'] = $last_synchronized_on;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comment (max. 500 characters)
     *
     * @return $this
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 500)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling Medium., must be smaller than or equal to 500.');
        }
        if (!is_null($comment) && (mb_strlen($comment) < 0)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling Medium., must be bigger than or equal to 0.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets release_duration_extended
     *
     * @return bool
     */
    public function getReleaseDurationExtended()
    {
        return $this->container['release_duration_extended'];
    }

    /**
     * Sets release_duration_extended
     *
     * @param bool $release_duration_extended Release duration is extended or not
     *
     * @return $this
     */
    public function setReleaseDurationExtended($release_duration_extended)
    {
        $this->container['release_duration_extended'] = $release_duration_extended;

        return $this;
    }

    /**
     * Gets permanent_opening_enabled
     *
     * @return bool
     */
    public function getPermanentOpeningEnabled()
    {
        return $this->container['permanent_opening_enabled'];
    }

    /**
     * Sets permanent_opening_enabled
     *
     * @param bool $permanent_opening_enabled Permanent opening is enabled or not
     *
     * @return $this
     */
    public function setPermanentOpeningEnabled($permanent_opening_enabled)
    {
        $this->container['permanent_opening_enabled'] = $permanent_opening_enabled;

        return $this;
    }

    /**
     * Gets activated
     *
     * @return bool
     */
    public function getActivated()
    {
        return $this->container['activated'];
    }

    /**
     * Sets activated
     *
     * @param bool $activated Activated or not
     *
     * @return $this
     */
    public function setActivated($activated)
    {
        $this->container['activated'] = $activated;

        return $this;
    }

    /**
     * Gets person_id
     *
     * @return int
     */
    public function getPersonId()
    {
        return $this->container['person_id'];
    }

    /**
     * Sets person_id
     *
     * @param int $person_id Person this medium is assigned to
     *
     * @return $this
     */
    public function setPersonId($person_id)
    {
        $this->container['person_id'] = $person_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


