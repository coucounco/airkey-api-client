<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v14.40.2
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Coucounco\Airkey\Swagger\Client\Model;

use \ArrayAccess;
use \Coucounco\Airkey\Swagger\Client\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @description Model that describes data of a customer.
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Customer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_control_system_name' => 'string',
        'customer_number' => 'string',
        'created_on' => 'string',
        'contact_title' => 'string',
        'customer_name' => 'string',
        'contact_person' => 'string',
        'address_street' => 'string',
        'address_post_code' => 'string',
        'address_city' => 'string',
        'address_country_code' => 'string',
        'contact_phone_number' => 'string',
        'contact_email_address' => 'string',
        'fax' => 'string',
        'correspondence_language_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_control_system_name' => null,
        'customer_number' => null,
        'created_on' => null,
        'contact_title' => null,
        'customer_name' => null,
        'contact_person' => null,
        'address_street' => null,
        'address_post_code' => null,
        'address_city' => null,
        'address_country_code' => null,
        'contact_phone_number' => null,
        'contact_email_address' => null,
        'fax' => null,
        'correspondence_language_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_control_system_name' => 'accessControlSystemName',
        'customer_number' => 'customerNumber',
        'created_on' => 'createdOn',
        'contact_title' => 'contactTitle',
        'customer_name' => 'customerName',
        'contact_person' => 'contactPerson',
        'address_street' => 'addressStreet',
        'address_post_code' => 'addressPostCode',
        'address_city' => 'addressCity',
        'address_country_code' => 'addressCountryCode',
        'contact_phone_number' => 'contactPhoneNumber',
        'contact_email_address' => 'contactEmailAddress',
        'fax' => 'fax',
        'correspondence_language_code' => 'correspondenceLanguageCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_control_system_name' => 'setAccessControlSystemName',
        'customer_number' => 'setCustomerNumber',
        'created_on' => 'setCreatedOn',
        'contact_title' => 'setContactTitle',
        'customer_name' => 'setCustomerName',
        'contact_person' => 'setContactPerson',
        'address_street' => 'setAddressStreet',
        'address_post_code' => 'setAddressPostCode',
        'address_city' => 'setAddressCity',
        'address_country_code' => 'setAddressCountryCode',
        'contact_phone_number' => 'setContactPhoneNumber',
        'contact_email_address' => 'setContactEmailAddress',
        'fax' => 'setFax',
        'correspondence_language_code' => 'setCorrespondenceLanguageCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_control_system_name' => 'getAccessControlSystemName',
        'customer_number' => 'getCustomerNumber',
        'created_on' => 'getCreatedOn',
        'contact_title' => 'getContactTitle',
        'customer_name' => 'getCustomerName',
        'contact_person' => 'getContactPerson',
        'address_street' => 'getAddressStreet',
        'address_post_code' => 'getAddressPostCode',
        'address_city' => 'getAddressCity',
        'address_country_code' => 'getAddressCountryCode',
        'contact_phone_number' => 'getContactPhoneNumber',
        'contact_email_address' => 'getContactEmailAddress',
        'fax' => 'getFax',
        'correspondence_language_code' => 'getCorrespondenceLanguageCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONTACT_TITLE_MR = 'MR';
    const CONTACT_TITLE_MS = 'MS';
    const ADDRESS_COUNTRY_CODE_ABW = 'ABW';
    const ADDRESS_COUNTRY_CODE_AFG = 'AFG';
    const ADDRESS_COUNTRY_CODE_AGO = 'AGO';
    const ADDRESS_COUNTRY_CODE_AIA = 'AIA';
    const ADDRESS_COUNTRY_CODE_ALA = 'ALA';
    const ADDRESS_COUNTRY_CODE_ALB = 'ALB';
    const ADDRESS_COUNTRY_CODE__AND = 'AND';
    const ADDRESS_COUNTRY_CODE_ANT = 'ANT';
    const ADDRESS_COUNTRY_CODE_ARE = 'ARE';
    const ADDRESS_COUNTRY_CODE_ARG = 'ARG';
    const ADDRESS_COUNTRY_CODE_ARM = 'ARM';
    const ADDRESS_COUNTRY_CODE_ASM = 'ASM';
    const ADDRESS_COUNTRY_CODE_ATA = 'ATA';
    const ADDRESS_COUNTRY_CODE_ATF = 'ATF';
    const ADDRESS_COUNTRY_CODE_ATG = 'ATG';
    const ADDRESS_COUNTRY_CODE_AUS = 'AUS';
    const ADDRESS_COUNTRY_CODE_AUT = 'AUT';
    const ADDRESS_COUNTRY_CODE_AZE = 'AZE';
    const ADDRESS_COUNTRY_CODE_BDI = 'BDI';
    const ADDRESS_COUNTRY_CODE_BEL = 'BEL';
    const ADDRESS_COUNTRY_CODE_BEN = 'BEN';
    const ADDRESS_COUNTRY_CODE_BES = 'BES';
    const ADDRESS_COUNTRY_CODE_BFA = 'BFA';
    const ADDRESS_COUNTRY_CODE_BGD = 'BGD';
    const ADDRESS_COUNTRY_CODE_BGR = 'BGR';
    const ADDRESS_COUNTRY_CODE_BHR = 'BHR';
    const ADDRESS_COUNTRY_CODE_BHS = 'BHS';
    const ADDRESS_COUNTRY_CODE_BIH = 'BIH';
    const ADDRESS_COUNTRY_CODE_BLM = 'BLM';
    const ADDRESS_COUNTRY_CODE_BLR = 'BLR';
    const ADDRESS_COUNTRY_CODE_BLZ = 'BLZ';
    const ADDRESS_COUNTRY_CODE_BMU = 'BMU';
    const ADDRESS_COUNTRY_CODE_BOL = 'BOL';
    const ADDRESS_COUNTRY_CODE_BRA = 'BRA';
    const ADDRESS_COUNTRY_CODE_BRB = 'BRB';
    const ADDRESS_COUNTRY_CODE_BRN = 'BRN';
    const ADDRESS_COUNTRY_CODE_BTN = 'BTN';
    const ADDRESS_COUNTRY_CODE_BVT = 'BVT';
    const ADDRESS_COUNTRY_CODE_BWA = 'BWA';
    const ADDRESS_COUNTRY_CODE_CAF = 'CAF';
    const ADDRESS_COUNTRY_CODE_CAN = 'CAN';
    const ADDRESS_COUNTRY_CODE_CCK = 'CCK';
    const ADDRESS_COUNTRY_CODE_CHE = 'CHE';
    const ADDRESS_COUNTRY_CODE_CHL = 'CHL';
    const ADDRESS_COUNTRY_CODE_CHN = 'CHN';
    const ADDRESS_COUNTRY_CODE_CIV = 'CIV';
    const ADDRESS_COUNTRY_CODE_CMR = 'CMR';
    const ADDRESS_COUNTRY_CODE_COD = 'COD';
    const ADDRESS_COUNTRY_CODE_COG = 'COG';
    const ADDRESS_COUNTRY_CODE_COK = 'COK';
    const ADDRESS_COUNTRY_CODE_COL = 'COL';
    const ADDRESS_COUNTRY_CODE_COM = 'COM';
    const ADDRESS_COUNTRY_CODE_CPV = 'CPV';
    const ADDRESS_COUNTRY_CODE_CRI = 'CRI';
    const ADDRESS_COUNTRY_CODE_CUB = 'CUB';
    const ADDRESS_COUNTRY_CODE_CUW = 'CUW';
    const ADDRESS_COUNTRY_CODE_CXR = 'CXR';
    const ADDRESS_COUNTRY_CODE_CYM = 'CYM';
    const ADDRESS_COUNTRY_CODE_CYP = 'CYP';
    const ADDRESS_COUNTRY_CODE_CZE = 'CZE';
    const ADDRESS_COUNTRY_CODE_DEU = 'DEU';
    const ADDRESS_COUNTRY_CODE_DJI = 'DJI';
    const ADDRESS_COUNTRY_CODE_DMA = 'DMA';
    const ADDRESS_COUNTRY_CODE_DNK = 'DNK';
    const ADDRESS_COUNTRY_CODE_DOM = 'DOM';
    const ADDRESS_COUNTRY_CODE_DZA = 'DZA';
    const ADDRESS_COUNTRY_CODE_ECU = 'ECU';
    const ADDRESS_COUNTRY_CODE_EGY = 'EGY';
    const ADDRESS_COUNTRY_CODE_ERI = 'ERI';
    const ADDRESS_COUNTRY_CODE_ESH = 'ESH';
    const ADDRESS_COUNTRY_CODE_ESP = 'ESP';
    const ADDRESS_COUNTRY_CODE_EST = 'EST';
    const ADDRESS_COUNTRY_CODE_ETH = 'ETH';
    const ADDRESS_COUNTRY_CODE_FIN = 'FIN';
    const ADDRESS_COUNTRY_CODE_FJI = 'FJI';
    const ADDRESS_COUNTRY_CODE_FLK = 'FLK';
    const ADDRESS_COUNTRY_CODE_FRA = 'FRA';
    const ADDRESS_COUNTRY_CODE_FRO = 'FRO';
    const ADDRESS_COUNTRY_CODE_FSM = 'FSM';
    const ADDRESS_COUNTRY_CODE_GAB = 'GAB';
    const ADDRESS_COUNTRY_CODE_GBR = 'GBR';
    const ADDRESS_COUNTRY_CODE_GEO = 'GEO';
    const ADDRESS_COUNTRY_CODE_GGY = 'GGY';
    const ADDRESS_COUNTRY_CODE_GHA = 'GHA';
    const ADDRESS_COUNTRY_CODE_GIB = 'GIB';
    const ADDRESS_COUNTRY_CODE_GIN = 'GIN';
    const ADDRESS_COUNTRY_CODE_GLP = 'GLP';
    const ADDRESS_COUNTRY_CODE_GMB = 'GMB';
    const ADDRESS_COUNTRY_CODE_GNB = 'GNB';
    const ADDRESS_COUNTRY_CODE_GNQ = 'GNQ';
    const ADDRESS_COUNTRY_CODE_GRC = 'GRC';
    const ADDRESS_COUNTRY_CODE_GRD = 'GRD';
    const ADDRESS_COUNTRY_CODE_GRL = 'GRL';
    const ADDRESS_COUNTRY_CODE_GTM = 'GTM';
    const ADDRESS_COUNTRY_CODE_GUF = 'GUF';
    const ADDRESS_COUNTRY_CODE_GUM = 'GUM';
    const ADDRESS_COUNTRY_CODE_GUY = 'GUY';
    const ADDRESS_COUNTRY_CODE_HKG = 'HKG';
    const ADDRESS_COUNTRY_CODE_HMD = 'HMD';
    const ADDRESS_COUNTRY_CODE_HND = 'HND';
    const ADDRESS_COUNTRY_CODE_HRV = 'HRV';
    const ADDRESS_COUNTRY_CODE_HTI = 'HTI';
    const ADDRESS_COUNTRY_CODE_HUN = 'HUN';
    const ADDRESS_COUNTRY_CODE_IDN = 'IDN';
    const ADDRESS_COUNTRY_CODE_IMN = 'IMN';
    const ADDRESS_COUNTRY_CODE_IND = 'IND';
    const ADDRESS_COUNTRY_CODE_IOT = 'IOT';
    const ADDRESS_COUNTRY_CODE_IRL = 'IRL';
    const ADDRESS_COUNTRY_CODE_IRN = 'IRN';
    const ADDRESS_COUNTRY_CODE_IRQ = 'IRQ';
    const ADDRESS_COUNTRY_CODE_ISL = 'ISL';
    const ADDRESS_COUNTRY_CODE_ISR = 'ISR';
    const ADDRESS_COUNTRY_CODE_ITA = 'ITA';
    const ADDRESS_COUNTRY_CODE_JAM = 'JAM';
    const ADDRESS_COUNTRY_CODE_JEY = 'JEY';
    const ADDRESS_COUNTRY_CODE_JOR = 'JOR';
    const ADDRESS_COUNTRY_CODE_JPN = 'JPN';
    const ADDRESS_COUNTRY_CODE_KAZ = 'KAZ';
    const ADDRESS_COUNTRY_CODE_KEN = 'KEN';
    const ADDRESS_COUNTRY_CODE_KGZ = 'KGZ';
    const ADDRESS_COUNTRY_CODE_KHM = 'KHM';
    const ADDRESS_COUNTRY_CODE_KIR = 'KIR';
    const ADDRESS_COUNTRY_CODE_KNA = 'KNA';
    const ADDRESS_COUNTRY_CODE_KOR = 'KOR';
    const ADDRESS_COUNTRY_CODE_KWT = 'KWT';
    const ADDRESS_COUNTRY_CODE_LAO = 'LAO';
    const ADDRESS_COUNTRY_CODE_LBN = 'LBN';
    const ADDRESS_COUNTRY_CODE_LBR = 'LBR';
    const ADDRESS_COUNTRY_CODE_LBY = 'LBY';
    const ADDRESS_COUNTRY_CODE_LCA = 'LCA';
    const ADDRESS_COUNTRY_CODE_LIE = 'LIE';
    const ADDRESS_COUNTRY_CODE_LKA = 'LKA';
    const ADDRESS_COUNTRY_CODE_LSO = 'LSO';
    const ADDRESS_COUNTRY_CODE_LTU = 'LTU';
    const ADDRESS_COUNTRY_CODE_LUX = 'LUX';
    const ADDRESS_COUNTRY_CODE_LVA = 'LVA';
    const ADDRESS_COUNTRY_CODE_MAC = 'MAC';
    const ADDRESS_COUNTRY_CODE_MAF = 'MAF';
    const ADDRESS_COUNTRY_CODE_MAR = 'MAR';
    const ADDRESS_COUNTRY_CODE_MCO = 'MCO';
    const ADDRESS_COUNTRY_CODE_MDA = 'MDA';
    const ADDRESS_COUNTRY_CODE_MDG = 'MDG';
    const ADDRESS_COUNTRY_CODE_MDV = 'MDV';
    const ADDRESS_COUNTRY_CODE_MEX = 'MEX';
    const ADDRESS_COUNTRY_CODE_MHL = 'MHL';
    const ADDRESS_COUNTRY_CODE_MKD = 'MKD';
    const ADDRESS_COUNTRY_CODE_MLI = 'MLI';
    const ADDRESS_COUNTRY_CODE_MLT = 'MLT';
    const ADDRESS_COUNTRY_CODE_MMR = 'MMR';
    const ADDRESS_COUNTRY_CODE_MNE = 'MNE';
    const ADDRESS_COUNTRY_CODE_MNG = 'MNG';
    const ADDRESS_COUNTRY_CODE_MNP = 'MNP';
    const ADDRESS_COUNTRY_CODE_MOZ = 'MOZ';
    const ADDRESS_COUNTRY_CODE_MRT = 'MRT';
    const ADDRESS_COUNTRY_CODE_MSR = 'MSR';
    const ADDRESS_COUNTRY_CODE_MTQ = 'MTQ';
    const ADDRESS_COUNTRY_CODE_MUS = 'MUS';
    const ADDRESS_COUNTRY_CODE_MWI = 'MWI';
    const ADDRESS_COUNTRY_CODE_MYS = 'MYS';
    const ADDRESS_COUNTRY_CODE_MYT = 'MYT';
    const ADDRESS_COUNTRY_CODE_NAM = 'NAM';
    const ADDRESS_COUNTRY_CODE_NCL = 'NCL';
    const ADDRESS_COUNTRY_CODE_NER = 'NER';
    const ADDRESS_COUNTRY_CODE_NFK = 'NFK';
    const ADDRESS_COUNTRY_CODE_NGA = 'NGA';
    const ADDRESS_COUNTRY_CODE_NIC = 'NIC';
    const ADDRESS_COUNTRY_CODE_NIU = 'NIU';
    const ADDRESS_COUNTRY_CODE_NLD = 'NLD';
    const ADDRESS_COUNTRY_CODE_NOR = 'NOR';
    const ADDRESS_COUNTRY_CODE_NPL = 'NPL';
    const ADDRESS_COUNTRY_CODE_NRU = 'NRU';
    const ADDRESS_COUNTRY_CODE_NZL = 'NZL';
    const ADDRESS_COUNTRY_CODE_OMN = 'OMN';
    const ADDRESS_COUNTRY_CODE_PAK = 'PAK';
    const ADDRESS_COUNTRY_CODE_PAN = 'PAN';
    const ADDRESS_COUNTRY_CODE_PCN = 'PCN';
    const ADDRESS_COUNTRY_CODE_PER = 'PER';
    const ADDRESS_COUNTRY_CODE_PHL = 'PHL';
    const ADDRESS_COUNTRY_CODE_PLW = 'PLW';
    const ADDRESS_COUNTRY_CODE_PNG = 'PNG';
    const ADDRESS_COUNTRY_CODE_POL = 'POL';
    const ADDRESS_COUNTRY_CODE_PRI = 'PRI';
    const ADDRESS_COUNTRY_CODE_PRK = 'PRK';
    const ADDRESS_COUNTRY_CODE_PRT = 'PRT';
    const ADDRESS_COUNTRY_CODE_PRY = 'PRY';
    const ADDRESS_COUNTRY_CODE_PSE = 'PSE';
    const ADDRESS_COUNTRY_CODE_PYF = 'PYF';
    const ADDRESS_COUNTRY_CODE_QAT = 'QAT';
    const ADDRESS_COUNTRY_CODE_REU = 'REU';
    const ADDRESS_COUNTRY_CODE_ROU = 'ROU';
    const ADDRESS_COUNTRY_CODE_RUS = 'RUS';
    const ADDRESS_COUNTRY_CODE_RWA = 'RWA';
    const ADDRESS_COUNTRY_CODE_SAU = 'SAU';
    const ADDRESS_COUNTRY_CODE_SCG = 'SCG';
    const ADDRESS_COUNTRY_CODE_SDN = 'SDN';
    const ADDRESS_COUNTRY_CODE_SEN = 'SEN';
    const ADDRESS_COUNTRY_CODE_SGP = 'SGP';
    const ADDRESS_COUNTRY_CODE_SGS = 'SGS';
    const ADDRESS_COUNTRY_CODE_SHN = 'SHN';
    const ADDRESS_COUNTRY_CODE_SJM = 'SJM';
    const ADDRESS_COUNTRY_CODE_SLB = 'SLB';
    const ADDRESS_COUNTRY_CODE_SLE = 'SLE';
    const ADDRESS_COUNTRY_CODE_SLV = 'SLV';
    const ADDRESS_COUNTRY_CODE_SMR = 'SMR';
    const ADDRESS_COUNTRY_CODE_SOM = 'SOM';
    const ADDRESS_COUNTRY_CODE_SPM = 'SPM';
    const ADDRESS_COUNTRY_CODE_SRB = 'SRB';
    const ADDRESS_COUNTRY_CODE_STP = 'STP';
    const ADDRESS_COUNTRY_CODE_SUR = 'SUR';
    const ADDRESS_COUNTRY_CODE_SVK = 'SVK';
    const ADDRESS_COUNTRY_CODE_SVN = 'SVN';
    const ADDRESS_COUNTRY_CODE_SWE = 'SWE';
    const ADDRESS_COUNTRY_CODE_SWZ = 'SWZ';
    const ADDRESS_COUNTRY_CODE_SXM = 'SXM';
    const ADDRESS_COUNTRY_CODE_SYC = 'SYC';
    const ADDRESS_COUNTRY_CODE_SYR = 'SYR';
    const ADDRESS_COUNTRY_CODE_TCA = 'TCA';
    const ADDRESS_COUNTRY_CODE_TCD = 'TCD';
    const ADDRESS_COUNTRY_CODE_TGO = 'TGO';
    const ADDRESS_COUNTRY_CODE_THA = 'THA';
    const ADDRESS_COUNTRY_CODE_TJK = 'TJK';
    const ADDRESS_COUNTRY_CODE_TKL = 'TKL';
    const ADDRESS_COUNTRY_CODE_TKM = 'TKM';
    const ADDRESS_COUNTRY_CODE_TLS = 'TLS';
    const ADDRESS_COUNTRY_CODE_TON = 'TON';
    const ADDRESS_COUNTRY_CODE_TTO = 'TTO';
    const ADDRESS_COUNTRY_CODE_TUN = 'TUN';
    const ADDRESS_COUNTRY_CODE_TUR = 'TUR';
    const ADDRESS_COUNTRY_CODE_TUV = 'TUV';
    const ADDRESS_COUNTRY_CODE_TWN = 'TWN';
    const ADDRESS_COUNTRY_CODE_TZA = 'TZA';
    const ADDRESS_COUNTRY_CODE_UGA = 'UGA';
    const ADDRESS_COUNTRY_CODE_UKR = 'UKR';
    const ADDRESS_COUNTRY_CODE_UMI = 'UMI';
    const ADDRESS_COUNTRY_CODE_URY = 'URY';
    const ADDRESS_COUNTRY_CODE_USA = 'USA';
    const ADDRESS_COUNTRY_CODE_UZB = 'UZB';
    const ADDRESS_COUNTRY_CODE_VAT = 'VAT';
    const ADDRESS_COUNTRY_CODE_VCT = 'VCT';
    const ADDRESS_COUNTRY_CODE_VEN = 'VEN';
    const ADDRESS_COUNTRY_CODE_VGB = 'VGB';
    const ADDRESS_COUNTRY_CODE_VIR = 'VIR';
    const ADDRESS_COUNTRY_CODE_VNM = 'VNM';
    const ADDRESS_COUNTRY_CODE_VUT = 'VUT';
    const ADDRESS_COUNTRY_CODE_WLF = 'WLF';
    const ADDRESS_COUNTRY_CODE_WSM = 'WSM';
    const ADDRESS_COUNTRY_CODE_YEM = 'YEM';
    const ADDRESS_COUNTRY_CODE_ZAF = 'ZAF';
    const ADDRESS_COUNTRY_CODE_ZMB = 'ZMB';
    const ADDRESS_COUNTRY_CODE_ZWE = 'ZWE';
    const CORRESPONDENCE_LANGUAGE_CODE_DE_DE = 'de-DE';
    const CORRESPONDENCE_LANGUAGE_CODE_EN_UK = 'en-UK';
    const CORRESPONDENCE_LANGUAGE_CODE_NL_NL = 'nl-NL';
    const CORRESPONDENCE_LANGUAGE_CODE_SV_SE = 'sv-SE';
    const CORRESPONDENCE_LANGUAGE_CODE_FR_FR = 'fr-FR';
    const CORRESPONDENCE_LANGUAGE_CODE_IT_IT = 'it-IT';
    const CORRESPONDENCE_LANGUAGE_CODE_ES_ES = 'es-ES';
    const CORRESPONDENCE_LANGUAGE_CODE_PT_PT = 'pt-PT';
    const CORRESPONDENCE_LANGUAGE_CODE_CS_CZ = 'cs-CZ';
    const CORRESPONDENCE_LANGUAGE_CODE_SK_SK = 'sk-SK';
    const CORRESPONDENCE_LANGUAGE_CODE_PL_PL = 'pl-PL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContactTitleAllowableValues()
    {
        return [
            self::CONTACT_TITLE_MR,
            self::CONTACT_TITLE_MS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressCountryCodeAllowableValues()
    {
        return [
            self::ADDRESS_COUNTRY_CODE_ABW,
            self::ADDRESS_COUNTRY_CODE_AFG,
            self::ADDRESS_COUNTRY_CODE_AGO,
            self::ADDRESS_COUNTRY_CODE_AIA,
            self::ADDRESS_COUNTRY_CODE_ALA,
            self::ADDRESS_COUNTRY_CODE_ALB,
            self::ADDRESS_COUNTRY_CODE__AND,
            self::ADDRESS_COUNTRY_CODE_ANT,
            self::ADDRESS_COUNTRY_CODE_ARE,
            self::ADDRESS_COUNTRY_CODE_ARG,
            self::ADDRESS_COUNTRY_CODE_ARM,
            self::ADDRESS_COUNTRY_CODE_ASM,
            self::ADDRESS_COUNTRY_CODE_ATA,
            self::ADDRESS_COUNTRY_CODE_ATF,
            self::ADDRESS_COUNTRY_CODE_ATG,
            self::ADDRESS_COUNTRY_CODE_AUS,
            self::ADDRESS_COUNTRY_CODE_AUT,
            self::ADDRESS_COUNTRY_CODE_AZE,
            self::ADDRESS_COUNTRY_CODE_BDI,
            self::ADDRESS_COUNTRY_CODE_BEL,
            self::ADDRESS_COUNTRY_CODE_BEN,
            self::ADDRESS_COUNTRY_CODE_BES,
            self::ADDRESS_COUNTRY_CODE_BFA,
            self::ADDRESS_COUNTRY_CODE_BGD,
            self::ADDRESS_COUNTRY_CODE_BGR,
            self::ADDRESS_COUNTRY_CODE_BHR,
            self::ADDRESS_COUNTRY_CODE_BHS,
            self::ADDRESS_COUNTRY_CODE_BIH,
            self::ADDRESS_COUNTRY_CODE_BLM,
            self::ADDRESS_COUNTRY_CODE_BLR,
            self::ADDRESS_COUNTRY_CODE_BLZ,
            self::ADDRESS_COUNTRY_CODE_BMU,
            self::ADDRESS_COUNTRY_CODE_BOL,
            self::ADDRESS_COUNTRY_CODE_BRA,
            self::ADDRESS_COUNTRY_CODE_BRB,
            self::ADDRESS_COUNTRY_CODE_BRN,
            self::ADDRESS_COUNTRY_CODE_BTN,
            self::ADDRESS_COUNTRY_CODE_BVT,
            self::ADDRESS_COUNTRY_CODE_BWA,
            self::ADDRESS_COUNTRY_CODE_CAF,
            self::ADDRESS_COUNTRY_CODE_CAN,
            self::ADDRESS_COUNTRY_CODE_CCK,
            self::ADDRESS_COUNTRY_CODE_CHE,
            self::ADDRESS_COUNTRY_CODE_CHL,
            self::ADDRESS_COUNTRY_CODE_CHN,
            self::ADDRESS_COUNTRY_CODE_CIV,
            self::ADDRESS_COUNTRY_CODE_CMR,
            self::ADDRESS_COUNTRY_CODE_COD,
            self::ADDRESS_COUNTRY_CODE_COG,
            self::ADDRESS_COUNTRY_CODE_COK,
            self::ADDRESS_COUNTRY_CODE_COL,
            self::ADDRESS_COUNTRY_CODE_COM,
            self::ADDRESS_COUNTRY_CODE_CPV,
            self::ADDRESS_COUNTRY_CODE_CRI,
            self::ADDRESS_COUNTRY_CODE_CUB,
            self::ADDRESS_COUNTRY_CODE_CUW,
            self::ADDRESS_COUNTRY_CODE_CXR,
            self::ADDRESS_COUNTRY_CODE_CYM,
            self::ADDRESS_COUNTRY_CODE_CYP,
            self::ADDRESS_COUNTRY_CODE_CZE,
            self::ADDRESS_COUNTRY_CODE_DEU,
            self::ADDRESS_COUNTRY_CODE_DJI,
            self::ADDRESS_COUNTRY_CODE_DMA,
            self::ADDRESS_COUNTRY_CODE_DNK,
            self::ADDRESS_COUNTRY_CODE_DOM,
            self::ADDRESS_COUNTRY_CODE_DZA,
            self::ADDRESS_COUNTRY_CODE_ECU,
            self::ADDRESS_COUNTRY_CODE_EGY,
            self::ADDRESS_COUNTRY_CODE_ERI,
            self::ADDRESS_COUNTRY_CODE_ESH,
            self::ADDRESS_COUNTRY_CODE_ESP,
            self::ADDRESS_COUNTRY_CODE_EST,
            self::ADDRESS_COUNTRY_CODE_ETH,
            self::ADDRESS_COUNTRY_CODE_FIN,
            self::ADDRESS_COUNTRY_CODE_FJI,
            self::ADDRESS_COUNTRY_CODE_FLK,
            self::ADDRESS_COUNTRY_CODE_FRA,
            self::ADDRESS_COUNTRY_CODE_FRO,
            self::ADDRESS_COUNTRY_CODE_FSM,
            self::ADDRESS_COUNTRY_CODE_GAB,
            self::ADDRESS_COUNTRY_CODE_GBR,
            self::ADDRESS_COUNTRY_CODE_GEO,
            self::ADDRESS_COUNTRY_CODE_GGY,
            self::ADDRESS_COUNTRY_CODE_GHA,
            self::ADDRESS_COUNTRY_CODE_GIB,
            self::ADDRESS_COUNTRY_CODE_GIN,
            self::ADDRESS_COUNTRY_CODE_GLP,
            self::ADDRESS_COUNTRY_CODE_GMB,
            self::ADDRESS_COUNTRY_CODE_GNB,
            self::ADDRESS_COUNTRY_CODE_GNQ,
            self::ADDRESS_COUNTRY_CODE_GRC,
            self::ADDRESS_COUNTRY_CODE_GRD,
            self::ADDRESS_COUNTRY_CODE_GRL,
            self::ADDRESS_COUNTRY_CODE_GTM,
            self::ADDRESS_COUNTRY_CODE_GUF,
            self::ADDRESS_COUNTRY_CODE_GUM,
            self::ADDRESS_COUNTRY_CODE_GUY,
            self::ADDRESS_COUNTRY_CODE_HKG,
            self::ADDRESS_COUNTRY_CODE_HMD,
            self::ADDRESS_COUNTRY_CODE_HND,
            self::ADDRESS_COUNTRY_CODE_HRV,
            self::ADDRESS_COUNTRY_CODE_HTI,
            self::ADDRESS_COUNTRY_CODE_HUN,
            self::ADDRESS_COUNTRY_CODE_IDN,
            self::ADDRESS_COUNTRY_CODE_IMN,
            self::ADDRESS_COUNTRY_CODE_IND,
            self::ADDRESS_COUNTRY_CODE_IOT,
            self::ADDRESS_COUNTRY_CODE_IRL,
            self::ADDRESS_COUNTRY_CODE_IRN,
            self::ADDRESS_COUNTRY_CODE_IRQ,
            self::ADDRESS_COUNTRY_CODE_ISL,
            self::ADDRESS_COUNTRY_CODE_ISR,
            self::ADDRESS_COUNTRY_CODE_ITA,
            self::ADDRESS_COUNTRY_CODE_JAM,
            self::ADDRESS_COUNTRY_CODE_JEY,
            self::ADDRESS_COUNTRY_CODE_JOR,
            self::ADDRESS_COUNTRY_CODE_JPN,
            self::ADDRESS_COUNTRY_CODE_KAZ,
            self::ADDRESS_COUNTRY_CODE_KEN,
            self::ADDRESS_COUNTRY_CODE_KGZ,
            self::ADDRESS_COUNTRY_CODE_KHM,
            self::ADDRESS_COUNTRY_CODE_KIR,
            self::ADDRESS_COUNTRY_CODE_KNA,
            self::ADDRESS_COUNTRY_CODE_KOR,
            self::ADDRESS_COUNTRY_CODE_KWT,
            self::ADDRESS_COUNTRY_CODE_LAO,
            self::ADDRESS_COUNTRY_CODE_LBN,
            self::ADDRESS_COUNTRY_CODE_LBR,
            self::ADDRESS_COUNTRY_CODE_LBY,
            self::ADDRESS_COUNTRY_CODE_LCA,
            self::ADDRESS_COUNTRY_CODE_LIE,
            self::ADDRESS_COUNTRY_CODE_LKA,
            self::ADDRESS_COUNTRY_CODE_LSO,
            self::ADDRESS_COUNTRY_CODE_LTU,
            self::ADDRESS_COUNTRY_CODE_LUX,
            self::ADDRESS_COUNTRY_CODE_LVA,
            self::ADDRESS_COUNTRY_CODE_MAC,
            self::ADDRESS_COUNTRY_CODE_MAF,
            self::ADDRESS_COUNTRY_CODE_MAR,
            self::ADDRESS_COUNTRY_CODE_MCO,
            self::ADDRESS_COUNTRY_CODE_MDA,
            self::ADDRESS_COUNTRY_CODE_MDG,
            self::ADDRESS_COUNTRY_CODE_MDV,
            self::ADDRESS_COUNTRY_CODE_MEX,
            self::ADDRESS_COUNTRY_CODE_MHL,
            self::ADDRESS_COUNTRY_CODE_MKD,
            self::ADDRESS_COUNTRY_CODE_MLI,
            self::ADDRESS_COUNTRY_CODE_MLT,
            self::ADDRESS_COUNTRY_CODE_MMR,
            self::ADDRESS_COUNTRY_CODE_MNE,
            self::ADDRESS_COUNTRY_CODE_MNG,
            self::ADDRESS_COUNTRY_CODE_MNP,
            self::ADDRESS_COUNTRY_CODE_MOZ,
            self::ADDRESS_COUNTRY_CODE_MRT,
            self::ADDRESS_COUNTRY_CODE_MSR,
            self::ADDRESS_COUNTRY_CODE_MTQ,
            self::ADDRESS_COUNTRY_CODE_MUS,
            self::ADDRESS_COUNTRY_CODE_MWI,
            self::ADDRESS_COUNTRY_CODE_MYS,
            self::ADDRESS_COUNTRY_CODE_MYT,
            self::ADDRESS_COUNTRY_CODE_NAM,
            self::ADDRESS_COUNTRY_CODE_NCL,
            self::ADDRESS_COUNTRY_CODE_NER,
            self::ADDRESS_COUNTRY_CODE_NFK,
            self::ADDRESS_COUNTRY_CODE_NGA,
            self::ADDRESS_COUNTRY_CODE_NIC,
            self::ADDRESS_COUNTRY_CODE_NIU,
            self::ADDRESS_COUNTRY_CODE_NLD,
            self::ADDRESS_COUNTRY_CODE_NOR,
            self::ADDRESS_COUNTRY_CODE_NPL,
            self::ADDRESS_COUNTRY_CODE_NRU,
            self::ADDRESS_COUNTRY_CODE_NZL,
            self::ADDRESS_COUNTRY_CODE_OMN,
            self::ADDRESS_COUNTRY_CODE_PAK,
            self::ADDRESS_COUNTRY_CODE_PAN,
            self::ADDRESS_COUNTRY_CODE_PCN,
            self::ADDRESS_COUNTRY_CODE_PER,
            self::ADDRESS_COUNTRY_CODE_PHL,
            self::ADDRESS_COUNTRY_CODE_PLW,
            self::ADDRESS_COUNTRY_CODE_PNG,
            self::ADDRESS_COUNTRY_CODE_POL,
            self::ADDRESS_COUNTRY_CODE_PRI,
            self::ADDRESS_COUNTRY_CODE_PRK,
            self::ADDRESS_COUNTRY_CODE_PRT,
            self::ADDRESS_COUNTRY_CODE_PRY,
            self::ADDRESS_COUNTRY_CODE_PSE,
            self::ADDRESS_COUNTRY_CODE_PYF,
            self::ADDRESS_COUNTRY_CODE_QAT,
            self::ADDRESS_COUNTRY_CODE_REU,
            self::ADDRESS_COUNTRY_CODE_ROU,
            self::ADDRESS_COUNTRY_CODE_RUS,
            self::ADDRESS_COUNTRY_CODE_RWA,
            self::ADDRESS_COUNTRY_CODE_SAU,
            self::ADDRESS_COUNTRY_CODE_SCG,
            self::ADDRESS_COUNTRY_CODE_SDN,
            self::ADDRESS_COUNTRY_CODE_SEN,
            self::ADDRESS_COUNTRY_CODE_SGP,
            self::ADDRESS_COUNTRY_CODE_SGS,
            self::ADDRESS_COUNTRY_CODE_SHN,
            self::ADDRESS_COUNTRY_CODE_SJM,
            self::ADDRESS_COUNTRY_CODE_SLB,
            self::ADDRESS_COUNTRY_CODE_SLE,
            self::ADDRESS_COUNTRY_CODE_SLV,
            self::ADDRESS_COUNTRY_CODE_SMR,
            self::ADDRESS_COUNTRY_CODE_SOM,
            self::ADDRESS_COUNTRY_CODE_SPM,
            self::ADDRESS_COUNTRY_CODE_SRB,
            self::ADDRESS_COUNTRY_CODE_STP,
            self::ADDRESS_COUNTRY_CODE_SUR,
            self::ADDRESS_COUNTRY_CODE_SVK,
            self::ADDRESS_COUNTRY_CODE_SVN,
            self::ADDRESS_COUNTRY_CODE_SWE,
            self::ADDRESS_COUNTRY_CODE_SWZ,
            self::ADDRESS_COUNTRY_CODE_SXM,
            self::ADDRESS_COUNTRY_CODE_SYC,
            self::ADDRESS_COUNTRY_CODE_SYR,
            self::ADDRESS_COUNTRY_CODE_TCA,
            self::ADDRESS_COUNTRY_CODE_TCD,
            self::ADDRESS_COUNTRY_CODE_TGO,
            self::ADDRESS_COUNTRY_CODE_THA,
            self::ADDRESS_COUNTRY_CODE_TJK,
            self::ADDRESS_COUNTRY_CODE_TKL,
            self::ADDRESS_COUNTRY_CODE_TKM,
            self::ADDRESS_COUNTRY_CODE_TLS,
            self::ADDRESS_COUNTRY_CODE_TON,
            self::ADDRESS_COUNTRY_CODE_TTO,
            self::ADDRESS_COUNTRY_CODE_TUN,
            self::ADDRESS_COUNTRY_CODE_TUR,
            self::ADDRESS_COUNTRY_CODE_TUV,
            self::ADDRESS_COUNTRY_CODE_TWN,
            self::ADDRESS_COUNTRY_CODE_TZA,
            self::ADDRESS_COUNTRY_CODE_UGA,
            self::ADDRESS_COUNTRY_CODE_UKR,
            self::ADDRESS_COUNTRY_CODE_UMI,
            self::ADDRESS_COUNTRY_CODE_URY,
            self::ADDRESS_COUNTRY_CODE_USA,
            self::ADDRESS_COUNTRY_CODE_UZB,
            self::ADDRESS_COUNTRY_CODE_VAT,
            self::ADDRESS_COUNTRY_CODE_VCT,
            self::ADDRESS_COUNTRY_CODE_VEN,
            self::ADDRESS_COUNTRY_CODE_VGB,
            self::ADDRESS_COUNTRY_CODE_VIR,
            self::ADDRESS_COUNTRY_CODE_VNM,
            self::ADDRESS_COUNTRY_CODE_VUT,
            self::ADDRESS_COUNTRY_CODE_WLF,
            self::ADDRESS_COUNTRY_CODE_WSM,
            self::ADDRESS_COUNTRY_CODE_YEM,
            self::ADDRESS_COUNTRY_CODE_ZAF,
            self::ADDRESS_COUNTRY_CODE_ZMB,
            self::ADDRESS_COUNTRY_CODE_ZWE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCorrespondenceLanguageCodeAllowableValues()
    {
        return [
            self::CORRESPONDENCE_LANGUAGE_CODE_DE_DE,
            self::CORRESPONDENCE_LANGUAGE_CODE_EN_UK,
            self::CORRESPONDENCE_LANGUAGE_CODE_NL_NL,
            self::CORRESPONDENCE_LANGUAGE_CODE_SV_SE,
            self::CORRESPONDENCE_LANGUAGE_CODE_FR_FR,
            self::CORRESPONDENCE_LANGUAGE_CODE_IT_IT,
            self::CORRESPONDENCE_LANGUAGE_CODE_ES_ES,
            self::CORRESPONDENCE_LANGUAGE_CODE_PT_PT,
            self::CORRESPONDENCE_LANGUAGE_CODE_CS_CZ,
            self::CORRESPONDENCE_LANGUAGE_CODE_SK_SK,
            self::CORRESPONDENCE_LANGUAGE_CODE_PL_PL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_control_system_name'] = isset($data['access_control_system_name']) ? $data['access_control_system_name'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['contact_title'] = isset($data['contact_title']) ? $data['contact_title'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['contact_person'] = isset($data['contact_person']) ? $data['contact_person'] : null;
        $this->container['address_street'] = isset($data['address_street']) ? $data['address_street'] : null;
        $this->container['address_post_code'] = isset($data['address_post_code']) ? $data['address_post_code'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_country_code'] = isset($data['address_country_code']) ? $data['address_country_code'] : null;
        $this->container['contact_phone_number'] = isset($data['contact_phone_number']) ? $data['contact_phone_number'] : null;
        $this->container['contact_email_address'] = isset($data['contact_email_address']) ? $data['contact_email_address'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['correspondence_language_code'] = isset($data['correspondence_language_code']) ? $data['correspondence_language_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getContactTitleAllowableValues();
        if (!is_null($this->container['contact_title']) && !in_array($this->container['contact_title'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'contact_title', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAddressCountryCodeAllowableValues();
        if (!is_null($this->container['address_country_code']) && !in_array($this->container['address_country_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'address_country_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCorrespondenceLanguageCodeAllowableValues();
        if (!is_null($this->container['correspondence_language_code']) && !in_array($this->container['correspondence_language_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'correspondence_language_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_control_system_name
     *
     * @return string
     */
    public function getAccessControlSystemName()
    {
        return $this->container['access_control_system_name'];
    }

    /**
     * Sets access_control_system_name
     *
     * @param string $access_control_system_name Name of the access control system
     *
     * @return $this
     */
    public function setAccessControlSystemName($access_control_system_name)
    {
        $this->container['access_control_system_name'] = $access_control_system_name;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number Customer number associated with the access control system
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return string
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param string $created_on Date when the customer was created (ISO 8601-format compliant date: yyyy-mm-dd)
     *
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets contact_title
     *
     * @return string
     */
    public function getContactTitle()
    {
        return $this->container['contact_title'];
    }

    /**
     * Sets contact_title
     *
     * @param string $contact_title Title of contact person
     *
     * @return $this
     */
    public function setContactTitle($contact_title)
    {
        $allowedValues = $this->getContactTitleAllowableValues();
        if (!is_null($contact_title) && !in_array($contact_title, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'contact_title', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contact_title'] = $contact_title;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name Name of customer (in case of a company it is the company name, otherwise the name of the private customer)
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return string
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param string $contact_person Contact person of the access control system
     *
     * @return $this
     */
    public function setContactPerson($contact_person)
    {
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets address_street
     *
     * @return string
     */
    public function getAddressStreet()
    {
        return $this->container['address_street'];
    }

    /**
     * Sets address_street
     *
     * @param string $address_street Street as part of the customer's address
     *
     * @return $this
     */
    public function setAddressStreet($address_street)
    {
        $this->container['address_street'] = $address_street;

        return $this;
    }

    /**
     * Gets address_post_code
     *
     * @return string
     */
    public function getAddressPostCode()
    {
        return $this->container['address_post_code'];
    }

    /**
     * Sets address_post_code
     *
     * @param string $address_post_code Postal code as part of the customer's address
     *
     * @return $this
     */
    public function setAddressPostCode($address_post_code)
    {
        $this->container['address_post_code'] = $address_post_code;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string $address_city City as part of the customer's address
     *
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_country_code
     *
     * @return string
     */
    public function getAddressCountryCode()
    {
        return $this->container['address_country_code'];
    }

    /**
     * Sets address_country_code
     *
     * @param string $address_country_code Country code as part of the customer's address (ISO 3166-1 alpha-3 format compliant)
     *
     * @return $this
     */
    public function setAddressCountryCode($address_country_code)
    {
        $allowedValues = $this->getAddressCountryCodeAllowableValues();
        if (!is_null($address_country_code) && !in_array($address_country_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'address_country_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['address_country_code'] = $address_country_code;

        return $this;
    }

    /**
     * Gets contact_phone_number
     *
     * @return string
     */
    public function getContactPhoneNumber()
    {
        return $this->container['contact_phone_number'];
    }

    /**
     * Sets contact_phone_number
     *
     * @param string $contact_phone_number Phone number for contact purpose
     *
     * @return $this
     */
    public function setContactPhoneNumber($contact_phone_number)
    {
        $this->container['contact_phone_number'] = $contact_phone_number;

        return $this;
    }

    /**
     * Gets contact_email_address
     *
     * @return string
     */
    public function getContactEmailAddress()
    {
        return $this->container['contact_email_address'];
    }

    /**
     * Sets contact_email_address
     *
     * @param string $contact_email_address Email address for contact purpose
     *
     * @return $this
     */
    public function setContactEmailAddress($contact_email_address)
    {
        $this->container['contact_email_address'] = $contact_email_address;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax Fax for contact purpose
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets correspondence_language_code
     *
     * @return string
     */
    public function getCorrespondenceLanguageCode()
    {
        return $this->container['correspondence_language_code'];
    }

    /**
     * Sets correspondence_language_code
     *
     * @param string $correspondence_language_code Language code for correspondences (IETF bcp47 format compliant)
     *
     * @return $this
     */
    public function setCorrespondenceLanguageCode($correspondence_language_code)
    {
        $allowedValues = $this->getCorrespondenceLanguageCodeAllowableValues();
        if (!is_null($correspondence_language_code) && !in_array($correspondence_language_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'correspondence_language_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['correspondence_language_code'] = $correspondence_language_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


