<?php
/**
 * LockMaintenanceTask
 *
 * PHP version 5
 *
 * @category Class
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v14.40.2
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Coucounco\Airkey\Swagger\Client\Model;

use \ArrayAccess;
use \Coucounco\Airkey\Swagger\Client\ObjectSerializer;

/**
 * LockMaintenanceTask Class Doc Comment
 *
 * @category Class
 * @description Model that describes a list of maintenance tasks for a specific locking component in the access control system.
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LockMaintenanceTask implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LockMaintenanceTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lock' => '\Coucounco\Airkey\Swagger\Client\Model\SimpleLock',
        'maintenance_task_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lock' => null,
        'maintenance_task_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lock' => 'lock',
        'maintenance_task_list' => 'maintenanceTaskList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lock' => 'setLock',
        'maintenance_task_list' => 'setMaintenanceTaskList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lock' => 'getLock',
        'maintenance_task_list' => 'getMaintenanceTaskList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MAINTENANCE_TASK_LIST_EMPTY_BATTERY = 'EMPTY_BATTERY';
    const MAINTENANCE_TASK_LIST_CHANGE_BATTERY = 'CHANGE_BATTERY';
    const MAINTENANCE_TASK_LIST_BLACKLIST_NOT_SYNCHRONIZED = 'BLACKLIST_NOT_SYNCHRONIZED';
    const MAINTENANCE_TASK_LIST_CLOCK_INVALID = 'CLOCK_INVALID';
    const MAINTENANCE_TASK_LIST_AREAS_NOT_SYNCHRONIZED = 'AREAS_NOT_SYNCHRONIZED';
    const MAINTENANCE_TASK_LIST_TIMEZONES_NOT_SYNCHRONIZED = 'TIMEZONES_NOT_SYNCHRONIZED';
    const MAINTENANCE_TASK_LIST_DELETE_CYLINDER = 'DELETE_CYLINDER';
    const MAINTENANCE_TASK_LIST_DELETE_WALL_READER = 'DELETE_WALL_READER';
    const MAINTENANCE_TASK_LIST_NEW_CYLINDER_FIRMWARE_AVAILABLE = 'NEW_CYLINDER_FIRMWARE_AVAILABLE';
    const MAINTENANCE_TASK_LIST_NEW_WALL_READER_FIRMWARE_AVAILABLE = 'NEW_WALL_READER_FIRMWARE_AVAILABLE';
    const MAINTENANCE_TASK_LIST_CYLINDER_AND_KNOB_REPLACEMENT = 'CYLINDER_AND_KNOB_REPLACEMENT';
    const MAINTENANCE_TASK_LIST_CONTROL_AND_READER_UNIT_REPLACEMENT = 'CONTROL_AND_READER_UNIT_REPLACEMENT';
    const MAINTENANCE_TASK_LIST_CYLINDER_AND_KNOB_REPLACEMENT_WITHOUT_INCOMPLETE = 'CYLINDER_AND_KNOB_REPLACEMENT_WITHOUT_INCOMPLETE';
    const MAINTENANCE_TASK_LIST_CONTROL_AND_READER_UNIT_REPLACEMENT_WITHOUT_INCOMPLETE = 'CONTROL_AND_READER_UNIT_REPLACEMENT_WITHOUT_INCOMPLETE';
    const MAINTENANCE_TASK_LIST_KNOB_REPLACEMENT = 'KNOB_REPLACEMENT';
    const MAINTENANCE_TASK_LIST_READER_UNIT_REPLACEMENT = 'READER_UNIT_REPLACEMENT';
    const MAINTENANCE_TASK_LIST_KNOB_REPLACEMENT_WITHOUT_INCOMPLETE = 'KNOB_REPLACEMENT_WITHOUT_INCOMPLETE';
    const MAINTENANCE_TASK_LIST_READER_UNIT_REPLACEMENT_WITHOUT_INCOMPLETE = 'READER_UNIT_REPLACEMENT_WITHOUT_INCOMPLETE';
    const MAINTENANCE_TASK_LIST_KNOB_INSTALLATION = 'KNOB_INSTALLATION';
    const MAINTENANCE_TASK_LIST_READER_UNIT_INSTALLATION = 'READER_UNIT_INSTALLATION';
    const MAINTENANCE_TASK_LIST_CYLINDER_AND_KNOB_INSTALLATION = 'CYLINDER_AND_KNOB_INSTALLATION';
    const MAINTENANCE_TASK_LIST_CONTROL_AND_READER_UNIT_INSTALLATION = 'CONTROL_AND_READER_UNIT_INSTALLATION';
    const MAINTENANCE_TASK_LIST_WHITELIST_NOT_SYNCHRONIZED = 'WHITELIST_NOT_SYNCHRONIZED';
    const MAINTENANCE_TASK_LIST_CYLINDER_TEST_PENDING = 'CYLINDER_TEST_PENDING';
    const MAINTENANCE_TASK_LIST_WALL_READER_TEST_PENDING = 'WALL_READER_TEST_PENDING';
    const MAINTENANCE_TASK_LIST_REMOVE_DAMAGED_CYLINDER = 'REMOVE_DAMAGED_CYLINDER';
    const MAINTENANCE_TASK_LIST_REMOVE_DAMAGED_WALL_READER = 'REMOVE_DAMAGED_WALL_READER';
    const MAINTENANCE_TASK_LIST_UNBLOCKING_DURATION_NOT_SYNCHRONIZED = 'UNBLOCKING_DURATION_NOT_SYNCHRONIZED';
    const MAINTENANCE_TASK_LIST_PERMANENT_OPENING_SETTINGS_NOT_SYNCHRONIZED = 'PERMANENT_OPENING_SETTINGS_NOT_SYNCHRONIZED';
    const MAINTENANCE_TASK_LIST_HOLIDAY_CALENDAR_NOT_SYNCHRONIZED = 'HOLIDAY_CALENDAR_NOT_SYNCHRONIZED';
    const MAINTENANCE_TASK_LIST_UNKNOWN = 'UNKNOWN';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaintenanceTaskListAllowableValues()
    {
        return [
            self::MAINTENANCE_TASK_LIST_EMPTY_BATTERY,
            self::MAINTENANCE_TASK_LIST_CHANGE_BATTERY,
            self::MAINTENANCE_TASK_LIST_BLACKLIST_NOT_SYNCHRONIZED,
            self::MAINTENANCE_TASK_LIST_CLOCK_INVALID,
            self::MAINTENANCE_TASK_LIST_AREAS_NOT_SYNCHRONIZED,
            self::MAINTENANCE_TASK_LIST_TIMEZONES_NOT_SYNCHRONIZED,
            self::MAINTENANCE_TASK_LIST_DELETE_CYLINDER,
            self::MAINTENANCE_TASK_LIST_DELETE_WALL_READER,
            self::MAINTENANCE_TASK_LIST_NEW_CYLINDER_FIRMWARE_AVAILABLE,
            self::MAINTENANCE_TASK_LIST_NEW_WALL_READER_FIRMWARE_AVAILABLE,
            self::MAINTENANCE_TASK_LIST_CYLINDER_AND_KNOB_REPLACEMENT,
            self::MAINTENANCE_TASK_LIST_CONTROL_AND_READER_UNIT_REPLACEMENT,
            self::MAINTENANCE_TASK_LIST_CYLINDER_AND_KNOB_REPLACEMENT_WITHOUT_INCOMPLETE,
            self::MAINTENANCE_TASK_LIST_CONTROL_AND_READER_UNIT_REPLACEMENT_WITHOUT_INCOMPLETE,
            self::MAINTENANCE_TASK_LIST_KNOB_REPLACEMENT,
            self::MAINTENANCE_TASK_LIST_READER_UNIT_REPLACEMENT,
            self::MAINTENANCE_TASK_LIST_KNOB_REPLACEMENT_WITHOUT_INCOMPLETE,
            self::MAINTENANCE_TASK_LIST_READER_UNIT_REPLACEMENT_WITHOUT_INCOMPLETE,
            self::MAINTENANCE_TASK_LIST_KNOB_INSTALLATION,
            self::MAINTENANCE_TASK_LIST_READER_UNIT_INSTALLATION,
            self::MAINTENANCE_TASK_LIST_CYLINDER_AND_KNOB_INSTALLATION,
            self::MAINTENANCE_TASK_LIST_CONTROL_AND_READER_UNIT_INSTALLATION,
            self::MAINTENANCE_TASK_LIST_WHITELIST_NOT_SYNCHRONIZED,
            self::MAINTENANCE_TASK_LIST_CYLINDER_TEST_PENDING,
            self::MAINTENANCE_TASK_LIST_WALL_READER_TEST_PENDING,
            self::MAINTENANCE_TASK_LIST_REMOVE_DAMAGED_CYLINDER,
            self::MAINTENANCE_TASK_LIST_REMOVE_DAMAGED_WALL_READER,
            self::MAINTENANCE_TASK_LIST_UNBLOCKING_DURATION_NOT_SYNCHRONIZED,
            self::MAINTENANCE_TASK_LIST_PERMANENT_OPENING_SETTINGS_NOT_SYNCHRONIZED,
            self::MAINTENANCE_TASK_LIST_HOLIDAY_CALENDAR_NOT_SYNCHRONIZED,
            self::MAINTENANCE_TASK_LIST_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lock'] = isset($data['lock']) ? $data['lock'] : null;
        $this->container['maintenance_task_list'] = isset($data['maintenance_task_list']) ? $data['maintenance_task_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lock
     *
     * @return \Coucounco\Airkey\Swagger\Client\Model\SimpleLock
     */
    public function getLock()
    {
        return $this->container['lock'];
    }

    /**
     * Sets lock
     *
     * @param \Coucounco\Airkey\Swagger\Client\Model\SimpleLock $lock Locking component with which the list of maintenance tasks is associated
     *
     * @return $this
     */
    public function setLock($lock)
    {
        $this->container['lock'] = $lock;

        return $this;
    }

    /**
     * Gets maintenance_task_list
     *
     * @return string[]
     */
    public function getMaintenanceTaskList()
    {
        return $this->container['maintenance_task_list'];
    }

    /**
     * Sets maintenance_task_list
     *
     * @param string[] $maintenance_task_list List of different available maintenance tasks
     *
     * @return $this
     */
    public function setMaintenanceTaskList($maintenance_task_list)
    {
        $allowedValues = $this->getMaintenanceTaskListAllowableValues();
        if (!is_null($maintenance_task_list) && array_diff($maintenance_task_list, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'maintenance_task_list', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['maintenance_task_list'] = $maintenance_task_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


