<?php
/**
 * SharedLock
 *
 * PHP version 5
 *
 * @category Class
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v18.0.4
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Coucounco\Airkey\Swagger\Client\Model;

use \ArrayAccess;
use \Coucounco\Airkey\Swagger\Client\ObjectSerializer;

/**
 * SharedLock Class Doc Comment
 *
 * @category Class
 * @description Model used for add-shared-lock request.
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SharedLock implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SharedLock';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sharing_code' => 'string',
        'anonymize_data_in_owner_protocol' => 'bool',
        'alternative_door_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sharing_code' => null,
        'anonymize_data_in_owner_protocol' => null,
        'alternative_door_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sharing_code' => 'sharingCode',
        'anonymize_data_in_owner_protocol' => 'anonymizeDataInOwnerProtocol',
        'alternative_door_name' => 'alternativeDoorName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sharing_code' => 'setSharingCode',
        'anonymize_data_in_owner_protocol' => 'setAnonymizeDataInOwnerProtocol',
        'alternative_door_name' => 'setAlternativeDoorName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sharing_code' => 'getSharingCode',
        'anonymize_data_in_owner_protocol' => 'getAnonymizeDataInOwnerProtocol',
        'alternative_door_name' => 'getAlternativeDoorName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sharing_code'] = isset($data['sharing_code']) ? $data['sharing_code'] : null;
        $this->container['anonymize_data_in_owner_protocol'] = isset($data['anonymize_data_in_owner_protocol']) ? $data['anonymize_data_in_owner_protocol'] : null;
        $this->container['alternative_door_name'] = isset($data['alternative_door_name']) ? $data['alternative_door_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sharing_code'] === null) {
            $invalidProperties[] = "'sharing_code' can't be null";
        }
        if ($this->container['anonymize_data_in_owner_protocol'] === null) {
            $invalidProperties[] = "'anonymize_data_in_owner_protocol' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sharing_code
     *
     * @return string
     */
    public function getSharingCode()
    {
        return $this->container['sharing_code'];
    }

    /**
     * Sets sharing_code
     *
     * @param string $sharing_code Sharing code generated in another access control system
     *
     * @return $this
     */
    public function setSharingCode($sharing_code)
    {
        $this->container['sharing_code'] = $sharing_code;

        return $this;
    }

    /**
     * Gets anonymize_data_in_owner_protocol
     *
     * @return bool
     */
    public function getAnonymizeDataInOwnerProtocol()
    {
        return $this->container['anonymize_data_in_owner_protocol'];
    }

    /**
     * Sets anonymize_data_in_owner_protocol
     *
     * @param bool $anonymize_data_in_owner_protocol Determines whether lock owner's lock protocol entries should be anonymized. Anonymization removes references to used media and associated persons. Only affects entries that include your media, not the lock owner's media.
     *
     * @return $this
     */
    public function setAnonymizeDataInOwnerProtocol($anonymize_data_in_owner_protocol)
    {
        $this->container['anonymize_data_in_owner_protocol'] = $anonymize_data_in_owner_protocol;

        return $this;
    }

    /**
     * Gets alternative_door_name
     *
     * @return string
     */
    public function getAlternativeDoorName()
    {
        return $this->container['alternative_door_name'];
    }

    /**
     * Sets alternative_door_name
     *
     * @param string $alternative_door_name Alternative name of the door in your access control system (will not be used in the owner's access control system)
     *
     * @return $this
     */
    public function setAlternativeDoorName($alternative_door_name)
    {
        $this->container['alternative_door_name'] = $alternative_door_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


