<?php
/**
 * Phone
 *
 * PHP version 5
 *
 * @category Class
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v18.0.4
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Coucounco\Airkey\Swagger\Client\Model;
use \Coucounco\Airkey\Swagger\Client\ObjectSerializer;

/**
 * Phone Class Doc Comment
 *
 * @category Class
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Phone extends Medium 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Phone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'medium_type' => 'string',
        'app_type' => 'string',
        'platform_version' => 'string',
        'phone_settings' => '\Coucounco\Airkey\Swagger\Client\Model\PhoneSettings',
        'pairing_code' => 'string',
        'pairing_code_valid_until' => 'string',
        'phone_number' => 'string',
        'sent_key_on' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'medium_type' => null,
        'app_type' => null,
        'platform_version' => null,
        'phone_settings' => null,
        'pairing_code' => null,
        'pairing_code_valid_until' => null,
        'phone_number' => null,
        'sent_key_on' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'medium_type' => 'mediumType',
        'app_type' => 'appType',
        'platform_version' => 'platformVersion',
        'phone_settings' => 'phoneSettings',
        'pairing_code' => 'pairingCode',
        'pairing_code_valid_until' => 'pairingCodeValidUntil',
        'phone_number' => 'phoneNumber',
        'sent_key_on' => 'sentKeyOn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'medium_type' => 'setMediumType',
        'app_type' => 'setAppType',
        'platform_version' => 'setPlatformVersion',
        'phone_settings' => 'setPhoneSettings',
        'pairing_code' => 'setPairingCode',
        'pairing_code_valid_until' => 'setPairingCodeValidUntil',
        'phone_number' => 'setPhoneNumber',
        'sent_key_on' => 'setSentKeyOn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'medium_type' => 'getMediumType',
        'app_type' => 'getAppType',
        'platform_version' => 'getPlatformVersion',
        'phone_settings' => 'getPhoneSettings',
        'pairing_code' => 'getPairingCode',
        'pairing_code_valid_until' => 'getPairingCodeValidUntil',
        'phone_number' => 'getPhoneNumber',
        'sent_key_on' => 'getSentKeyOn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MEDIUM_TYPE_PHONE = 'PHONE';
    const APP_TYPE_ANDROID = 'ANDROID';
    const APP_TYPE_BLACKBERRY = 'BLACKBERRY';
    const APP_TYPE_IPHONE = 'IPHONE';
    const APP_TYPE_WINDOWS_PHONE = 'WINDOWS_PHONE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMediumTypeAllowableValues()
    {
        return [
            self::MEDIUM_TYPE_PHONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAppTypeAllowableValues()
    {
        return [
            self::APP_TYPE_ANDROID,
            self::APP_TYPE_BLACKBERRY,
            self::APP_TYPE_IPHONE,
            self::APP_TYPE_WINDOWS_PHONE,
        ];
    }
    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['medium_type'] = isset($data['medium_type']) ? $data['medium_type'] : null;
        $this->container['app_type'] = isset($data['app_type']) ? $data['app_type'] : null;
        $this->container['platform_version'] = isset($data['platform_version']) ? $data['platform_version'] : null;
        $this->container['phone_settings'] = isset($data['phone_settings']) ? $data['phone_settings'] : null;
        $this->container['pairing_code'] = isset($data['pairing_code']) ? $data['pairing_code'] : null;
        $this->container['pairing_code_valid_until'] = isset($data['pairing_code_valid_until']) ? $data['pairing_code_valid_until'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['sent_key_on'] = isset($data['sent_key_on']) ? $data['sent_key_on'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getMediumTypeAllowableValues();
        if (!is_null($this->container['medium_type']) && !in_array($this->container['medium_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'medium_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAppTypeAllowableValues();
        if (!is_null($this->container['app_type']) && !in_array($this->container['app_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'app_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['app_type']) && (mb_strlen($this->container['app_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'app_type', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['app_type']) && (mb_strlen($this->container['app_type']) < 0)) {
            $invalidProperties[] = "invalid value for 'app_type', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['platform_version']) && (mb_strlen($this->container['platform_version']) > 50)) {
            $invalidProperties[] = "invalid value for 'platform_version', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['platform_version']) && (mb_strlen($this->container['platform_version']) < 0)) {
            $invalidProperties[] = "invalid value for 'platform_version', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['phone_settings'] === null) {
            $invalidProperties[] = "'phone_settings' can't be null";
        }
        if (!is_null($this->container['pairing_code']) && (mb_strlen($this->container['pairing_code']) > 12)) {
            $invalidProperties[] = "invalid value for 'pairing_code', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['pairing_code']) && (mb_strlen($this->container['pairing_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'pairing_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['pairing_code_valid_until']) && (mb_strlen($this->container['pairing_code_valid_until']) > 24)) {
            $invalidProperties[] = "invalid value for 'pairing_code_valid_until', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['pairing_code_valid_until']) && (mb_strlen($this->container['pairing_code_valid_until']) < 0)) {
            $invalidProperties[] = "invalid value for 'pairing_code_valid_until', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['phone_number'] === null) {
            $invalidProperties[] = "'phone_number' can't be null";
        }
        if ((mb_strlen($this->container['phone_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['phone_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[\\+]([0-9 ]){1,49}$/", $this->container['phone_number'])) {
            $invalidProperties[] = "invalid value for 'phone_number', must be conform to the pattern /^[\\+]([0-9 ]){1,49}$/.";
        }

        if (!is_null($this->container['sent_key_on']) && (mb_strlen($this->container['sent_key_on']) > 24)) {
            $invalidProperties[] = "invalid value for 'sent_key_on', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['sent_key_on']) && (mb_strlen($this->container['sent_key_on']) < 0)) {
            $invalidProperties[] = "invalid value for 'sent_key_on', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets medium_type
     *
     * @return string
     */
    public function getMediumType()
    {
        return $this->container['medium_type'];
    }

    /**
     * Sets medium_type
     *
     * @param string $medium_type Phone type of the medium
     *
     * @return $this
     */
    public function setMediumType($medium_type)
    {
        $allowedValues = $this->getMediumTypeAllowableValues();
        if (!is_null($medium_type) && !in_array($medium_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'medium_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['medium_type'] = $medium_type;

        return $this;
    }

    /**
     * Gets app_type
     *
     * @return string
     */
    public function getAppType()
    {
        return $this->container['app_type'];
    }

    /**
     * Sets app_type
     *
     * @param string $app_type Type of the used app
     *
     * @return $this
     */
    public function setAppType($app_type)
    {
        $allowedValues = $this->getAppTypeAllowableValues();
        if (!is_null($app_type) && !in_array($app_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'app_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($app_type) && (mb_strlen($app_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $app_type when calling Phone., must be smaller than or equal to 50.');
        }
        if (!is_null($app_type) && (mb_strlen($app_type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $app_type when calling Phone., must be bigger than or equal to 0.');
        }

        $this->container['app_type'] = $app_type;

        return $this;
    }

    /**
     * Gets platform_version
     *
     * @return string
     */
    public function getPlatformVersion()
    {
        return $this->container['platform_version'];
    }

    /**
     * Sets platform_version
     *
     * @param string $platform_version Current version of the platform
     *
     * @return $this
     */
    public function setPlatformVersion($platform_version)
    {
        if (!is_null($platform_version) && (mb_strlen($platform_version) > 50)) {
            throw new \InvalidArgumentException('invalid length for $platform_version when calling Phone., must be smaller than or equal to 50.');
        }
        if (!is_null($platform_version) && (mb_strlen($platform_version) < 0)) {
            throw new \InvalidArgumentException('invalid length for $platform_version when calling Phone., must be bigger than or equal to 0.');
        }

        $this->container['platform_version'] = $platform_version;

        return $this;
    }

    /**
     * Gets phone_settings
     *
     * @return \Coucounco\Airkey\Swagger\Client\Model\PhoneSettings
     */
    public function getPhoneSettings()
    {
        return $this->container['phone_settings'];
    }

    /**
     * Sets phone_settings
     *
     * @param \Coucounco\Airkey\Swagger\Client\Model\PhoneSettings $phone_settings Settings of the phone
     *
     * @return $this
     */
    public function setPhoneSettings($phone_settings)
    {
        $this->container['phone_settings'] = $phone_settings;

        return $this;
    }

    /**
     * Gets pairing_code
     *
     * @return string
     */
    public function getPairingCode()
    {
        return $this->container['pairing_code'];
    }

    /**
     * Sets pairing_code
     *
     * @param string $pairing_code Generated pairing code
     *
     * @return $this
     */
    public function setPairingCode($pairing_code)
    {
        if (!is_null($pairing_code) && (mb_strlen($pairing_code) > 12)) {
            throw new \InvalidArgumentException('invalid length for $pairing_code when calling Phone., must be smaller than or equal to 12.');
        }
        if (!is_null($pairing_code) && (mb_strlen($pairing_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $pairing_code when calling Phone., must be bigger than or equal to 0.');
        }

        $this->container['pairing_code'] = $pairing_code;

        return $this;
    }

    /**
     * Gets pairing_code_valid_until
     *
     * @return string
     */
    public function getPairingCodeValidUntil()
    {
        return $this->container['pairing_code_valid_until'];
    }

    /**
     * Sets pairing_code_valid_until
     *
     * @param string $pairing_code_valid_until Timestamp until when the pairing code is valid (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)
     *
     * @return $this
     */
    public function setPairingCodeValidUntil($pairing_code_valid_until)
    {
        if (!is_null($pairing_code_valid_until) && (mb_strlen($pairing_code_valid_until) > 24)) {
            throw new \InvalidArgumentException('invalid length for $pairing_code_valid_until when calling Phone., must be smaller than or equal to 24.');
        }
        if (!is_null($pairing_code_valid_until) && (mb_strlen($pairing_code_valid_until) < 0)) {
            throw new \InvalidArgumentException('invalid length for $pairing_code_valid_until when calling Phone., must be bigger than or equal to 0.');
        }

        $this->container['pairing_code_valid_until'] = $pairing_code_valid_until;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Phone number of the phone starting with '+' followed by 1-49 digits (incl. possible spaces), e.g. +436641234567
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        if ((mb_strlen($phone_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling Phone., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($phone_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling Phone., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[\\+]([0-9 ]){1,49}$/", $phone_number))) {
            throw new \InvalidArgumentException("invalid value for $phone_number when calling Phone., must conform to the pattern /^[\\+]([0-9 ]){1,49}$/.");
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets sent_key_on
     *
     * @return string
     */
    public function getSentKeyOn()
    {
        return $this->container['sent_key_on'];
    }

    /**
     * Sets sent_key_on
     *
     * @param string $sent_key_on Timestamp when the pairing code was sent to the phone (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)
     *
     * @return $this
     */
    public function setSentKeyOn($sent_key_on)
    {
        if (!is_null($sent_key_on) && (mb_strlen($sent_key_on) > 24)) {
            throw new \InvalidArgumentException('invalid length for $sent_key_on when calling Phone., must be smaller than or equal to 24.');
        }
        if (!is_null($sent_key_on) && (mb_strlen($sent_key_on) < 0)) {
            throw new \InvalidArgumentException('invalid length for $sent_key_on when calling Phone., must be bigger than or equal to 0.');
        }

        $this->container['sent_key_on'] = $sent_key_on;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


