<?php
/**
 * Settings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v18.0.4
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Coucounco\Airkey\Swagger\Client\Model;

use \ArrayAccess;
use \Coucounco\Airkey\Swagger\Client\ObjectSerializer;

/**
 * Settings Class Doc Comment
 *
 * @category Class
 * @description Model that describes access control system settings of a customer.
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Settings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'unlock_from_lock_screen_enabled' => 'bool',
        'update_app_after_unlocking' => 'bool',
        'use_default_send_a_key_sms_text' => 'bool',
        'use_default_send_a_key_mail_text' => 'bool',
        'custom_send_a_key_sms_text' => 'string',
        'custom_send_a_key_mail_text' => 'string',
        'automatic_smartphone_replacement_approval_active' => 'bool',
        'two_factor_active' => 'bool',
        'four_eyes_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'unlock_from_lock_screen_enabled' => null,
        'update_app_after_unlocking' => null,
        'use_default_send_a_key_sms_text' => null,
        'use_default_send_a_key_mail_text' => null,
        'custom_send_a_key_sms_text' => null,
        'custom_send_a_key_mail_text' => null,
        'automatic_smartphone_replacement_approval_active' => null,
        'two_factor_active' => null,
        'four_eyes_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unlock_from_lock_screen_enabled' => 'unlockFromLockScreenEnabled',
        'update_app_after_unlocking' => 'updateAppAfterUnlocking',
        'use_default_send_a_key_sms_text' => 'useDefaultSendAKeySmsText',
        'use_default_send_a_key_mail_text' => 'useDefaultSendAKeyMailText',
        'custom_send_a_key_sms_text' => 'customSendAKeySmsText',
        'custom_send_a_key_mail_text' => 'customSendAKeyMailText',
        'automatic_smartphone_replacement_approval_active' => 'automaticSmartphoneReplacementApprovalActive',
        'two_factor_active' => 'twoFactorActive',
        'four_eyes_enabled' => 'fourEyesEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unlock_from_lock_screen_enabled' => 'setUnlockFromLockScreenEnabled',
        'update_app_after_unlocking' => 'setUpdateAppAfterUnlocking',
        'use_default_send_a_key_sms_text' => 'setUseDefaultSendAKeySmsText',
        'use_default_send_a_key_mail_text' => 'setUseDefaultSendAKeyMailText',
        'custom_send_a_key_sms_text' => 'setCustomSendAKeySmsText',
        'custom_send_a_key_mail_text' => 'setCustomSendAKeyMailText',
        'automatic_smartphone_replacement_approval_active' => 'setAutomaticSmartphoneReplacementApprovalActive',
        'two_factor_active' => 'setTwoFactorActive',
        'four_eyes_enabled' => 'setFourEyesEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unlock_from_lock_screen_enabled' => 'getUnlockFromLockScreenEnabled',
        'update_app_after_unlocking' => 'getUpdateAppAfterUnlocking',
        'use_default_send_a_key_sms_text' => 'getUseDefaultSendAKeySmsText',
        'use_default_send_a_key_mail_text' => 'getUseDefaultSendAKeyMailText',
        'custom_send_a_key_sms_text' => 'getCustomSendAKeySmsText',
        'custom_send_a_key_mail_text' => 'getCustomSendAKeyMailText',
        'automatic_smartphone_replacement_approval_active' => 'getAutomaticSmartphoneReplacementApprovalActive',
        'two_factor_active' => 'getTwoFactorActive',
        'four_eyes_enabled' => 'getFourEyesEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unlock_from_lock_screen_enabled'] = isset($data['unlock_from_lock_screen_enabled']) ? $data['unlock_from_lock_screen_enabled'] : null;
        $this->container['update_app_after_unlocking'] = isset($data['update_app_after_unlocking']) ? $data['update_app_after_unlocking'] : null;
        $this->container['use_default_send_a_key_sms_text'] = isset($data['use_default_send_a_key_sms_text']) ? $data['use_default_send_a_key_sms_text'] : null;
        $this->container['use_default_send_a_key_mail_text'] = isset($data['use_default_send_a_key_mail_text']) ? $data['use_default_send_a_key_mail_text'] : null;
        $this->container['custom_send_a_key_sms_text'] = isset($data['custom_send_a_key_sms_text']) ? $data['custom_send_a_key_sms_text'] : null;
        $this->container['custom_send_a_key_mail_text'] = isset($data['custom_send_a_key_mail_text']) ? $data['custom_send_a_key_mail_text'] : null;
        $this->container['automatic_smartphone_replacement_approval_active'] = isset($data['automatic_smartphone_replacement_approval_active']) ? $data['automatic_smartphone_replacement_approval_active'] : null;
        $this->container['two_factor_active'] = isset($data['two_factor_active']) ? $data['two_factor_active'] : null;
        $this->container['four_eyes_enabled'] = isset($data['four_eyes_enabled']) ? $data['four_eyes_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unlock_from_lock_screen_enabled
     *
     * @return bool
     */
    public function getUnlockFromLockScreenEnabled()
    {
        return $this->container['unlock_from_lock_screen_enabled'];
    }

    /**
     * Sets unlock_from_lock_screen_enabled
     *
     * @param bool $unlock_from_lock_screen_enabled Enables the opening of locking components via Bluetooth from the lock screen WITHOUT unlocking the smartphone
     *
     * @return $this
     */
    public function setUnlockFromLockScreenEnabled($unlock_from_lock_screen_enabled)
    {
        $this->container['unlock_from_lock_screen_enabled'] = $unlock_from_lock_screen_enabled;

        return $this;
    }

    /**
     * Gets update_app_after_unlocking
     *
     * @return bool
     */
    public function getUpdateAppAfterUnlocking()
    {
        return $this->container['update_app_after_unlocking'];
    }

    /**
     * Sets update_app_after_unlocking
     *
     * @param bool $update_app_after_unlocking Update AirKey app data after each access
     *
     * @return $this
     */
    public function setUpdateAppAfterUnlocking($update_app_after_unlocking)
    {
        $this->container['update_app_after_unlocking'] = $update_app_after_unlocking;

        return $this;
    }

    /**
     * Gets use_default_send_a_key_sms_text
     *
     * @return bool
     */
    public function getUseDefaultSendAKeySmsText()
    {
        return $this->container['use_default_send_a_key_sms_text'];
    }

    /**
     * Sets use_default_send_a_key_sms_text
     *
     * @param bool $use_default_send_a_key_sms_text Use default text for the \"Send a Key\" SMS
     *
     * @return $this
     */
    public function setUseDefaultSendAKeySmsText($use_default_send_a_key_sms_text)
    {
        $this->container['use_default_send_a_key_sms_text'] = $use_default_send_a_key_sms_text;

        return $this;
    }

    /**
     * Gets use_default_send_a_key_mail_text
     *
     * @return bool
     */
    public function getUseDefaultSendAKeyMailText()
    {
        return $this->container['use_default_send_a_key_mail_text'];
    }

    /**
     * Sets use_default_send_a_key_mail_text
     *
     * @param bool $use_default_send_a_key_mail_text Use default text for the \"Send a Key\" E-Mail
     *
     * @return $this
     */
    public function setUseDefaultSendAKeyMailText($use_default_send_a_key_mail_text)
    {
        $this->container['use_default_send_a_key_mail_text'] = $use_default_send_a_key_mail_text;

        return $this;
    }

    /**
     * Gets custom_send_a_key_sms_text
     *
     * @return string
     */
    public function getCustomSendAKeySmsText()
    {
        return $this->container['custom_send_a_key_sms_text'];
    }

    /**
     * Sets custom_send_a_key_sms_text
     *
     * @param string $custom_send_a_key_sms_text Custom \"Send a Key\" SMS text
     *
     * @return $this
     */
    public function setCustomSendAKeySmsText($custom_send_a_key_sms_text)
    {
        $this->container['custom_send_a_key_sms_text'] = $custom_send_a_key_sms_text;

        return $this;
    }

    /**
     * Gets custom_send_a_key_mail_text
     *
     * @return string
     */
    public function getCustomSendAKeyMailText()
    {
        return $this->container['custom_send_a_key_mail_text'];
    }

    /**
     * Sets custom_send_a_key_mail_text
     *
     * @param string $custom_send_a_key_mail_text Custom \"Send a Key\" E-Mail text
     *
     * @return $this
     */
    public function setCustomSendAKeyMailText($custom_send_a_key_mail_text)
    {
        $this->container['custom_send_a_key_mail_text'] = $custom_send_a_key_mail_text;

        return $this;
    }

    /**
     * Gets automatic_smartphone_replacement_approval_active
     *
     * @return bool
     */
    public function getAutomaticSmartphoneReplacementApprovalActive()
    {
        return $this->container['automatic_smartphone_replacement_approval_active'];
    }

    /**
     * Sets automatic_smartphone_replacement_approval_active
     *
     * @param bool $automatic_smartphone_replacement_approval_active Automatic confirmation of people's requests for smartphone replacement
     *
     * @return $this
     */
    public function setAutomaticSmartphoneReplacementApprovalActive($automatic_smartphone_replacement_approval_active)
    {
        $this->container['automatic_smartphone_replacement_approval_active'] = $automatic_smartphone_replacement_approval_active;

        return $this;
    }

    /**
     * Gets two_factor_active
     *
     * @return bool
     */
    public function getTwoFactorActive()
    {
        return $this->container['two_factor_active'];
    }

    /**
     * Sets two_factor_active
     *
     * @param bool $two_factor_active Two-factor authentication (2FA) active
     *
     * @return $this
     */
    public function setTwoFactorActive($two_factor_active)
    {
        $this->container['two_factor_active'] = $two_factor_active;

        return $this;
    }

    /**
     * Gets four_eyes_enabled
     *
     * @return bool
     */
    public function getFourEyesEnabled()
    {
        return $this->container['four_eyes_enabled'];
    }

    /**
     * Sets four_eyes_enabled
     *
     * @param bool $four_eyes_enabled Four-eyes principle for event log viewing active
     *
     * @return $this
     */
    public function setFourEyesEnabled($four_eyes_enabled)
    {
        $this->container['four_eyes_enabled'] = $four_eyes_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


