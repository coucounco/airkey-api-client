<?php
/**
 * LocksApi
 * PHP version 5
 *
 * @category Class
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v18.0.4
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Coucounco\Airkey\Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Coucounco\Airkey\Swagger\Client\ApiException;
use Coucounco\Airkey\Swagger\Client\Configuration;
use Coucounco\Airkey\Swagger\Client\HeaderSelector;
use Coucounco\Airkey\Swagger\Client\ObjectSerializer;

/**
 * LocksApi Class Doc Comment
 *
 * @category Class
 * @package  Coucounco\Airkey\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LocksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addSharedLock
     *
     * Redeems a sharing code to add a lock from another access control system.
     *
     * @param  \Coucounco\Airkey\Swagger\Client\Model\SharedLock $body Data to redeem sharing code (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\Lock
     */
    public function addSharedLock($body)
    {
        list($response) = $this->addSharedLockWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addSharedLockWithHttpInfo
     *
     * Redeems a sharing code to add a lock from another access control system.
     *
     * @param  \Coucounco\Airkey\Swagger\Client\Model\SharedLock $body Data to redeem sharing code (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\Lock, HTTP status code, HTTP response headers (array of strings)
     */
    public function addSharedLockWithHttpInfo($body)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\Lock';
        $request = $this->addSharedLockRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\Lock',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addSharedLockAsync
     *
     * Redeems a sharing code to add a lock from another access control system.
     *
     * @param  \Coucounco\Airkey\Swagger\Client\Model\SharedLock $body Data to redeem sharing code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSharedLockAsync($body)
    {
        return $this->addSharedLockAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addSharedLockAsyncWithHttpInfo
     *
     * Redeems a sharing code to add a lock from another access control system.
     *
     * @param  \Coucounco\Airkey\Swagger\Client\Model\SharedLock $body Data to redeem sharing code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSharedLockAsyncWithHttpInfo($body)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\Lock';
        $request = $this->addSharedLockRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addSharedLock'
     *
     * @param  \Coucounco\Airkey\Swagger\Client\Model\SharedLock $body Data to redeem sharing code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addSharedLockRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addSharedLock'
            );
        }

        $resourcePath = '/v1/locks/add-shared-lock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignAreas
     *
     * Assigns areas to the specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int[] $body A list of areaIds (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\AssignedArea[]
     */
    public function assignAreas($lock_id, $body)
    {
        list($response) = $this->assignAreasWithHttpInfo($lock_id, $body);
        return $response;
    }

    /**
     * Operation assignAreasWithHttpInfo
     *
     * Assigns areas to the specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int[] $body A list of areaIds (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\AssignedArea[], HTTP status code, HTTP response headers (array of strings)
     */
    public function assignAreasWithHttpInfo($lock_id, $body)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\AssignedArea[]';
        $request = $this->assignAreasRequest($lock_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\AssignedArea[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignAreasAsync
     *
     * Assigns areas to the specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int[] $body A list of areaIds (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignAreasAsync($lock_id, $body)
    {
        return $this->assignAreasAsyncWithHttpInfo($lock_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignAreasAsyncWithHttpInfo
     *
     * Assigns areas to the specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int[] $body A list of areaIds (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignAreasAsyncWithHttpInfo($lock_id, $body)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\AssignedArea[]';
        $request = $this->assignAreasRequest($lock_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignAreas'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int[] $body A list of areaIds (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function assignAreasRequest($lock_id, $body)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling assignAreas'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling assignAreas'
            );
        }

        $resourcePath = '/v1/locks/{lockId}/settings/assigned-areas/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSharingCode
     *
     * Creates sharing code for a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\SharingCode
     */
    public function createSharingCode($lock_id)
    {
        list($response) = $this->createSharingCodeWithHttpInfo($lock_id);
        return $response;
    }

    /**
     * Operation createSharingCodeWithHttpInfo
     *
     * Creates sharing code for a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\SharingCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSharingCodeWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\SharingCode';
        $request = $this->createSharingCodeRequest($lock_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\SharingCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSharingCodeAsync
     *
     * Creates sharing code for a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSharingCodeAsync($lock_id)
    {
        return $this->createSharingCodeAsyncWithHttpInfo($lock_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSharingCodeAsyncWithHttpInfo
     *
     * Creates sharing code for a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSharingCodeAsyncWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\SharingCode';
        $request = $this->createSharingCodeRequest($lock_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSharingCode'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSharingCodeRequest($lock_id)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling createSharingCode'
            );
        }

        $resourcePath = '/v1/locks/{lockId}/settings/sharing-codes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSharingCode
     *
     * Removes sharing code from the specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int $sharing_code_id Unique identifier of the sharing code (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function deleteSharingCode($lock_id, $sharing_code_id)
    {
        list($response) = $this->deleteSharingCodeWithHttpInfo($lock_id, $sharing_code_id);
        return $response;
    }

    /**
     * Operation deleteSharingCodeWithHttpInfo
     *
     * Removes sharing code from the specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int $sharing_code_id Unique identifier of the sharing code (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSharingCodeWithHttpInfo($lock_id, $sharing_code_id)
    {
        $returnType = 'int';
        $request = $this->deleteSharingCodeRequest($lock_id, $sharing_code_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSharingCodeAsync
     *
     * Removes sharing code from the specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int $sharing_code_id Unique identifier of the sharing code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSharingCodeAsync($lock_id, $sharing_code_id)
    {
        return $this->deleteSharingCodeAsyncWithHttpInfo($lock_id, $sharing_code_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSharingCodeAsyncWithHttpInfo
     *
     * Removes sharing code from the specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int $sharing_code_id Unique identifier of the sharing code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSharingCodeAsyncWithHttpInfo($lock_id, $sharing_code_id)
    {
        $returnType = 'int';
        $request = $this->deleteSharingCodeRequest($lock_id, $sharing_code_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSharingCode'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int $sharing_code_id Unique identifier of the sharing code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSharingCodeRequest($lock_id, $sharing_code_id)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling deleteSharingCode'
            );
        }
        // verify the required parameter 'sharing_code_id' is set
        if ($sharing_code_id === null || (is_array($sharing_code_id) && count($sharing_code_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sharing_code_id when calling deleteSharingCode'
            );
        }

        $resourcePath = '/v1/locks/{lockId}/settings/sharing-codes/{sharingCodeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }
        // path params
        if ($sharing_code_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sharingCodeId' . '}',
                ObjectSerializer::toPathValue($sharing_code_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getActiveShares
     *
     * Returns a list of other access control systems your lock has been shared with.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\ActiveShare[]
     */
    public function getActiveShares($lock_id)
    {
        list($response) = $this->getActiveSharesWithHttpInfo($lock_id);
        return $response;
    }

    /**
     * Operation getActiveSharesWithHttpInfo
     *
     * Returns a list of other access control systems your lock has been shared with.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\ActiveShare[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getActiveSharesWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\ActiveShare[]';
        $request = $this->getActiveSharesRequest($lock_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\ActiveShare[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getActiveSharesAsync
     *
     * Returns a list of other access control systems your lock has been shared with.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActiveSharesAsync($lock_id)
    {
        return $this->getActiveSharesAsyncWithHttpInfo($lock_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getActiveSharesAsyncWithHttpInfo
     *
     * Returns a list of other access control systems your lock has been shared with.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActiveSharesAsyncWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\ActiveShare[]';
        $request = $this->getActiveSharesRequest($lock_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getActiveShares'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getActiveSharesRequest($lock_id)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling getActiveShares'
            );
        }

        $resourcePath = '/v1/locks/{lockId}/settings/active-shares';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssignedAreas
     *
     * Gets assigned areas of a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\AssignedArea[]
     */
    public function getAssignedAreas($lock_id)
    {
        list($response) = $this->getAssignedAreasWithHttpInfo($lock_id);
        return $response;
    }

    /**
     * Operation getAssignedAreasWithHttpInfo
     *
     * Gets assigned areas of a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\AssignedArea[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssignedAreasWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\AssignedArea[]';
        $request = $this->getAssignedAreasRequest($lock_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\AssignedArea[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssignedAreasAsync
     *
     * Gets assigned areas of a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssignedAreasAsync($lock_id)
    {
        return $this->getAssignedAreasAsyncWithHttpInfo($lock_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssignedAreasAsyncWithHttpInfo
     *
     * Gets assigned areas of a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssignedAreasAsyncWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\AssignedArea[]';
        $request = $this->getAssignedAreasRequest($lock_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssignedAreas'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssignedAreasRequest($lock_id)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling getAssignedAreas'
            );
        }

        $resourcePath = '/v1/locks/{lockId}/settings/assigned-areas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLock
     *
     * Gets information of a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\Lock
     */
    public function getLock($lock_id)
    {
        list($response) = $this->getLockWithHttpInfo($lock_id);
        return $response;
    }

    /**
     * Operation getLockWithHttpInfo
     *
     * Gets information of a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\Lock, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLockWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\Lock';
        $request = $this->getLockRequest($lock_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\Lock',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLockAsync
     *
     * Gets information of a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLockAsync($lock_id)
    {
        return $this->getLockAsyncWithHttpInfo($lock_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLockAsyncWithHttpInfo
     *
     * Gets information of a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLockAsyncWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\Lock';
        $request = $this->getLockRequest($lock_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLock'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLockRequest($lock_id)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling getLock'
            );
        }

        $resourcePath = '/v1/locks/{lockId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLockSettings
     *
     * Gets settings of a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\LockSettings
     */
    public function getLockSettings($lock_id)
    {
        list($response) = $this->getLockSettingsWithHttpInfo($lock_id);
        return $response;
    }

    /**
     * Operation getLockSettingsWithHttpInfo
     *
     * Gets settings of a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\LockSettings, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLockSettingsWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\LockSettings';
        $request = $this->getLockSettingsRequest($lock_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\LockSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLockSettingsAsync
     *
     * Gets settings of a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLockSettingsAsync($lock_id)
    {
        return $this->getLockSettingsAsyncWithHttpInfo($lock_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLockSettingsAsyncWithHttpInfo
     *
     * Gets settings of a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLockSettingsAsyncWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\LockSettings';
        $request = $this->getLockSettingsRequest($lock_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLockSettings'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLockSettingsRequest($lock_id)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling getLockSettings'
            );
        }

        $resourcePath = '/v1/locks/{lockId}/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLocks
     *
     * Gets information of all locks.
     *
     * @param  int $offset Offset for paging (optional)
     * @param  int $limit Limit of result size (optional)
     * @param  int $calendar_id Filter locks by holiday calendar id (optional)
     * @param  int $locking_system_id Filter locks by technical identifier lockingSystemId (optional)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\LockPagingList
     */
    public function getLocks($offset = null, $limit = null, $calendar_id = null, $locking_system_id = null)
    {
        list($response) = $this->getLocksWithHttpInfo($offset, $limit, $calendar_id, $locking_system_id);
        return $response;
    }

    /**
     * Operation getLocksWithHttpInfo
     *
     * Gets information of all locks.
     *
     * @param  int $offset Offset for paging (optional)
     * @param  int $limit Limit of result size (optional)
     * @param  int $calendar_id Filter locks by holiday calendar id (optional)
     * @param  int $locking_system_id Filter locks by technical identifier lockingSystemId (optional)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\LockPagingList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLocksWithHttpInfo($offset = null, $limit = null, $calendar_id = null, $locking_system_id = null)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\LockPagingList';
        $request = $this->getLocksRequest($offset, $limit, $calendar_id, $locking_system_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\LockPagingList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLocksAsync
     *
     * Gets information of all locks.
     *
     * @param  int $offset Offset for paging (optional)
     * @param  int $limit Limit of result size (optional)
     * @param  int $calendar_id Filter locks by holiday calendar id (optional)
     * @param  int $locking_system_id Filter locks by technical identifier lockingSystemId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocksAsync($offset = null, $limit = null, $calendar_id = null, $locking_system_id = null)
    {
        return $this->getLocksAsyncWithHttpInfo($offset, $limit, $calendar_id, $locking_system_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLocksAsyncWithHttpInfo
     *
     * Gets information of all locks.
     *
     * @param  int $offset Offset for paging (optional)
     * @param  int $limit Limit of result size (optional)
     * @param  int $calendar_id Filter locks by holiday calendar id (optional)
     * @param  int $locking_system_id Filter locks by technical identifier lockingSystemId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocksAsyncWithHttpInfo($offset = null, $limit = null, $calendar_id = null, $locking_system_id = null)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\LockPagingList';
        $request = $this->getLocksRequest($offset, $limit, $calendar_id, $locking_system_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLocks'
     *
     * @param  int $offset Offset for paging (optional)
     * @param  int $limit Limit of result size (optional)
     * @param  int $calendar_id Filter locks by holiday calendar id (optional)
     * @param  int $locking_system_id Filter locks by technical identifier lockingSystemId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLocksRequest($offset = null, $limit = null, $calendar_id = null, $locking_system_id = null)
    {
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling LocksApi.getLocks, must be bigger than or equal to 0.');
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling LocksApi.getLocks, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v1/locks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($calendar_id !== null) {
            $queryParams['calendarId'] = ObjectSerializer::toQueryValue($calendar_id);
        }
        // query params
        if ($locking_system_id !== null) {
            $queryParams['lockingSystemId'] = ObjectSerializer::toQueryValue($locking_system_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSharingCodes
     *
     * Returns a list of sharing codes for a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\SharingCode[]
     */
    public function getSharingCodes($lock_id)
    {
        list($response) = $this->getSharingCodesWithHttpInfo($lock_id);
        return $response;
    }

    /**
     * Operation getSharingCodesWithHttpInfo
     *
     * Returns a list of sharing codes for a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\SharingCode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSharingCodesWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\SharingCode[]';
        $request = $this->getSharingCodesRequest($lock_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\SharingCode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSharingCodesAsync
     *
     * Returns a list of sharing codes for a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSharingCodesAsync($lock_id)
    {
        return $this->getSharingCodesAsyncWithHttpInfo($lock_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSharingCodesAsyncWithHttpInfo
     *
     * Returns a list of sharing codes for a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSharingCodesAsyncWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\SharingCode[]';
        $request = $this->getSharingCodesRequest($lock_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSharingCodes'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSharingCodesRequest($lock_id)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling getSharingCodes'
            );
        }

        $resourcePath = '/v1/locks/{lockId}/settings/sharing-codes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation markLockAsToBeRemoved
     *
     * Marks a lock as to be removed. Lock needs to be synchronized to be actually removed.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\Lock
     */
    public function markLockAsToBeRemoved($lock_id)
    {
        list($response) = $this->markLockAsToBeRemovedWithHttpInfo($lock_id);
        return $response;
    }

    /**
     * Operation markLockAsToBeRemovedWithHttpInfo
     *
     * Marks a lock as to be removed. Lock needs to be synchronized to be actually removed.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\Lock, HTTP status code, HTTP response headers (array of strings)
     */
    public function markLockAsToBeRemovedWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\Lock';
        $request = $this->markLockAsToBeRemovedRequest($lock_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\Lock',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation markLockAsToBeRemovedAsync
     *
     * Marks a lock as to be removed. Lock needs to be synchronized to be actually removed.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markLockAsToBeRemovedAsync($lock_id)
    {
        return $this->markLockAsToBeRemovedAsyncWithHttpInfo($lock_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation markLockAsToBeRemovedAsyncWithHttpInfo
     *
     * Marks a lock as to be removed. Lock needs to be synchronized to be actually removed.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markLockAsToBeRemovedAsyncWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\Lock';
        $request = $this->markLockAsToBeRemovedRequest($lock_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'markLockAsToBeRemoved'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function markLockAsToBeRemovedRequest($lock_id)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling markLockAsToBeRemoved'
            );
        }

        $resourcePath = '/v1/locks/{lockId}/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeActiveShares
     *
     * Removes shares for a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  string[] $body A list of customerNumber (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\ActiveShare[]
     */
    public function removeActiveShares($lock_id, $body)
    {
        list($response) = $this->removeActiveSharesWithHttpInfo($lock_id, $body);
        return $response;
    }

    /**
     * Operation removeActiveSharesWithHttpInfo
     *
     * Removes shares for a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  string[] $body A list of customerNumber (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\ActiveShare[], HTTP status code, HTTP response headers (array of strings)
     */
    public function removeActiveSharesWithHttpInfo($lock_id, $body)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\ActiveShare[]';
        $request = $this->removeActiveSharesRequest($lock_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\ActiveShare[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeActiveSharesAsync
     *
     * Removes shares for a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  string[] $body A list of customerNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeActiveSharesAsync($lock_id, $body)
    {
        return $this->removeActiveSharesAsyncWithHttpInfo($lock_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeActiveSharesAsyncWithHttpInfo
     *
     * Removes shares for a specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  string[] $body A list of customerNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeActiveSharesAsyncWithHttpInfo($lock_id, $body)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\ActiveShare[]';
        $request = $this->removeActiveSharesRequest($lock_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeActiveShares'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  string[] $body A list of customerNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeActiveSharesRequest($lock_id, $body)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling removeActiveShares'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling removeActiveShares'
            );
        }

        $resourcePath = '/v1/locks/{lockId}/settings/active-shares/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unassignAreas
     *
     * Unassigns areas from the specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int[] $body A list of areaIds (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\AssignedArea[]
     */
    public function unassignAreas($lock_id, $body)
    {
        list($response) = $this->unassignAreasWithHttpInfo($lock_id, $body);
        return $response;
    }

    /**
     * Operation unassignAreasWithHttpInfo
     *
     * Unassigns areas from the specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int[] $body A list of areaIds (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\AssignedArea[], HTTP status code, HTTP response headers (array of strings)
     */
    public function unassignAreasWithHttpInfo($lock_id, $body)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\AssignedArea[]';
        $request = $this->unassignAreasRequest($lock_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\AssignedArea[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unassignAreasAsync
     *
     * Unassigns areas from the specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int[] $body A list of areaIds (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unassignAreasAsync($lock_id, $body)
    {
        return $this->unassignAreasAsyncWithHttpInfo($lock_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unassignAreasAsyncWithHttpInfo
     *
     * Unassigns areas from the specific lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int[] $body A list of areaIds (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unassignAreasAsyncWithHttpInfo($lock_id, $body)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\AssignedArea[]';
        $request = $this->unassignAreasRequest($lock_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unassignAreas'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  int[] $body A list of areaIds (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function unassignAreasRequest($lock_id, $body)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling unassignAreas'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling unassignAreas'
            );
        }

        $resourcePath = '/v1/locks/{lockId}/settings/assigned-areas/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unmarkLockAsToBeRemoved
     *
     * Aborts removal of a lock (removes the to be removed mark on the lock)
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\Lock
     */
    public function unmarkLockAsToBeRemoved($lock_id)
    {
        list($response) = $this->unmarkLockAsToBeRemovedWithHttpInfo($lock_id);
        return $response;
    }

    /**
     * Operation unmarkLockAsToBeRemovedWithHttpInfo
     *
     * Aborts removal of a lock (removes the to be removed mark on the lock)
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\Lock, HTTP status code, HTTP response headers (array of strings)
     */
    public function unmarkLockAsToBeRemovedWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\Lock';
        $request = $this->unmarkLockAsToBeRemovedRequest($lock_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\Lock',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unmarkLockAsToBeRemovedAsync
     *
     * Aborts removal of a lock (removes the to be removed mark on the lock)
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unmarkLockAsToBeRemovedAsync($lock_id)
    {
        return $this->unmarkLockAsToBeRemovedAsyncWithHttpInfo($lock_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unmarkLockAsToBeRemovedAsyncWithHttpInfo
     *
     * Aborts removal of a lock (removes the to be removed mark on the lock)
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unmarkLockAsToBeRemovedAsyncWithHttpInfo($lock_id)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\Lock';
        $request = $this->unmarkLockAsToBeRemovedRequest($lock_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unmarkLockAsToBeRemoved'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function unmarkLockAsToBeRemovedRequest($lock_id)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling unmarkLockAsToBeRemoved'
            );
        }

        $resourcePath = '/v1/locks/{lockId}/abort-remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLock
     *
     * Updates the provided lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  \Coucounco\Airkey\Swagger\Client\Model\Lock $body Lock to be updated (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\Lock
     */
    public function updateLock($lock_id, $body)
    {
        list($response) = $this->updateLockWithHttpInfo($lock_id, $body);
        return $response;
    }

    /**
     * Operation updateLockWithHttpInfo
     *
     * Updates the provided lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  \Coucounco\Airkey\Swagger\Client\Model\Lock $body Lock to be updated (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\Lock, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLockWithHttpInfo($lock_id, $body)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\Lock';
        $request = $this->updateLockRequest($lock_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\Lock',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLockAsync
     *
     * Updates the provided lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  \Coucounco\Airkey\Swagger\Client\Model\Lock $body Lock to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLockAsync($lock_id, $body)
    {
        return $this->updateLockAsyncWithHttpInfo($lock_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLockAsyncWithHttpInfo
     *
     * Updates the provided lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  \Coucounco\Airkey\Swagger\Client\Model\Lock $body Lock to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLockAsyncWithHttpInfo($lock_id, $body)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\Lock';
        $request = $this->updateLockRequest($lock_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLock'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  \Coucounco\Airkey\Swagger\Client\Model\Lock $body Lock to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLockRequest($lock_id, $body)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling updateLock'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateLock'
            );
        }

        $resourcePath = '/v1/locks/{lockId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLockSettings
     *
     * Updates settings of the lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  \Coucounco\Airkey\Swagger\Client\Model\LockSettings $body Lock settings to be updated (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coucounco\Airkey\Swagger\Client\Model\LockSettings
     */
    public function updateLockSettings($lock_id, $body)
    {
        list($response) = $this->updateLockSettingsWithHttpInfo($lock_id, $body);
        return $response;
    }

    /**
     * Operation updateLockSettingsWithHttpInfo
     *
     * Updates settings of the lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  \Coucounco\Airkey\Swagger\Client\Model\LockSettings $body Lock settings to be updated (required)
     *
     * @throws \Coucounco\Airkey\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coucounco\Airkey\Swagger\Client\Model\LockSettings, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLockSettingsWithHttpInfo($lock_id, $body)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\LockSettings';
        $request = $this->updateLockSettingsRequest($lock_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coucounco\Airkey\Swagger\Client\Model\LockSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLockSettingsAsync
     *
     * Updates settings of the lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  \Coucounco\Airkey\Swagger\Client\Model\LockSettings $body Lock settings to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLockSettingsAsync($lock_id, $body)
    {
        return $this->updateLockSettingsAsyncWithHttpInfo($lock_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLockSettingsAsyncWithHttpInfo
     *
     * Updates settings of the lock.
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  \Coucounco\Airkey\Swagger\Client\Model\LockSettings $body Lock settings to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLockSettingsAsyncWithHttpInfo($lock_id, $body)
    {
        $returnType = '\Coucounco\Airkey\Swagger\Client\Model\LockSettings';
        $request = $this->updateLockSettingsRequest($lock_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLockSettings'
     *
     * @param  int $lock_id Unique identifier of the lock (required)
     * @param  \Coucounco\Airkey\Swagger\Client\Model\LockSettings $body Lock settings to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLockSettingsRequest($lock_id, $body)
    {
        // verify the required parameter 'lock_id' is set
        if ($lock_id === null || (is_array($lock_id) && count($lock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lock_id when calling updateLockSettings'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateLockSettings'
            );
        }

        $resourcePath = '/v1/locks/{lockId}/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($lock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lockId' . '}',
                ObjectSerializer::toPathValue($lock_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
