<?php
/**
 * Person
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v14.40.2
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Person Class Doc Comment
 *
 * @category Class
 * @description Model that describes a stored person with identifier and version defined in the access control system.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Person implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Person';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'version' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'secondary_identification' => 'string',
        'gender' => 'string',
        'birthday' => 'string',
        'phone' => 'string',
        'email_address' => 'string',
        'street' => 'string',
        'postal_code' => 'string',
        'country_code' => 'string',
        'city' => 'string',
        'comment' => 'string',
        'correspondence_language_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'version' => 'int64',
        'first_name' => null,
        'last_name' => null,
        'secondary_identification' => null,
        'gender' => null,
        'birthday' => null,
        'phone' => null,
        'email_address' => null,
        'street' => null,
        'postal_code' => null,
        'country_code' => null,
        'city' => null,
        'comment' => null,
        'correspondence_language_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'secondary_identification' => 'secondaryIdentification',
        'gender' => 'gender',
        'birthday' => 'birthday',
        'phone' => 'phone',
        'email_address' => 'emailAddress',
        'street' => 'street',
        'postal_code' => 'postalCode',
        'country_code' => 'countryCode',
        'city' => 'city',
        'comment' => 'comment',
        'correspondence_language_code' => 'correspondenceLanguageCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'secondary_identification' => 'setSecondaryIdentification',
        'gender' => 'setGender',
        'birthday' => 'setBirthday',
        'phone' => 'setPhone',
        'email_address' => 'setEmailAddress',
        'street' => 'setStreet',
        'postal_code' => 'setPostalCode',
        'country_code' => 'setCountryCode',
        'city' => 'setCity',
        'comment' => 'setComment',
        'correspondence_language_code' => 'setCorrespondenceLanguageCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'secondary_identification' => 'getSecondaryIdentification',
        'gender' => 'getGender',
        'birthday' => 'getBirthday',
        'phone' => 'getPhone',
        'email_address' => 'getEmailAddress',
        'street' => 'getStreet',
        'postal_code' => 'getPostalCode',
        'country_code' => 'getCountryCode',
        'city' => 'getCity',
        'comment' => 'getComment',
        'correspondence_language_code' => 'getCorrespondenceLanguageCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GENDER_MALE = 'MALE';
    const GENDER_FEMALE = 'FEMALE';
    const COUNTRY_CODE_ABW = 'ABW';
    const COUNTRY_CODE_AFG = 'AFG';
    const COUNTRY_CODE_AGO = 'AGO';
    const COUNTRY_CODE_AIA = 'AIA';
    const COUNTRY_CODE_ALA = 'ALA';
    const COUNTRY_CODE_ALB = 'ALB';
    const COUNTRY_CODE__AND = 'AND';
    const COUNTRY_CODE_ANT = 'ANT';
    const COUNTRY_CODE_ARE = 'ARE';
    const COUNTRY_CODE_ARG = 'ARG';
    const COUNTRY_CODE_ARM = 'ARM';
    const COUNTRY_CODE_ASM = 'ASM';
    const COUNTRY_CODE_ATA = 'ATA';
    const COUNTRY_CODE_ATF = 'ATF';
    const COUNTRY_CODE_ATG = 'ATG';
    const COUNTRY_CODE_AUS = 'AUS';
    const COUNTRY_CODE_AUT = 'AUT';
    const COUNTRY_CODE_AZE = 'AZE';
    const COUNTRY_CODE_BDI = 'BDI';
    const COUNTRY_CODE_BEL = 'BEL';
    const COUNTRY_CODE_BEN = 'BEN';
    const COUNTRY_CODE_BES = 'BES';
    const COUNTRY_CODE_BFA = 'BFA';
    const COUNTRY_CODE_BGD = 'BGD';
    const COUNTRY_CODE_BGR = 'BGR';
    const COUNTRY_CODE_BHR = 'BHR';
    const COUNTRY_CODE_BHS = 'BHS';
    const COUNTRY_CODE_BIH = 'BIH';
    const COUNTRY_CODE_BLM = 'BLM';
    const COUNTRY_CODE_BLR = 'BLR';
    const COUNTRY_CODE_BLZ = 'BLZ';
    const COUNTRY_CODE_BMU = 'BMU';
    const COUNTRY_CODE_BOL = 'BOL';
    const COUNTRY_CODE_BRA = 'BRA';
    const COUNTRY_CODE_BRB = 'BRB';
    const COUNTRY_CODE_BRN = 'BRN';
    const COUNTRY_CODE_BTN = 'BTN';
    const COUNTRY_CODE_BVT = 'BVT';
    const COUNTRY_CODE_BWA = 'BWA';
    const COUNTRY_CODE_CAF = 'CAF';
    const COUNTRY_CODE_CAN = 'CAN';
    const COUNTRY_CODE_CCK = 'CCK';
    const COUNTRY_CODE_CHE = 'CHE';
    const COUNTRY_CODE_CHL = 'CHL';
    const COUNTRY_CODE_CHN = 'CHN';
    const COUNTRY_CODE_CIV = 'CIV';
    const COUNTRY_CODE_CMR = 'CMR';
    const COUNTRY_CODE_COD = 'COD';
    const COUNTRY_CODE_COG = 'COG';
    const COUNTRY_CODE_COK = 'COK';
    const COUNTRY_CODE_COL = 'COL';
    const COUNTRY_CODE_COM = 'COM';
    const COUNTRY_CODE_CPV = 'CPV';
    const COUNTRY_CODE_CRI = 'CRI';
    const COUNTRY_CODE_CUB = 'CUB';
    const COUNTRY_CODE_CUW = 'CUW';
    const COUNTRY_CODE_CXR = 'CXR';
    const COUNTRY_CODE_CYM = 'CYM';
    const COUNTRY_CODE_CYP = 'CYP';
    const COUNTRY_CODE_CZE = 'CZE';
    const COUNTRY_CODE_DEU = 'DEU';
    const COUNTRY_CODE_DJI = 'DJI';
    const COUNTRY_CODE_DMA = 'DMA';
    const COUNTRY_CODE_DNK = 'DNK';
    const COUNTRY_CODE_DOM = 'DOM';
    const COUNTRY_CODE_DZA = 'DZA';
    const COUNTRY_CODE_ECU = 'ECU';
    const COUNTRY_CODE_EGY = 'EGY';
    const COUNTRY_CODE_ERI = 'ERI';
    const COUNTRY_CODE_ESH = 'ESH';
    const COUNTRY_CODE_ESP = 'ESP';
    const COUNTRY_CODE_EST = 'EST';
    const COUNTRY_CODE_ETH = 'ETH';
    const COUNTRY_CODE_FIN = 'FIN';
    const COUNTRY_CODE_FJI = 'FJI';
    const COUNTRY_CODE_FLK = 'FLK';
    const COUNTRY_CODE_FRA = 'FRA';
    const COUNTRY_CODE_FRO = 'FRO';
    const COUNTRY_CODE_FSM = 'FSM';
    const COUNTRY_CODE_GAB = 'GAB';
    const COUNTRY_CODE_GBR = 'GBR';
    const COUNTRY_CODE_GEO = 'GEO';
    const COUNTRY_CODE_GGY = 'GGY';
    const COUNTRY_CODE_GHA = 'GHA';
    const COUNTRY_CODE_GIB = 'GIB';
    const COUNTRY_CODE_GIN = 'GIN';
    const COUNTRY_CODE_GLP = 'GLP';
    const COUNTRY_CODE_GMB = 'GMB';
    const COUNTRY_CODE_GNB = 'GNB';
    const COUNTRY_CODE_GNQ = 'GNQ';
    const COUNTRY_CODE_GRC = 'GRC';
    const COUNTRY_CODE_GRD = 'GRD';
    const COUNTRY_CODE_GRL = 'GRL';
    const COUNTRY_CODE_GTM = 'GTM';
    const COUNTRY_CODE_GUF = 'GUF';
    const COUNTRY_CODE_GUM = 'GUM';
    const COUNTRY_CODE_GUY = 'GUY';
    const COUNTRY_CODE_HKG = 'HKG';
    const COUNTRY_CODE_HMD = 'HMD';
    const COUNTRY_CODE_HND = 'HND';
    const COUNTRY_CODE_HRV = 'HRV';
    const COUNTRY_CODE_HTI = 'HTI';
    const COUNTRY_CODE_HUN = 'HUN';
    const COUNTRY_CODE_IDN = 'IDN';
    const COUNTRY_CODE_IMN = 'IMN';
    const COUNTRY_CODE_IND = 'IND';
    const COUNTRY_CODE_IOT = 'IOT';
    const COUNTRY_CODE_IRL = 'IRL';
    const COUNTRY_CODE_IRN = 'IRN';
    const COUNTRY_CODE_IRQ = 'IRQ';
    const COUNTRY_CODE_ISL = 'ISL';
    const COUNTRY_CODE_ISR = 'ISR';
    const COUNTRY_CODE_ITA = 'ITA';
    const COUNTRY_CODE_JAM = 'JAM';
    const COUNTRY_CODE_JEY = 'JEY';
    const COUNTRY_CODE_JOR = 'JOR';
    const COUNTRY_CODE_JPN = 'JPN';
    const COUNTRY_CODE_KAZ = 'KAZ';
    const COUNTRY_CODE_KEN = 'KEN';
    const COUNTRY_CODE_KGZ = 'KGZ';
    const COUNTRY_CODE_KHM = 'KHM';
    const COUNTRY_CODE_KIR = 'KIR';
    const COUNTRY_CODE_KNA = 'KNA';
    const COUNTRY_CODE_KOR = 'KOR';
    const COUNTRY_CODE_KWT = 'KWT';
    const COUNTRY_CODE_LAO = 'LAO';
    const COUNTRY_CODE_LBN = 'LBN';
    const COUNTRY_CODE_LBR = 'LBR';
    const COUNTRY_CODE_LBY = 'LBY';
    const COUNTRY_CODE_LCA = 'LCA';
    const COUNTRY_CODE_LIE = 'LIE';
    const COUNTRY_CODE_LKA = 'LKA';
    const COUNTRY_CODE_LSO = 'LSO';
    const COUNTRY_CODE_LTU = 'LTU';
    const COUNTRY_CODE_LUX = 'LUX';
    const COUNTRY_CODE_LVA = 'LVA';
    const COUNTRY_CODE_MAC = 'MAC';
    const COUNTRY_CODE_MAF = 'MAF';
    const COUNTRY_CODE_MAR = 'MAR';
    const COUNTRY_CODE_MCO = 'MCO';
    const COUNTRY_CODE_MDA = 'MDA';
    const COUNTRY_CODE_MDG = 'MDG';
    const COUNTRY_CODE_MDV = 'MDV';
    const COUNTRY_CODE_MEX = 'MEX';
    const COUNTRY_CODE_MHL = 'MHL';
    const COUNTRY_CODE_MKD = 'MKD';
    const COUNTRY_CODE_MLI = 'MLI';
    const COUNTRY_CODE_MLT = 'MLT';
    const COUNTRY_CODE_MMR = 'MMR';
    const COUNTRY_CODE_MNE = 'MNE';
    const COUNTRY_CODE_MNG = 'MNG';
    const COUNTRY_CODE_MNP = 'MNP';
    const COUNTRY_CODE_MOZ = 'MOZ';
    const COUNTRY_CODE_MRT = 'MRT';
    const COUNTRY_CODE_MSR = 'MSR';
    const COUNTRY_CODE_MTQ = 'MTQ';
    const COUNTRY_CODE_MUS = 'MUS';
    const COUNTRY_CODE_MWI = 'MWI';
    const COUNTRY_CODE_MYS = 'MYS';
    const COUNTRY_CODE_MYT = 'MYT';
    const COUNTRY_CODE_NAM = 'NAM';
    const COUNTRY_CODE_NCL = 'NCL';
    const COUNTRY_CODE_NER = 'NER';
    const COUNTRY_CODE_NFK = 'NFK';
    const COUNTRY_CODE_NGA = 'NGA';
    const COUNTRY_CODE_NIC = 'NIC';
    const COUNTRY_CODE_NIU = 'NIU';
    const COUNTRY_CODE_NLD = 'NLD';
    const COUNTRY_CODE_NOR = 'NOR';
    const COUNTRY_CODE_NPL = 'NPL';
    const COUNTRY_CODE_NRU = 'NRU';
    const COUNTRY_CODE_NZL = 'NZL';
    const COUNTRY_CODE_OMN = 'OMN';
    const COUNTRY_CODE_PAK = 'PAK';
    const COUNTRY_CODE_PAN = 'PAN';
    const COUNTRY_CODE_PCN = 'PCN';
    const COUNTRY_CODE_PER = 'PER';
    const COUNTRY_CODE_PHL = 'PHL';
    const COUNTRY_CODE_PLW = 'PLW';
    const COUNTRY_CODE_PNG = 'PNG';
    const COUNTRY_CODE_POL = 'POL';
    const COUNTRY_CODE_PRI = 'PRI';
    const COUNTRY_CODE_PRK = 'PRK';
    const COUNTRY_CODE_PRT = 'PRT';
    const COUNTRY_CODE_PRY = 'PRY';
    const COUNTRY_CODE_PSE = 'PSE';
    const COUNTRY_CODE_PYF = 'PYF';
    const COUNTRY_CODE_QAT = 'QAT';
    const COUNTRY_CODE_REU = 'REU';
    const COUNTRY_CODE_ROU = 'ROU';
    const COUNTRY_CODE_RUS = 'RUS';
    const COUNTRY_CODE_RWA = 'RWA';
    const COUNTRY_CODE_SAU = 'SAU';
    const COUNTRY_CODE_SCG = 'SCG';
    const COUNTRY_CODE_SDN = 'SDN';
    const COUNTRY_CODE_SEN = 'SEN';
    const COUNTRY_CODE_SGP = 'SGP';
    const COUNTRY_CODE_SGS = 'SGS';
    const COUNTRY_CODE_SHN = 'SHN';
    const COUNTRY_CODE_SJM = 'SJM';
    const COUNTRY_CODE_SLB = 'SLB';
    const COUNTRY_CODE_SLE = 'SLE';
    const COUNTRY_CODE_SLV = 'SLV';
    const COUNTRY_CODE_SMR = 'SMR';
    const COUNTRY_CODE_SOM = 'SOM';
    const COUNTRY_CODE_SPM = 'SPM';
    const COUNTRY_CODE_SRB = 'SRB';
    const COUNTRY_CODE_STP = 'STP';
    const COUNTRY_CODE_SUR = 'SUR';
    const COUNTRY_CODE_SVK = 'SVK';
    const COUNTRY_CODE_SVN = 'SVN';
    const COUNTRY_CODE_SWE = 'SWE';
    const COUNTRY_CODE_SWZ = 'SWZ';
    const COUNTRY_CODE_SXM = 'SXM';
    const COUNTRY_CODE_SYC = 'SYC';
    const COUNTRY_CODE_SYR = 'SYR';
    const COUNTRY_CODE_TCA = 'TCA';
    const COUNTRY_CODE_TCD = 'TCD';
    const COUNTRY_CODE_TGO = 'TGO';
    const COUNTRY_CODE_THA = 'THA';
    const COUNTRY_CODE_TJK = 'TJK';
    const COUNTRY_CODE_TKL = 'TKL';
    const COUNTRY_CODE_TKM = 'TKM';
    const COUNTRY_CODE_TLS = 'TLS';
    const COUNTRY_CODE_TON = 'TON';
    const COUNTRY_CODE_TTO = 'TTO';
    const COUNTRY_CODE_TUN = 'TUN';
    const COUNTRY_CODE_TUR = 'TUR';
    const COUNTRY_CODE_TUV = 'TUV';
    const COUNTRY_CODE_TWN = 'TWN';
    const COUNTRY_CODE_TZA = 'TZA';
    const COUNTRY_CODE_UGA = 'UGA';
    const COUNTRY_CODE_UKR = 'UKR';
    const COUNTRY_CODE_UMI = 'UMI';
    const COUNTRY_CODE_URY = 'URY';
    const COUNTRY_CODE_USA = 'USA';
    const COUNTRY_CODE_UZB = 'UZB';
    const COUNTRY_CODE_VAT = 'VAT';
    const COUNTRY_CODE_VCT = 'VCT';
    const COUNTRY_CODE_VEN = 'VEN';
    const COUNTRY_CODE_VGB = 'VGB';
    const COUNTRY_CODE_VIR = 'VIR';
    const COUNTRY_CODE_VNM = 'VNM';
    const COUNTRY_CODE_VUT = 'VUT';
    const COUNTRY_CODE_WLF = 'WLF';
    const COUNTRY_CODE_WSM = 'WSM';
    const COUNTRY_CODE_YEM = 'YEM';
    const COUNTRY_CODE_ZAF = 'ZAF';
    const COUNTRY_CODE_ZMB = 'ZMB';
    const COUNTRY_CODE_ZWE = 'ZWE';
    const CORRESPONDENCE_LANGUAGE_CODE_DE_DE = 'de-DE';
    const CORRESPONDENCE_LANGUAGE_CODE_EN_UK = 'en-UK';
    const CORRESPONDENCE_LANGUAGE_CODE_NL_NL = 'nl-NL';
    const CORRESPONDENCE_LANGUAGE_CODE_SV_SE = 'sv-SE';
    const CORRESPONDENCE_LANGUAGE_CODE_FR_FR = 'fr-FR';
    const CORRESPONDENCE_LANGUAGE_CODE_IT_IT = 'it-IT';
    const CORRESPONDENCE_LANGUAGE_CODE_ES_ES = 'es-ES';
    const CORRESPONDENCE_LANGUAGE_CODE_PT_PT = 'pt-PT';
    const CORRESPONDENCE_LANGUAGE_CODE_CS_CZ = 'cs-CZ';
    const CORRESPONDENCE_LANGUAGE_CODE_SK_SK = 'sk-SK';
    const CORRESPONDENCE_LANGUAGE_CODE_PL_PL = 'pl-PL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_MALE,
            self::GENDER_FEMALE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCountryCodeAllowableValues()
    {
        return [
            self::COUNTRY_CODE_ABW,
            self::COUNTRY_CODE_AFG,
            self::COUNTRY_CODE_AGO,
            self::COUNTRY_CODE_AIA,
            self::COUNTRY_CODE_ALA,
            self::COUNTRY_CODE_ALB,
            self::COUNTRY_CODE__AND,
            self::COUNTRY_CODE_ANT,
            self::COUNTRY_CODE_ARE,
            self::COUNTRY_CODE_ARG,
            self::COUNTRY_CODE_ARM,
            self::COUNTRY_CODE_ASM,
            self::COUNTRY_CODE_ATA,
            self::COUNTRY_CODE_ATF,
            self::COUNTRY_CODE_ATG,
            self::COUNTRY_CODE_AUS,
            self::COUNTRY_CODE_AUT,
            self::COUNTRY_CODE_AZE,
            self::COUNTRY_CODE_BDI,
            self::COUNTRY_CODE_BEL,
            self::COUNTRY_CODE_BEN,
            self::COUNTRY_CODE_BES,
            self::COUNTRY_CODE_BFA,
            self::COUNTRY_CODE_BGD,
            self::COUNTRY_CODE_BGR,
            self::COUNTRY_CODE_BHR,
            self::COUNTRY_CODE_BHS,
            self::COUNTRY_CODE_BIH,
            self::COUNTRY_CODE_BLM,
            self::COUNTRY_CODE_BLR,
            self::COUNTRY_CODE_BLZ,
            self::COUNTRY_CODE_BMU,
            self::COUNTRY_CODE_BOL,
            self::COUNTRY_CODE_BRA,
            self::COUNTRY_CODE_BRB,
            self::COUNTRY_CODE_BRN,
            self::COUNTRY_CODE_BTN,
            self::COUNTRY_CODE_BVT,
            self::COUNTRY_CODE_BWA,
            self::COUNTRY_CODE_CAF,
            self::COUNTRY_CODE_CAN,
            self::COUNTRY_CODE_CCK,
            self::COUNTRY_CODE_CHE,
            self::COUNTRY_CODE_CHL,
            self::COUNTRY_CODE_CHN,
            self::COUNTRY_CODE_CIV,
            self::COUNTRY_CODE_CMR,
            self::COUNTRY_CODE_COD,
            self::COUNTRY_CODE_COG,
            self::COUNTRY_CODE_COK,
            self::COUNTRY_CODE_COL,
            self::COUNTRY_CODE_COM,
            self::COUNTRY_CODE_CPV,
            self::COUNTRY_CODE_CRI,
            self::COUNTRY_CODE_CUB,
            self::COUNTRY_CODE_CUW,
            self::COUNTRY_CODE_CXR,
            self::COUNTRY_CODE_CYM,
            self::COUNTRY_CODE_CYP,
            self::COUNTRY_CODE_CZE,
            self::COUNTRY_CODE_DEU,
            self::COUNTRY_CODE_DJI,
            self::COUNTRY_CODE_DMA,
            self::COUNTRY_CODE_DNK,
            self::COUNTRY_CODE_DOM,
            self::COUNTRY_CODE_DZA,
            self::COUNTRY_CODE_ECU,
            self::COUNTRY_CODE_EGY,
            self::COUNTRY_CODE_ERI,
            self::COUNTRY_CODE_ESH,
            self::COUNTRY_CODE_ESP,
            self::COUNTRY_CODE_EST,
            self::COUNTRY_CODE_ETH,
            self::COUNTRY_CODE_FIN,
            self::COUNTRY_CODE_FJI,
            self::COUNTRY_CODE_FLK,
            self::COUNTRY_CODE_FRA,
            self::COUNTRY_CODE_FRO,
            self::COUNTRY_CODE_FSM,
            self::COUNTRY_CODE_GAB,
            self::COUNTRY_CODE_GBR,
            self::COUNTRY_CODE_GEO,
            self::COUNTRY_CODE_GGY,
            self::COUNTRY_CODE_GHA,
            self::COUNTRY_CODE_GIB,
            self::COUNTRY_CODE_GIN,
            self::COUNTRY_CODE_GLP,
            self::COUNTRY_CODE_GMB,
            self::COUNTRY_CODE_GNB,
            self::COUNTRY_CODE_GNQ,
            self::COUNTRY_CODE_GRC,
            self::COUNTRY_CODE_GRD,
            self::COUNTRY_CODE_GRL,
            self::COUNTRY_CODE_GTM,
            self::COUNTRY_CODE_GUF,
            self::COUNTRY_CODE_GUM,
            self::COUNTRY_CODE_GUY,
            self::COUNTRY_CODE_HKG,
            self::COUNTRY_CODE_HMD,
            self::COUNTRY_CODE_HND,
            self::COUNTRY_CODE_HRV,
            self::COUNTRY_CODE_HTI,
            self::COUNTRY_CODE_HUN,
            self::COUNTRY_CODE_IDN,
            self::COUNTRY_CODE_IMN,
            self::COUNTRY_CODE_IND,
            self::COUNTRY_CODE_IOT,
            self::COUNTRY_CODE_IRL,
            self::COUNTRY_CODE_IRN,
            self::COUNTRY_CODE_IRQ,
            self::COUNTRY_CODE_ISL,
            self::COUNTRY_CODE_ISR,
            self::COUNTRY_CODE_ITA,
            self::COUNTRY_CODE_JAM,
            self::COUNTRY_CODE_JEY,
            self::COUNTRY_CODE_JOR,
            self::COUNTRY_CODE_JPN,
            self::COUNTRY_CODE_KAZ,
            self::COUNTRY_CODE_KEN,
            self::COUNTRY_CODE_KGZ,
            self::COUNTRY_CODE_KHM,
            self::COUNTRY_CODE_KIR,
            self::COUNTRY_CODE_KNA,
            self::COUNTRY_CODE_KOR,
            self::COUNTRY_CODE_KWT,
            self::COUNTRY_CODE_LAO,
            self::COUNTRY_CODE_LBN,
            self::COUNTRY_CODE_LBR,
            self::COUNTRY_CODE_LBY,
            self::COUNTRY_CODE_LCA,
            self::COUNTRY_CODE_LIE,
            self::COUNTRY_CODE_LKA,
            self::COUNTRY_CODE_LSO,
            self::COUNTRY_CODE_LTU,
            self::COUNTRY_CODE_LUX,
            self::COUNTRY_CODE_LVA,
            self::COUNTRY_CODE_MAC,
            self::COUNTRY_CODE_MAF,
            self::COUNTRY_CODE_MAR,
            self::COUNTRY_CODE_MCO,
            self::COUNTRY_CODE_MDA,
            self::COUNTRY_CODE_MDG,
            self::COUNTRY_CODE_MDV,
            self::COUNTRY_CODE_MEX,
            self::COUNTRY_CODE_MHL,
            self::COUNTRY_CODE_MKD,
            self::COUNTRY_CODE_MLI,
            self::COUNTRY_CODE_MLT,
            self::COUNTRY_CODE_MMR,
            self::COUNTRY_CODE_MNE,
            self::COUNTRY_CODE_MNG,
            self::COUNTRY_CODE_MNP,
            self::COUNTRY_CODE_MOZ,
            self::COUNTRY_CODE_MRT,
            self::COUNTRY_CODE_MSR,
            self::COUNTRY_CODE_MTQ,
            self::COUNTRY_CODE_MUS,
            self::COUNTRY_CODE_MWI,
            self::COUNTRY_CODE_MYS,
            self::COUNTRY_CODE_MYT,
            self::COUNTRY_CODE_NAM,
            self::COUNTRY_CODE_NCL,
            self::COUNTRY_CODE_NER,
            self::COUNTRY_CODE_NFK,
            self::COUNTRY_CODE_NGA,
            self::COUNTRY_CODE_NIC,
            self::COUNTRY_CODE_NIU,
            self::COUNTRY_CODE_NLD,
            self::COUNTRY_CODE_NOR,
            self::COUNTRY_CODE_NPL,
            self::COUNTRY_CODE_NRU,
            self::COUNTRY_CODE_NZL,
            self::COUNTRY_CODE_OMN,
            self::COUNTRY_CODE_PAK,
            self::COUNTRY_CODE_PAN,
            self::COUNTRY_CODE_PCN,
            self::COUNTRY_CODE_PER,
            self::COUNTRY_CODE_PHL,
            self::COUNTRY_CODE_PLW,
            self::COUNTRY_CODE_PNG,
            self::COUNTRY_CODE_POL,
            self::COUNTRY_CODE_PRI,
            self::COUNTRY_CODE_PRK,
            self::COUNTRY_CODE_PRT,
            self::COUNTRY_CODE_PRY,
            self::COUNTRY_CODE_PSE,
            self::COUNTRY_CODE_PYF,
            self::COUNTRY_CODE_QAT,
            self::COUNTRY_CODE_REU,
            self::COUNTRY_CODE_ROU,
            self::COUNTRY_CODE_RUS,
            self::COUNTRY_CODE_RWA,
            self::COUNTRY_CODE_SAU,
            self::COUNTRY_CODE_SCG,
            self::COUNTRY_CODE_SDN,
            self::COUNTRY_CODE_SEN,
            self::COUNTRY_CODE_SGP,
            self::COUNTRY_CODE_SGS,
            self::COUNTRY_CODE_SHN,
            self::COUNTRY_CODE_SJM,
            self::COUNTRY_CODE_SLB,
            self::COUNTRY_CODE_SLE,
            self::COUNTRY_CODE_SLV,
            self::COUNTRY_CODE_SMR,
            self::COUNTRY_CODE_SOM,
            self::COUNTRY_CODE_SPM,
            self::COUNTRY_CODE_SRB,
            self::COUNTRY_CODE_STP,
            self::COUNTRY_CODE_SUR,
            self::COUNTRY_CODE_SVK,
            self::COUNTRY_CODE_SVN,
            self::COUNTRY_CODE_SWE,
            self::COUNTRY_CODE_SWZ,
            self::COUNTRY_CODE_SXM,
            self::COUNTRY_CODE_SYC,
            self::COUNTRY_CODE_SYR,
            self::COUNTRY_CODE_TCA,
            self::COUNTRY_CODE_TCD,
            self::COUNTRY_CODE_TGO,
            self::COUNTRY_CODE_THA,
            self::COUNTRY_CODE_TJK,
            self::COUNTRY_CODE_TKL,
            self::COUNTRY_CODE_TKM,
            self::COUNTRY_CODE_TLS,
            self::COUNTRY_CODE_TON,
            self::COUNTRY_CODE_TTO,
            self::COUNTRY_CODE_TUN,
            self::COUNTRY_CODE_TUR,
            self::COUNTRY_CODE_TUV,
            self::COUNTRY_CODE_TWN,
            self::COUNTRY_CODE_TZA,
            self::COUNTRY_CODE_UGA,
            self::COUNTRY_CODE_UKR,
            self::COUNTRY_CODE_UMI,
            self::COUNTRY_CODE_URY,
            self::COUNTRY_CODE_USA,
            self::COUNTRY_CODE_UZB,
            self::COUNTRY_CODE_VAT,
            self::COUNTRY_CODE_VCT,
            self::COUNTRY_CODE_VEN,
            self::COUNTRY_CODE_VGB,
            self::COUNTRY_CODE_VIR,
            self::COUNTRY_CODE_VNM,
            self::COUNTRY_CODE_VUT,
            self::COUNTRY_CODE_WLF,
            self::COUNTRY_CODE_WSM,
            self::COUNTRY_CODE_YEM,
            self::COUNTRY_CODE_ZAF,
            self::COUNTRY_CODE_ZMB,
            self::COUNTRY_CODE_ZWE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCorrespondenceLanguageCodeAllowableValues()
    {
        return [
            self::CORRESPONDENCE_LANGUAGE_CODE_DE_DE,
            self::CORRESPONDENCE_LANGUAGE_CODE_EN_UK,
            self::CORRESPONDENCE_LANGUAGE_CODE_NL_NL,
            self::CORRESPONDENCE_LANGUAGE_CODE_SV_SE,
            self::CORRESPONDENCE_LANGUAGE_CODE_FR_FR,
            self::CORRESPONDENCE_LANGUAGE_CODE_IT_IT,
            self::CORRESPONDENCE_LANGUAGE_CODE_ES_ES,
            self::CORRESPONDENCE_LANGUAGE_CODE_PT_PT,
            self::CORRESPONDENCE_LANGUAGE_CODE_CS_CZ,
            self::CORRESPONDENCE_LANGUAGE_CODE_SK_SK,
            self::CORRESPONDENCE_LANGUAGE_CODE_PL_PL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['secondary_identification'] = isset($data['secondary_identification']) ? $data['secondary_identification'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['birthday'] = isset($data['birthday']) ? $data['birthday'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['correspondence_language_code'] = isset($data['correspondence_language_code']) ? $data['correspondence_language_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['first_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['last_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['secondary_identification']) && (mb_strlen($this->container['secondary_identification']) > 50)) {
            $invalidProperties[] = "invalid value for 'secondary_identification', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['secondary_identification']) && (mb_strlen($this->container['secondary_identification']) < 0)) {
            $invalidProperties[] = "invalid value for 'secondary_identification', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['birthday']) && (mb_strlen($this->container['birthday']) > 10)) {
            $invalidProperties[] = "invalid value for 'birthday', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['birthday']) && (mb_strlen($this->container['birthday']) < 0)) {
            $invalidProperties[] = "invalid value for 'birthday', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) > 50)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['street']) && (mb_strlen($this->container['street']) > 50)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['street']) && (mb_strlen($this->container['street']) < 0)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getCountryCodeAllowableValues();
        if (!is_null($this->container['country_code']) && !in_array($this->container['country_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'country_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 50)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 500)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) < 0)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['correspondence_language_code'] === null) {
            $invalidProperties[] = "'correspondence_language_code' can't be null";
        }
        $allowedValues = $this->getCorrespondenceLanguageCodeAllowableValues();
        if (!is_null($this->container['correspondence_language_code']) && !in_array($this->container['correspondence_language_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'correspondence_language_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['correspondence_language_code']) > 5)) {
            $invalidProperties[] = "invalid value for 'correspondence_language_code', the character length must be smaller than or equal to 5.";
        }

        if ((mb_strlen($this->container['correspondence_language_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'correspondence_language_code', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Current version number of the person
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name of the person (max. 50 characters)
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if ((mb_strlen($first_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Person., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($first_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Person., must be bigger than or equal to 0.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name of the person (max. 50 characters)
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if ((mb_strlen($last_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Person., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($last_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Person., must be bigger than or equal to 0.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets secondary_identification
     *
     * @return string
     */
    public function getSecondaryIdentification()
    {
        return $this->container['secondary_identification'];
    }

    /**
     * Sets secondary_identification
     *
     * @param string $secondary_identification Secondary identification of the person (max. 50 characters)
     *
     * @return $this
     */
    public function setSecondaryIdentification($secondary_identification)
    {
        if (!is_null($secondary_identification) && (mb_strlen($secondary_identification) > 50)) {
            throw new \InvalidArgumentException('invalid length for $secondary_identification when calling Person., must be smaller than or equal to 50.');
        }
        if (!is_null($secondary_identification) && (mb_strlen($secondary_identification) < 0)) {
            throw new \InvalidArgumentException('invalid length for $secondary_identification when calling Person., must be bigger than or equal to 0.');
        }

        $this->container['secondary_identification'] = $secondary_identification;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender Gender of the person
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return string
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param string $birthday Birthday (ISO 8601-format compliant date without time zone: yyyy-mm-dd)
     *
     * @return $this
     */
    public function setBirthday($birthday)
    {
        if (!is_null($birthday) && (mb_strlen($birthday) > 10)) {
            throw new \InvalidArgumentException('invalid length for $birthday when calling Person., must be smaller than or equal to 10.');
        }
        if (!is_null($birthday) && (mb_strlen($birthday) < 0)) {
            throw new \InvalidArgumentException('invalid length for $birthday when calling Person., must be bigger than or equal to 0.');
        }

        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Phone number (max. 50 characters)
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (mb_strlen($phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Person., must be smaller than or equal to 50.');
        }
        if (!is_null($phone) && (mb_strlen($phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Person., must be bigger than or equal to 0.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address Email address (max. 50 characters)
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        if (!is_null($email_address) && (mb_strlen($email_address) > 50)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling Person., must be smaller than or equal to 50.');
        }
        if (!is_null($email_address) && (mb_strlen($email_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling Person., must be bigger than or equal to 0.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Street (max. 50 characters)
     *
     * @return $this
     */
    public function setStreet($street)
    {
        if (!is_null($street) && (mb_strlen($street) > 50)) {
            throw new \InvalidArgumentException('invalid length for $street when calling Person., must be smaller than or equal to 50.');
        }
        if (!is_null($street) && (mb_strlen($street) < 0)) {
            throw new \InvalidArgumentException('invalid length for $street when calling Person., must be bigger than or equal to 0.');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Postal code (max. 50 characters)
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling Person., must be smaller than or equal to 10.');
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling Person., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Country code, ISO 3166-1 alpha-3 compliant and case sensitive (ONLY the defined ISO codes are accepted)
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $allowedValues = $this->getCountryCodeAllowableValues();
        if (!is_null($country_code) && !in_array($country_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'country_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($country_code) && (mb_strlen($country_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling Person., must be smaller than or equal to 3.');
        }
        if (!is_null($country_code) && (mb_strlen($country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling Person., must be bigger than or equal to 0.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City (max. 50 characters)
     *
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Person., must be smaller than or equal to 50.');
        }
        if (!is_null($city) && (mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Person., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comment (max. 500 characters)
     *
     * @return $this
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 500)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling Person., must be smaller than or equal to 500.');
        }
        if (!is_null($comment) && (mb_strlen($comment) < 0)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling Person., must be bigger than or equal to 0.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets correspondence_language_code
     *
     * @return string
     */
    public function getCorrespondenceLanguageCode()
    {
        return $this->container['correspondence_language_code'];
    }

    /**
     * Sets correspondence_language_code
     *
     * @param string $correspondence_language_code Language code for correspondences, IETF bcp47 compliant and case sensitive (ONLY the 11 defined language tags are accepted)
     *
     * @return $this
     */
    public function setCorrespondenceLanguageCode($correspondence_language_code)
    {
        $allowedValues = $this->getCorrespondenceLanguageCodeAllowableValues();
        if (!in_array($correspondence_language_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'correspondence_language_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($correspondence_language_code) > 5)) {
            throw new \InvalidArgumentException('invalid length for $correspondence_language_code when calling Person., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($correspondence_language_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $correspondence_language_code when calling Person., must be bigger than or equal to 0.');
        }

        $this->container['correspondence_language_code'] = $correspondence_language_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


