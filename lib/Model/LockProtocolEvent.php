<?php
/**
 * LockProtocolEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v14.40.2
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LockProtocolEvent Class Doc Comment
 *
 * @category Class
 * @description Model that describes the type of a protocol entry event associated with a lock defined in the access control system.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LockProtocolEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LockProtocolEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'translations' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'translations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'translations' => 'translations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'translations' => 'setTranslations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'translations' => 'getTranslations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_UNLOCKING_SUCCESSFUL = 'UNLOCKING_SUCCESSFUL';
    const TYPE_UNLOCKING_SUCCESSFUL_VIA_HANDS_FREE = 'UNLOCKING_SUCCESSFUL_VIA_HANDS_FREE';
    const TYPE_UNLOCKING_FAILED = 'UNLOCKING_FAILED';
    const TYPE_UNLOCKING_FAILED_BLACKLISTED = 'UNLOCKING_FAILED_BLACKLISTED';
    const TYPE_UNLOCKING_FAILED_NOT_WHITELISTED = 'UNLOCKING_FAILED_NOT_WHITELISTED';
    const TYPE_UNLOCKING_FAILED_CYLINDER_TIME_OUT_OF_SYNC = 'UNLOCKING_FAILED_CYLINDER_TIME_OUT_OF_SYNC';
    const TYPE_UNLOCKING_FAILED_AUTHORIZATION_SIGNATURE_INVALID = 'UNLOCKING_FAILED_AUTHORIZATION_SIGNATURE_INVALID';
    const TYPE_UNLOCKING_FAILED_HOLIDAY_CALENDAR_ACTIVE = 'UNLOCKING_FAILED_HOLIDAY_CALENDAR_ACTIVE';
    const TYPE_CYLINDER_SYNCHRONIZATION_VIA_CARD_READER = 'CYLINDER_SYNCHRONIZATION_VIA_CARD_READER';
    const TYPE_CYLINDER_SYNCHRONIZATION_VIA_CARD_READER_FAILED = 'CYLINDER_SYNCHRONIZATION_VIA_CARD_READER_FAILED';
    const TYPE_CYLINDER_SYNCHRONIZATION_VIA_OTA = 'CYLINDER_SYNCHRONIZATION_VIA_OTA';
    const TYPE_CYLINDER_SYNCHRONIZATION_VIA_OTA_FAILED = 'CYLINDER_SYNCHRONIZATION_VIA_OTA_FAILED';
    const TYPE_CYLINDER_SYNCHRONIZATION_VIA_OTA_AFTER_UNLOCK = 'CYLINDER_SYNCHRONIZATION_VIA_OTA_AFTER_UNLOCK';
    const TYPE_CYLINDER_SYNCHRONIZATION_BY_SUPPORT = 'CYLINDER_SYNCHRONIZATION_BY_SUPPORT';
    const TYPE_CYLINDER_SYNCHRONIZATION_BY_SUPPORT_FAILED = 'CYLINDER_SYNCHRONIZATION_BY_SUPPORT_FAILED';
    const TYPE_KEY_RING_SYNCHRONIZATION_VIA_CARD_READER = 'KEY_RING_SYNCHRONIZATION_VIA_CARD_READER';
    const TYPE_KEY_RING_SYNCHRONIZATION_VIA_CARD_READER_FAILED = 'KEY_RING_SYNCHRONIZATION_VIA_CARD_READER_FAILED';
    const TYPE_KEY_RING_SYNCHRONIZATION_VIA_OTA = 'KEY_RING_SYNCHRONIZATION_VIA_OTA';
    const TYPE_KEY_RING_SYNCHRONIZATION_VIA_OTA_FAILED = 'KEY_RING_SYNCHRONIZATION_VIA_OTA_FAILED';
    const TYPE_CREATE_MOBILE_PHONE = 'CREATE_MOBILE_PHONE';
    const TYPE_DELETE_MOBILE_PHONE = 'DELETE_MOBILE_PHONE';
    const TYPE_ASSIGN_KEY_CARD_TO_CUSTOMER_VIA_CARD_READER = 'ASSIGN_KEY_CARD_TO_CUSTOMER_VIA_CARD_READER';
    const TYPE_ASSIGN_KEY_CARD_TO_CUSTOMER_VIA_OTA = 'ASSIGN_KEY_CARD_TO_CUSTOMER_VIA_OTA';
    const TYPE_REMOVE_KEY_CARD_FROM_CUSTOMER_VIA_CARD_READER = 'REMOVE_KEY_CARD_FROM_CUSTOMER_VIA_CARD_READER';
    const TYPE_REMOVE_KEY_CARD_FROM_CUSTOMER_VIA_OTA = 'REMOVE_KEY_CARD_FROM_CUSTOMER_VIA_OTA';
    const TYPE_DEACTIVATION_INITIATED = 'DEACTIVATION_INITIATED';
    const TYPE_DEACTIVATION_COMPLETED = 'DEACTIVATION_COMPLETED';
    const TYPE_DEACTIVATION_COMPLETED_BY_SUPPORT = 'DEACTIVATION_COMPLETED_BY_SUPPORT';
    const TYPE_DEACTIVATION_COMPLETED_IMMEDIATELY = 'DEACTIVATION_COMPLETED_IMMEDIATELY';
    const TYPE_REACTIVATION_INITIATED = 'REACTIVATION_INITIATED';
    const TYPE_REACTIVATION_COMPLETED = 'REACTIVATION_COMPLETED';
    const TYPE_REACTIVATION_COMPLETED_BY_SUPPORT = 'REACTIVATION_COMPLETED_BY_SUPPORT';
    const TYPE_MOBILE_PHONE_PAIRING_FINALIZED = 'MOBILE_PHONE_PAIRING_FINALIZED';
    const TYPE_MOBILE_PHONE_RE_PAIRING_FINALIZED = 'MOBILE_PHONE_RE_PAIRING_FINALIZED';
    const TYPE_KEYRING_CAP_FILE_UPDATED_VIA_CARD_READER = 'KEYRING_CAP_FILE_UPDATED_VIA_CARD_READER';
    const TYPE_KEYRING_CAP_FILE_UPDATED_VIA_OTA = 'KEYRING_CAP_FILE_UPDATED_VIA_OTA';
    const TYPE_KEYRING_CAP_FILE_UPDATE_VIA_CARD_READER_FAILED = 'KEYRING_CAP_FILE_UPDATE_VIA_CARD_READER_FAILED';
    const TYPE_KEYRING_CAP_FILE_UPDATE_VIA_OTA_FAILED = 'KEYRING_CAP_FILE_UPDATE_VIA_OTA_FAILED';
    const TYPE_PIN_PROTECTION_ACTIVATED = 'PIN_PROTECTION_ACTIVATED';
    const TYPE_PIN_PROTECTION_DEACTIVATED = 'PIN_PROTECTION_DEACTIVATED';
    const TYPE_CYLINDER_ASSIGNED_TO_CUSTOMER_VIA_CARD_READER = 'CYLINDER_ASSIGNED_TO_CUSTOMER_VIA_CARD_READER';
    const TYPE_CYLINDER_ASSIGNED_TO_CUSTOMER_VIA_OTA = 'CYLINDER_ASSIGNED_TO_CUSTOMER_VIA_OTA';
    const TYPE_CYLINDER_REMOVED_FROM_CUSTOMER_VIA_CARD_READER = 'CYLINDER_REMOVED_FROM_CUSTOMER_VIA_CARD_READER';
    const TYPE_CYLINDER_REMOVED_FROM_CUSTOMER_VIA_OTA = 'CYLINDER_REMOVED_FROM_CUSTOMER_VIA_OTA';
    const TYPE_SHARED_CYLINDER_CODE_REDEEMED = 'SHARED_CYLINDER_CODE_REDEEMED';
    const TYPE_CYLINDER_FIRMWARE_UPDATED_VIA_OTA = 'CYLINDER_FIRMWARE_UPDATED_VIA_OTA';
    const TYPE_CYLINDER_FIRMWARE_UPDATED_VIA_CARD_READER = 'CYLINDER_FIRMWARE_UPDATED_VIA_CARD_READER';
    const TYPE_CYLINDER_FIRMWARE_UPDATED_BY_SUPPORT = 'CYLINDER_FIRMWARE_UPDATED_BY_SUPPORT';
    const TYPE_CYLINDER_FIRMWARE_UPDATED_PARTIALLY_VIA_OTA = 'CYLINDER_FIRMWARE_UPDATED_PARTIALLY_VIA_OTA';
    const TYPE_CYLINDER_FIRMWARE_UPDATED_PARTIALLY_VIA_CARD_READER = 'CYLINDER_FIRMWARE_UPDATED_PARTIALLY_VIA_CARD_READER';
    const TYPE_CYLINDER_FIRMWARE_UPDATED_PARTIALLY_BY_SUPPORT = 'CYLINDER_FIRMWARE_UPDATED_PARTIALLY_BY_SUPPORT';
    const TYPE_CYLINDER_FIRMWARE_UPDATE_VIA_OTA_FAILED = 'CYLINDER_FIRMWARE_UPDATE_VIA_OTA_FAILED';
    const TYPE_CYLINDER_FIRMWARE_UPDATE_VIA_CARD_READER_FAILED = 'CYLINDER_FIRMWARE_UPDATE_VIA_CARD_READER_FAILED';
    const TYPE_CYLINDER_FIRMWARE_UPDATE_FAILED_BY_SUPPORT = 'CYLINDER_FIRMWARE_UPDATE_FAILED_BY_SUPPORT';
    const TYPE_CYLINDER_REPLACED_VIA_OTA = 'CYLINDER_REPLACED_VIA_OTA';
    const TYPE_CYLINDER_REPLACED_VIA_CARD_READER = 'CYLINDER_REPLACED_VIA_CARD_READER';
    const TYPE_CYLINDER_REPLACEMENT_VIA_OTA_FAILED = 'CYLINDER_REPLACEMENT_VIA_OTA_FAILED';
    const TYPE_CYLINDER_REPLACEMENT_VIA_CARD_READER_FAILED = 'CYLINDER_REPLACEMENT_VIA_CARD_READER_FAILED';
    const TYPE_CYLINDER_INSTALLED_VIA_OTA = 'CYLINDER_INSTALLED_VIA_OTA';
    const TYPE_CYLINDER_INSTALLED_VIA_CARD_READER = 'CYLINDER_INSTALLED_VIA_CARD_READER';
    const TYPE_CYLINDER_INSTALLATION_VIA_OTA_FAILED = 'CYLINDER_INSTALLATION_VIA_OTA_FAILED';
    const TYPE_CYLINDER_INSTALLATION_VIA_CARD_READER_FAILED = 'CYLINDER_INSTALLATION_VIA_CARD_READER_FAILED';
    const TYPE_KNOB_REPLACED_VIA_OTA = 'KNOB_REPLACED_VIA_OTA';
    const TYPE_KNOB_REPLACED_VIA_CARD_READER = 'KNOB_REPLACED_VIA_CARD_READER';
    const TYPE_KNOB_REPLACEMENT_VIA_OTA_FAILED = 'KNOB_REPLACEMENT_VIA_OTA_FAILED';
    const TYPE_KNOB_REPLACEMENT_VIA_CARD_READER_FAILED = 'KNOB_REPLACEMENT_VIA_CARD_READER_FAILED';
    const TYPE_KNOB_INSTALLED_VIA_OTA = 'KNOB_INSTALLED_VIA_OTA';
    const TYPE_KNOB_INSTALLED_VIA_CARD_READER = 'KNOB_INSTALLED_VIA_CARD_READER';
    const TYPE_KNOB_INSTALLATION_VIA_OTA_FAILED = 'KNOB_INSTALLATION_VIA_OTA_FAILED';
    const TYPE_KNOB_INSTALLATION_VIA_CARD_READER_FAILED = 'KNOB_INSTALLATION_VIA_CARD_READER_FAILED';
    const TYPE_REPLACEMENT_VIA_OTA_FAILED = 'REPLACEMENT_VIA_OTA_FAILED';
    const TYPE_REPLACEMENT_VIA_CARD_READER_FAILED = 'REPLACEMENT_VIA_CARD_READER_FAILED';
    const TYPE_FAULTY_CYLINDER_REMOVED_VIA_APP = 'FAULTY_CYLINDER_REMOVED_VIA_APP';
    const TYPE_FAULTY_CYLINDER_REMOVED_VIA_BROWSER = 'FAULTY_CYLINDER_REMOVED_VIA_BROWSER';
    const TYPE_FAULTY_CYLINDER_REMOVAL_VIA_APP_FAILED = 'FAULTY_CYLINDER_REMOVAL_VIA_APP_FAILED';
    const TYPE_CYLINDER_SYNCHRONIZATION_AS_PROXY_APP = 'CYLINDER_SYNCHRONIZATION_AS_PROXY_APP';
    const TYPE_CYLINDER_SYNCHRONIZATION_AS_PROXY_APP_FAILED = 'CYLINDER_SYNCHRONIZATION_AS_PROXY_APP_FAILED';
    const TYPE_KEY_RING_SYNCHRONIZATION_AS_PROXY_APP = 'KEY_RING_SYNCHRONIZATION_AS_PROXY_APP';
    const TYPE_KEY_RING_SYNCHRONIZATION_AS_PROXY_APP_FAILED = 'KEY_RING_SYNCHRONIZATION_AS_PROXY_APP_FAILED';
    const TYPE_CYLINDER_ASSIGNED_TO_CUSTOMER_AS_PROXY_APP = 'CYLINDER_ASSIGNED_TO_CUSTOMER_AS_PROXY_APP';
    const TYPE_KEY_CARD_ASSIGNED_TO_CUSTOMER_AS_PROXY_APP = 'KEY_CARD_ASSIGNED_TO_CUSTOMER_AS_PROXY_APP';
    const TYPE_CYLINDER_REMOVED_FROM_CUSTOMER_AS_PROXY_APP = 'CYLINDER_REMOVED_FROM_CUSTOMER_AS_PROXY_APP';
    const TYPE_KEY_CARD_REMOVED_FROM_CUSTOMER_AS_PROXY_APP = 'KEY_CARD_REMOVED_FROM_CUSTOMER_AS_PROXY_APP';
    const TYPE_MEDIUM_REMOVED_MANUALLY = 'MEDIUM_REMOVED_MANUALLY';
    const TYPE_MEDIUM_MARKED_FOR_REMOVAL = 'MEDIUM_MARKED_FOR_REMOVAL';
    const TYPE_KEYRING_CAP_FILE_UPDATED_AS_PROXY_APP = 'KEYRING_CAP_FILE_UPDATED_AS_PROXY_APP';
    const TYPE_KEYRING_CAP_FILE_UPDATE_FAILED_AS_PROXY_APP = 'KEYRING_CAP_FILE_UPDATE_FAILED_AS_PROXY_APP';
    const TYPE_CYLINDER_FIRMWARE_UPDATED_AS_PROXY_APP = 'CYLINDER_FIRMWARE_UPDATED_AS_PROXY_APP';
    const TYPE_CYLINDER_FIRMWARE_UPDATED_PARTIALLY_AS_PROXY_APP = 'CYLINDER_FIRMWARE_UPDATED_PARTIALLY_AS_PROXY_APP';
    const TYPE_CYLINDER_FIRMWARE_UPDATE_FAILED_AS_PROXY_APP = 'CYLINDER_FIRMWARE_UPDATE_FAILED_AS_PROXY_APP';
    const TYPE_CYLINDER_REPLACED_AS_PROXY_APP = 'CYLINDER_REPLACED_AS_PROXY_APP';
    const TYPE_CYLINDER_REPLACEMENT_FAILED_AS_PROXY_APP = 'CYLINDER_REPLACEMENT_FAILED_AS_PROXY_APP';
    const TYPE_CYLINDER_INSTALLED_AS_PROXY_APP = 'CYLINDER_INSTALLED_AS_PROXY_APP';
    const TYPE_CYLINDER_INSTALLATION_FAILED_AS_PROXY_APP = 'CYLINDER_INSTALLATION_FAILED_AS_PROXY_APP';
    const TYPE_KNOB_REPLACED_AS_PROXY_APP = 'KNOB_REPLACED_AS_PROXY_APP';
    const TYPE_KNOB_REPLACEMENT_FAILED_AS_PROXY_APP = 'KNOB_REPLACEMENT_FAILED_AS_PROXY_APP';
    const TYPE_KNOB_INSTALLED_AS_PROXY_APP = 'KNOB_INSTALLED_AS_PROXY_APP';
    const TYPE_KNOB_INSTALLATION_FAILED_AS_PROXY_APP = 'KNOB_INSTALLATION_FAILED_AS_PROXY_APP';
    const TYPE_REPLACEMENT_FAILED_AS_PROXY_APP = 'REPLACEMENT_FAILED_AS_PROXY_APP';
    const TYPE_FAULTY_CYLINDER_REMOVED_AS_PROXY_APP = 'FAULTY_CYLINDER_REMOVED_AS_PROXY_APP';
    const TYPE_FAULTY_CYLINDER_REMOVAL_FAILED_AS_PROXY_APP = 'FAULTY_CYLINDER_REMOVAL_FAILED_AS_PROXY_APP';
    const TYPE_DEACTIVATION_COMPLETED_AS_PROXY_APP = 'DEACTIVATION_COMPLETED_AS_PROXY_APP';
    const TYPE_REACTIVATION_COMPLETED_AS_PROXY_APP = 'REACTIVATION_COMPLETED_AS_PROXY_APP';
    const TYPE_CYLINDER_LOG_OVERFLOW_POSSIBLE = 'CYLINDER_LOG_OVERFLOW_POSSIBLE';
    const TYPE_MANUAL_PERMANENT_OPENING_STARTED = 'MANUAL_PERMANENT_OPENING_STARTED';
    const TYPE_MANUAL_PERMANENT_OPENING_STOPPED_MANUALLY = 'MANUAL_PERMANENT_OPENING_STOPPED_MANUALLY';
    const TYPE_MANUAL_PERMANENT_OPENING_STOPPED_AUTOMATICALLY = 'MANUAL_PERMANENT_OPENING_STOPPED_AUTOMATICALLY';
    const TYPE_MANUAL_PERMANENT_OPENING_STOPPED_WEAK_BATTERY = 'MANUAL_PERMANENT_OPENING_STOPPED_WEAK_BATTERY';
    const TYPE_MANUAL_PERMANENT_OPENING_STOPPED_WRONG_TIME = 'MANUAL_PERMANENT_OPENING_STOPPED_WRONG_TIME';
    const TYPE_AUTOMATIC_PERMANENT_OPENING_STARTED = 'AUTOMATIC_PERMANENT_OPENING_STARTED';
    const TYPE_AUTOMATIC_PERMANENT_OPENING_STOPPED_MANUALLY = 'AUTOMATIC_PERMANENT_OPENING_STOPPED_MANUALLY';
    const TYPE_AUTOMATIC_PERMANENT_OPENING_STOPPED_AUTOMATICALLY = 'AUTOMATIC_PERMANENT_OPENING_STOPPED_AUTOMATICALLY';
    const TYPE_AUTOMATIC_PERMANENT_OPENING_STOPPED_WEAK_BATTERY = 'AUTOMATIC_PERMANENT_OPENING_STOPPED_WEAK_BATTERY';
    const TYPE_AUTOMATIC_PERMANENT_OPENING_STOPPED_WRONG_TIME = 'AUTOMATIC_PERMANENT_OPENING_STOPPED_WRONG_TIME';
    const TYPE_AUTOMATIC_PERMANENT_OPENING_STOPPED_HOLIDAY_BEGIN = 'AUTOMATIC_PERMANENT_OPENING_STOPPED_HOLIDAY_BEGIN';
    const TYPE_UNKNOWN_PERMANENT_OPENING_ACTION = 'UNKNOWN_PERMANENT_OPENING_ACTION';
    const TYPE_MANUAL_PERMANENT_OPENING_STOPPED_DUE_TO_FIRMWARE_UPDATE = 'MANUAL_PERMANENT_OPENING_STOPPED_DUE_TO_FIRMWARE_UPDATE';
    const TYPE_AUTOMATIC_PERMANENT_OPENING_STOPPED_DUE_TO_FIRMWARE_UPDATE = 'AUTOMATIC_PERMANENT_OPENING_STOPPED_DUE_TO_FIRMWARE_UPDATE';
    const TYPE_PRODUCTION_DUMMY_RECORD = 'PRODUCTION_DUMMY_RECORD';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_UNLOCKING_SUCCESSFUL,
            self::TYPE_UNLOCKING_SUCCESSFUL_VIA_HANDS_FREE,
            self::TYPE_UNLOCKING_FAILED,
            self::TYPE_UNLOCKING_FAILED_BLACKLISTED,
            self::TYPE_UNLOCKING_FAILED_NOT_WHITELISTED,
            self::TYPE_UNLOCKING_FAILED_CYLINDER_TIME_OUT_OF_SYNC,
            self::TYPE_UNLOCKING_FAILED_AUTHORIZATION_SIGNATURE_INVALID,
            self::TYPE_UNLOCKING_FAILED_HOLIDAY_CALENDAR_ACTIVE,
            self::TYPE_CYLINDER_SYNCHRONIZATION_VIA_CARD_READER,
            self::TYPE_CYLINDER_SYNCHRONIZATION_VIA_CARD_READER_FAILED,
            self::TYPE_CYLINDER_SYNCHRONIZATION_VIA_OTA,
            self::TYPE_CYLINDER_SYNCHRONIZATION_VIA_OTA_FAILED,
            self::TYPE_CYLINDER_SYNCHRONIZATION_VIA_OTA_AFTER_UNLOCK,
            self::TYPE_CYLINDER_SYNCHRONIZATION_BY_SUPPORT,
            self::TYPE_CYLINDER_SYNCHRONIZATION_BY_SUPPORT_FAILED,
            self::TYPE_KEY_RING_SYNCHRONIZATION_VIA_CARD_READER,
            self::TYPE_KEY_RING_SYNCHRONIZATION_VIA_CARD_READER_FAILED,
            self::TYPE_KEY_RING_SYNCHRONIZATION_VIA_OTA,
            self::TYPE_KEY_RING_SYNCHRONIZATION_VIA_OTA_FAILED,
            self::TYPE_CREATE_MOBILE_PHONE,
            self::TYPE_DELETE_MOBILE_PHONE,
            self::TYPE_ASSIGN_KEY_CARD_TO_CUSTOMER_VIA_CARD_READER,
            self::TYPE_ASSIGN_KEY_CARD_TO_CUSTOMER_VIA_OTA,
            self::TYPE_REMOVE_KEY_CARD_FROM_CUSTOMER_VIA_CARD_READER,
            self::TYPE_REMOVE_KEY_CARD_FROM_CUSTOMER_VIA_OTA,
            self::TYPE_DEACTIVATION_INITIATED,
            self::TYPE_DEACTIVATION_COMPLETED,
            self::TYPE_DEACTIVATION_COMPLETED_BY_SUPPORT,
            self::TYPE_DEACTIVATION_COMPLETED_IMMEDIATELY,
            self::TYPE_REACTIVATION_INITIATED,
            self::TYPE_REACTIVATION_COMPLETED,
            self::TYPE_REACTIVATION_COMPLETED_BY_SUPPORT,
            self::TYPE_MOBILE_PHONE_PAIRING_FINALIZED,
            self::TYPE_MOBILE_PHONE_RE_PAIRING_FINALIZED,
            self::TYPE_KEYRING_CAP_FILE_UPDATED_VIA_CARD_READER,
            self::TYPE_KEYRING_CAP_FILE_UPDATED_VIA_OTA,
            self::TYPE_KEYRING_CAP_FILE_UPDATE_VIA_CARD_READER_FAILED,
            self::TYPE_KEYRING_CAP_FILE_UPDATE_VIA_OTA_FAILED,
            self::TYPE_PIN_PROTECTION_ACTIVATED,
            self::TYPE_PIN_PROTECTION_DEACTIVATED,
            self::TYPE_CYLINDER_ASSIGNED_TO_CUSTOMER_VIA_CARD_READER,
            self::TYPE_CYLINDER_ASSIGNED_TO_CUSTOMER_VIA_OTA,
            self::TYPE_CYLINDER_REMOVED_FROM_CUSTOMER_VIA_CARD_READER,
            self::TYPE_CYLINDER_REMOVED_FROM_CUSTOMER_VIA_OTA,
            self::TYPE_SHARED_CYLINDER_CODE_REDEEMED,
            self::TYPE_CYLINDER_FIRMWARE_UPDATED_VIA_OTA,
            self::TYPE_CYLINDER_FIRMWARE_UPDATED_VIA_CARD_READER,
            self::TYPE_CYLINDER_FIRMWARE_UPDATED_BY_SUPPORT,
            self::TYPE_CYLINDER_FIRMWARE_UPDATED_PARTIALLY_VIA_OTA,
            self::TYPE_CYLINDER_FIRMWARE_UPDATED_PARTIALLY_VIA_CARD_READER,
            self::TYPE_CYLINDER_FIRMWARE_UPDATED_PARTIALLY_BY_SUPPORT,
            self::TYPE_CYLINDER_FIRMWARE_UPDATE_VIA_OTA_FAILED,
            self::TYPE_CYLINDER_FIRMWARE_UPDATE_VIA_CARD_READER_FAILED,
            self::TYPE_CYLINDER_FIRMWARE_UPDATE_FAILED_BY_SUPPORT,
            self::TYPE_CYLINDER_REPLACED_VIA_OTA,
            self::TYPE_CYLINDER_REPLACED_VIA_CARD_READER,
            self::TYPE_CYLINDER_REPLACEMENT_VIA_OTA_FAILED,
            self::TYPE_CYLINDER_REPLACEMENT_VIA_CARD_READER_FAILED,
            self::TYPE_CYLINDER_INSTALLED_VIA_OTA,
            self::TYPE_CYLINDER_INSTALLED_VIA_CARD_READER,
            self::TYPE_CYLINDER_INSTALLATION_VIA_OTA_FAILED,
            self::TYPE_CYLINDER_INSTALLATION_VIA_CARD_READER_FAILED,
            self::TYPE_KNOB_REPLACED_VIA_OTA,
            self::TYPE_KNOB_REPLACED_VIA_CARD_READER,
            self::TYPE_KNOB_REPLACEMENT_VIA_OTA_FAILED,
            self::TYPE_KNOB_REPLACEMENT_VIA_CARD_READER_FAILED,
            self::TYPE_KNOB_INSTALLED_VIA_OTA,
            self::TYPE_KNOB_INSTALLED_VIA_CARD_READER,
            self::TYPE_KNOB_INSTALLATION_VIA_OTA_FAILED,
            self::TYPE_KNOB_INSTALLATION_VIA_CARD_READER_FAILED,
            self::TYPE_REPLACEMENT_VIA_OTA_FAILED,
            self::TYPE_REPLACEMENT_VIA_CARD_READER_FAILED,
            self::TYPE_FAULTY_CYLINDER_REMOVED_VIA_APP,
            self::TYPE_FAULTY_CYLINDER_REMOVED_VIA_BROWSER,
            self::TYPE_FAULTY_CYLINDER_REMOVAL_VIA_APP_FAILED,
            self::TYPE_CYLINDER_SYNCHRONIZATION_AS_PROXY_APP,
            self::TYPE_CYLINDER_SYNCHRONIZATION_AS_PROXY_APP_FAILED,
            self::TYPE_KEY_RING_SYNCHRONIZATION_AS_PROXY_APP,
            self::TYPE_KEY_RING_SYNCHRONIZATION_AS_PROXY_APP_FAILED,
            self::TYPE_CYLINDER_ASSIGNED_TO_CUSTOMER_AS_PROXY_APP,
            self::TYPE_KEY_CARD_ASSIGNED_TO_CUSTOMER_AS_PROXY_APP,
            self::TYPE_CYLINDER_REMOVED_FROM_CUSTOMER_AS_PROXY_APP,
            self::TYPE_KEY_CARD_REMOVED_FROM_CUSTOMER_AS_PROXY_APP,
            self::TYPE_MEDIUM_REMOVED_MANUALLY,
            self::TYPE_MEDIUM_MARKED_FOR_REMOVAL,
            self::TYPE_KEYRING_CAP_FILE_UPDATED_AS_PROXY_APP,
            self::TYPE_KEYRING_CAP_FILE_UPDATE_FAILED_AS_PROXY_APP,
            self::TYPE_CYLINDER_FIRMWARE_UPDATED_AS_PROXY_APP,
            self::TYPE_CYLINDER_FIRMWARE_UPDATED_PARTIALLY_AS_PROXY_APP,
            self::TYPE_CYLINDER_FIRMWARE_UPDATE_FAILED_AS_PROXY_APP,
            self::TYPE_CYLINDER_REPLACED_AS_PROXY_APP,
            self::TYPE_CYLINDER_REPLACEMENT_FAILED_AS_PROXY_APP,
            self::TYPE_CYLINDER_INSTALLED_AS_PROXY_APP,
            self::TYPE_CYLINDER_INSTALLATION_FAILED_AS_PROXY_APP,
            self::TYPE_KNOB_REPLACED_AS_PROXY_APP,
            self::TYPE_KNOB_REPLACEMENT_FAILED_AS_PROXY_APP,
            self::TYPE_KNOB_INSTALLED_AS_PROXY_APP,
            self::TYPE_KNOB_INSTALLATION_FAILED_AS_PROXY_APP,
            self::TYPE_REPLACEMENT_FAILED_AS_PROXY_APP,
            self::TYPE_FAULTY_CYLINDER_REMOVED_AS_PROXY_APP,
            self::TYPE_FAULTY_CYLINDER_REMOVAL_FAILED_AS_PROXY_APP,
            self::TYPE_DEACTIVATION_COMPLETED_AS_PROXY_APP,
            self::TYPE_REACTIVATION_COMPLETED_AS_PROXY_APP,
            self::TYPE_CYLINDER_LOG_OVERFLOW_POSSIBLE,
            self::TYPE_MANUAL_PERMANENT_OPENING_STARTED,
            self::TYPE_MANUAL_PERMANENT_OPENING_STOPPED_MANUALLY,
            self::TYPE_MANUAL_PERMANENT_OPENING_STOPPED_AUTOMATICALLY,
            self::TYPE_MANUAL_PERMANENT_OPENING_STOPPED_WEAK_BATTERY,
            self::TYPE_MANUAL_PERMANENT_OPENING_STOPPED_WRONG_TIME,
            self::TYPE_AUTOMATIC_PERMANENT_OPENING_STARTED,
            self::TYPE_AUTOMATIC_PERMANENT_OPENING_STOPPED_MANUALLY,
            self::TYPE_AUTOMATIC_PERMANENT_OPENING_STOPPED_AUTOMATICALLY,
            self::TYPE_AUTOMATIC_PERMANENT_OPENING_STOPPED_WEAK_BATTERY,
            self::TYPE_AUTOMATIC_PERMANENT_OPENING_STOPPED_WRONG_TIME,
            self::TYPE_AUTOMATIC_PERMANENT_OPENING_STOPPED_HOLIDAY_BEGIN,
            self::TYPE_UNKNOWN_PERMANENT_OPENING_ACTION,
            self::TYPE_MANUAL_PERMANENT_OPENING_STOPPED_DUE_TO_FIRMWARE_UPDATE,
            self::TYPE_AUTOMATIC_PERMANENT_OPENING_STOPPED_DUE_TO_FIRMWARE_UPDATE,
            self::TYPE_PRODUCTION_DUMMY_RECORD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['translations'] = isset($data['translations']) ? $data['translations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of event
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return map[string,string]
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param map[string,string] $translations Event type translations comprising all requested languages (default only \"de-DE\")
     *
     * @return $this
     */
    public function setTranslations($translations)
    {
        $this->container['translations'] = $translations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


