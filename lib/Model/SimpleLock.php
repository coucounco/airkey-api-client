<?php
/**
 * SimpleLock
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v14.40.2
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SimpleLock Class Doc Comment
 *
 * @category Class
 * @description Model that describes a lock in a simple form defined in the access control system.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SimpleLock implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SimpleLock';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'lock_type' => 'string',
        'lock_identifier' => 'string',
        'name' => 'string',
        'additional_information' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'lock_type' => null,
        'lock_identifier' => null,
        'name' => null,
        'additional_information' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'lock_type' => 'lockType',
        'lock_identifier' => 'lockIdentifier',
        'name' => 'name',
        'additional_information' => 'additionalInformation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'lock_type' => 'setLockType',
        'lock_identifier' => 'setLockIdentifier',
        'name' => 'setName',
        'additional_information' => 'setAdditionalInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'lock_type' => 'getLockType',
        'lock_identifier' => 'getLockIdentifier',
        'name' => 'getName',
        'additional_information' => 'getAdditionalInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOCK_TYPE_CYLINDER = 'CYLINDER';
    const LOCK_TYPE_WALLREADER = 'WALLREADER';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLockTypeAllowableValues()
    {
        return [
            self::LOCK_TYPE_CYLINDER,
            self::LOCK_TYPE_WALLREADER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lock_type'] = isset($data['lock_type']) ? $data['lock_type'] : null;
        $this->container['lock_identifier'] = isset($data['lock_identifier']) ? $data['lock_identifier'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['additional_information'] = isset($data['additional_information']) ? $data['additional_information'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        $allowedValues = $this->getLockTypeAllowableValues();
        if (!is_null($this->container['lock_type']) && !in_array($this->container['lock_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lock_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['lock_identifier']) && (mb_strlen($this->container['lock_identifier']) > 16)) {
            $invalidProperties[] = "invalid value for 'lock_identifier', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['lock_identifier']) && (mb_strlen($this->container['lock_identifier']) < 0)) {
            $invalidProperties[] = "invalid value for 'lock_identifier', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['additional_information']) && (mb_strlen($this->container['additional_information']) > 50)) {
            $invalidProperties[] = "invalid value for 'additional_information', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['additional_information']) && (mb_strlen($this->container['additional_information']) < 0)) {
            $invalidProperties[] = "invalid value for 'additional_information', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lock_type
     *
     * @return string
     */
    public function getLockType()
    {
        return $this->container['lock_type'];
    }

    /**
     * Sets lock_type
     *
     * @param string $lock_type Type of lock
     *
     * @return $this
     */
    public function setLockType($lock_type)
    {
        $allowedValues = $this->getLockTypeAllowableValues();
        if (!is_null($lock_type) && !in_array($lock_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lock_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lock_type'] = $lock_type;

        return $this;
    }

    /**
     * Gets lock_identifier
     *
     * @return string
     */
    public function getLockIdentifier()
    {
        return $this->container['lock_identifier'];
    }

    /**
     * Sets lock_identifier
     *
     * @param string $lock_identifier Identifier of the lock
     *
     * @return $this
     */
    public function setLockIdentifier($lock_identifier)
    {
        if (!is_null($lock_identifier) && (mb_strlen($lock_identifier) > 16)) {
            throw new \InvalidArgumentException('invalid length for $lock_identifier when calling SimpleLock., must be smaller than or equal to 16.');
        }
        if (!is_null($lock_identifier) && (mb_strlen($lock_identifier) < 0)) {
            throw new \InvalidArgumentException('invalid length for $lock_identifier when calling SimpleLock., must be bigger than or equal to 0.');
        }

        $this->container['lock_identifier'] = $lock_identifier;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the lock
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SimpleLock., must be smaller than or equal to 50.');
        }
        if (!is_null($name) && (mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SimpleLock., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets additional_information
     *
     * @return string
     */
    public function getAdditionalInformation()
    {
        return $this->container['additional_information'];
    }

    /**
     * Sets additional_information
     *
     * @param string $additional_information Additional information about the lock
     *
     * @return $this
     */
    public function setAdditionalInformation($additional_information)
    {
        if (!is_null($additional_information) && (mb_strlen($additional_information) > 50)) {
            throw new \InvalidArgumentException('invalid length for $additional_information when calling SimpleLock., must be smaller than or equal to 50.');
        }
        if (!is_null($additional_information) && (mb_strlen($additional_information) < 0)) {
            throw new \InvalidArgumentException('invalid length for $additional_information when calling SimpleLock., must be bigger than or equal to 0.');
        }

        $this->container['additional_information'] = $additional_information;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


