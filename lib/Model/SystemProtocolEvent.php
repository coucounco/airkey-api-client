<?php
/**
 * SystemProtocolEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v14.40.2
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SystemProtocolEvent Class Doc Comment
 *
 * @category Class
 * @description Model that describes the type of a system protocol entry event defined in the access control system.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SystemProtocolEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SystemProtocolEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'translations' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'translations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'translations' => 'translations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'translations' => 'setTranslations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'translations' => 'getTranslations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_CREATE_KEYRING = 'CREATE_KEYRING';
    const TYPE_EDIT_CYLINDER = 'EDIT_CYLINDER';
    const TYPE_EDIT_KEYRING = 'EDIT_KEYRING';
    const TYPE_CHANGE_KEYRING_OWNER = 'CHANGE_KEYRING_OWNER';
    const TYPE_REVOKE_KEYRING_OWNER = 'REVOKE_KEYRING_OWNER';
    const TYPE_CREATE_AUTHORIZATION_KEY = 'CREATE_AUTHORIZATION_KEY';
    const TYPE_EDIT_AUTHORIZATION_KEY = 'EDIT_AUTHORIZATION_KEY';
    const TYPE_DELETE_AUTHORIZATION_KEY_IN_STATE_CREATE = 'DELETE_AUTHORIZATION_KEY_IN_STATE_CREATE';
    const TYPE_MARK_AUTHORIZATION_KEY_AS_DELETED = 'MARK_AUTHORIZATION_KEY_AS_DELETED';
    const TYPE_UNDELETE_AUTHORIZATION_KEY = 'UNDELETE_AUTHORIZATION_KEY';
    const TYPE_CREATE_PERSON = 'CREATE_PERSON';
    const TYPE_EDIT_PERSON = 'EDIT_PERSON';
    const TYPE_DELETE_PERSON = 'DELETE_PERSON';
    const TYPE_CREATE_AREA = 'CREATE_AREA';
    const TYPE_EDIT_AREA = 'EDIT_AREA';
    const TYPE_DELETE_AREA = 'DELETE_AREA';
    const TYPE_ASSIGN_CYLINDER_TO_AREA = 'ASSIGN_CYLINDER_TO_AREA';
    const TYPE_ASSIGN_AREA_TO_CYLINDER = 'ASSIGN_AREA_TO_CYLINDER';
    const TYPE_UNASSIGN_CYLINDER_FROM_AREA = 'UNASSIGN_CYLINDER_FROM_AREA';
    const TYPE_UNASSIGN_AREA_FROM_CYLINDER = 'UNASSIGN_AREA_FROM_CYLINDER';
    const TYPE_QUANTITY_CREDIT_ADDED = 'QUANTITY_CREDIT_ADDED';
    const TYPE_TEMPORAL_CREDIT_ADDED = 'TEMPORAL_CREDIT_ADDED';
    const TYPE_INVALID_CREDIT_ENTERED = 'INVALID_CREDIT_ENTERED';
    const TYPE_CREDIT_REDEEMING_LOCKED = 'CREDIT_REDEEMING_LOCKED';
    const TYPE_AUTH_KEY_PRODUCTION_FINISHED = 'AUTH_KEY_PRODUCTION_FINISHED';
    const TYPE_GENERATE_MOBILE_PHONE_PAIRING_CODE = 'GENERATE_MOBILE_PHONE_PAIRING_CODE';
    const TYPE_GENERATE_MOBILE_PHONE_RE_PAIRING_CODE = 'GENERATE_MOBILE_PHONE_RE_PAIRING_CODE';
    const TYPE_FINALIZE_MOBILE_PHONE_PAIRING = 'FINALIZE_MOBILE_PHONE_PAIRING';
    const TYPE_FINALIZE_MOBILE_PHONE_RE_PAIRING = 'FINALIZE_MOBILE_PHONE_RE_PAIRING';
    const TYPE_MEDIUM_EMPTIED = 'MEDIUM_EMPTIED';
    const TYPE_CREATE_TIMEZONE = 'CREATE_TIMEZONE';
    const TYPE_EDIT_TIMEZONE = 'EDIT_TIMEZONE';
    const TYPE_EDIT_TIMEZONE_NEW_DEFAULT = 'EDIT_TIMEZONE_NEW_DEFAULT';
    const TYPE_CREATE_DAYLIGHT_SAVING_ENTRIES = 'CREATE_DAYLIGHT_SAVING_ENTRIES';
    const TYPE_EDIT_DAYLIGHT_SAVING_ENTRIES = 'EDIT_DAYLIGHT_SAVING_ENTRIES';
    const TYPE_CREATE_ACO = 'CREATE_ACO';
    const TYPE_EDIT_ACO = 'EDIT_ACO';
    const TYPE_DELETE_ACO = 'DELETE_ACO';
    const TYPE_CREATE_ACO_FINISHED = 'CREATE_ACO_FINISHED';
    const TYPE_ASSIGN_KEY_CARD_TO_CUSTOMER_SUCCESS = 'ASSIGN_KEY_CARD_TO_CUSTOMER_SUCCESS';
    const TYPE_ASSIGN_CYLINDER_TO_CUSTOMER_VIA_CARD_READER_SUCCESS = 'ASSIGN_CYLINDER_TO_CUSTOMER_VIA_CARD_READER_SUCCESS';
    const TYPE_ASSIGN_CYLINDER_TO_CUSTOMER_VIA_MOBILE_PHONE_SUCCESS = 'ASSIGN_CYLINDER_TO_CUSTOMER_VIA_MOBILE_PHONE_SUCCESS';
    const TYPE_ASSIGN_CYLINDER_TO_CUSTOMER_FAILURE = 'ASSIGN_CYLINDER_TO_CUSTOMER_FAILURE';
    const TYPE_ASSIGN_KEY_CARD_TO_CUSTOMER_FAILURE = 'ASSIGN_KEY_CARD_TO_CUSTOMER_FAILURE';
    const TYPE_INITIATE_REMOVE_CYLINDER_FROM_CUSTOMER = 'INITIATE_REMOVE_CYLINDER_FROM_CUSTOMER';
    const TYPE_FINALIZE_REMOVE_CYLINDER_FROM_CUSTOMER = 'FINALIZE_REMOVE_CYLINDER_FROM_CUSTOMER';
    const TYPE_REMOVE_CYLINDER_FROM_CUSTOMER_FAILED = 'REMOVE_CYLINDER_FROM_CUSTOMER_FAILED';
    const TYPE_REMOVE_KEYRING_FROM_CUSTOMER_FAILED = 'REMOVE_KEYRING_FROM_CUSTOMER_FAILED';
    const TYPE_INITIATE_REMOVE_KEYRING_FROM_CUSTOMER = 'INITIATE_REMOVE_KEYRING_FROM_CUSTOMER';
    const TYPE_FINALIZE_REMOVE_MOBILE_PHONE_FROM_CUSTOMER = 'FINALIZE_REMOVE_MOBILE_PHONE_FROM_CUSTOMER';
    const TYPE_FINALIZE_REMOVE_KEY_CARD_FROM_CUSTOMER = 'FINALIZE_REMOVE_KEY_CARD_FROM_CUSTOMER';
    const TYPE_EDIT_CUSTOMER_SETTINGS = 'EDIT_CUSTOMER_SETTINGS';
    const TYPE_REACTIVATE_KEYRING_INITIATED = 'REACTIVATE_KEYRING_INITIATED';
    const TYPE_REACTIVATE_KEYRING_FINISHED = 'REACTIVATE_KEYRING_FINISHED';
    const TYPE_REACTIVATE_KEYRING_FINISHED_BY_SUPPORT = 'REACTIVATE_KEYRING_FINISHED_BY_SUPPORT';
    const TYPE_DEACTIVATE_KEYRING_INITIATED = 'DEACTIVATE_KEYRING_INITIATED';
    const TYPE_DEACTIVATE_KEYRING_FINISHED = 'DEACTIVATE_KEYRING_FINISHED';
    const TYPE_DEACTIVATE_KEYRING_FINISHED_BY_SUPPORT = 'DEACTIVATE_KEYRING_FINISHED_BY_SUPPORT';
    const TYPE_PASSWORD_RESET = 'PASSWORD_RESET';
    const TYPE_ADD_SUPPORT_ACO = 'ADD_SUPPORT_ACO';
    const TYPE_DELETE_SUPPORT_ACO = 'DELETE_SUPPORT_ACO';
    const TYPE_CREATE_SHARED_CYLINDER_CODE = 'CREATE_SHARED_CYLINDER_CODE';
    const TYPE_REDEEM_SHARED_CYLINDER_CODE_OWNER = 'REDEEM_SHARED_CYLINDER_CODE_OWNER';
    const TYPE_REDEEM_SHARED_CYLINDER_CODE = 'REDEEM_SHARED_CYLINDER_CODE';
    const TYPE_REMOVE_EXPIRED_ACO_ACTIVATION = 'REMOVE_EXPIRED_ACO_ACTIVATION';
    const TYPE_PIN_RESET_INITIATED = 'PIN_RESET_INITIATED';
    const TYPE_PIN_RESET_FINISHED = 'PIN_RESET_FINISHED';
    const TYPE_SINGLE_LOCKING_SYSTEM_LOG_DELETED = 'SINGLE_LOCKING_SYSTEM_LOG_DELETED';
    const TYPE_ALL_LOCKING_SYSTEM_LOGS_OF_A_PERSON_DELETED = 'ALL_LOCKING_SYSTEM_LOGS_OF_A_PERSON_DELETED';
    const TYPE_UNSHARE_CYLINDER = 'UNSHARE_CYLINDER';
    const TYPE_REPLACEMENT_CYLINDER_CREATED = 'REPLACEMENT_CYLINDER_CREATED';
    const TYPE_REPLACEMENT_KNOB_CREATED = 'REPLACEMENT_KNOB_CREATED';
    const TYPE_REPLACEMENT_CYLINDER_INSTALLED = 'REPLACEMENT_CYLINDER_INSTALLED';
    const TYPE_REPLACEMENT_KNOB_INSTALLED = 'REPLACEMENT_KNOB_INSTALLED';
    const TYPE_REPLACEMENT_CYLINDER_FAILED = 'REPLACEMENT_CYLINDER_FAILED';
    const TYPE_REPLACEMENT_KNOB_FAILED = 'REPLACEMENT_KNOB_FAILED';
    const TYPE_EDIT_DEFAULT_LOG_SETTINGS = 'EDIT_DEFAULT_LOG_SETTINGS';
    const TYPE_CYLINDER_DEFAULTS_EDITED = 'CYLINDER_DEFAULTS_EDITED';
    const TYPE_DELETE_MAINTENANCE_WINDOW = 'DELETE_MAINTENANCE_WINDOW';
    const TYPE_EDIT_MAINTENANCE_WINDOW = 'EDIT_MAINTENANCE_WINDOW';
    const TYPE_CREATE_MAINTENANCE_WINDOW = 'CREATE_MAINTENANCE_WINDOW';
    const TYPE_ACKNOWLEDGE_MAINTENANCE_WINDOW = 'ACKNOWLEDGE_MAINTENANCE_WINDOW';
    const TYPE_VIEW_LOG = 'VIEW_LOG';
    const TYPE_REMOVE_KEYRING_AFTER_COMPLETE_DEACTIVATION = 'REMOVE_KEYRING_AFTER_COMPLETE_DEACTIVATION';
    const TYPE_MEDIUM_REMOVED_MANUALLY = 'MEDIUM_REMOVED_MANUALLY';
    const TYPE_MEDIUM_MARKED_FOR_REMOVAL = 'MEDIUM_MARKED_FOR_REMOVAL';
    const TYPE_REMOVE_DAMAGED_CYLINDER = 'REMOVE_DAMAGED_CYLINDER';
    const TYPE_REMOVE_DAMAGED_CYLINDER_FAILED = 'REMOVE_DAMAGED_CYLINDER_FAILED';
    const TYPE_EDIT_WALLREADER = 'EDIT_WALLREADER';
    const TYPE_ASSIGN_WALLREADER_TO_CUSTOMER_VIA_CARD_READER_SUCCESS = 'ASSIGN_WALLREADER_TO_CUSTOMER_VIA_CARD_READER_SUCCESS';
    const TYPE_ASSIGN_WALLREADER_TO_CUSTOMER_VIA_MOBILE_PHONE_SUCCESS = 'ASSIGN_WALLREADER_TO_CUSTOMER_VIA_MOBILE_PHONE_SUCCESS';
    const TYPE_ASSIGN_WALLREADER_TO_CUSTOMER_FAILURE = 'ASSIGN_WALLREADER_TO_CUSTOMER_FAILURE';
    const TYPE_INITIATE_REMOVE_WALLREADER_FROM_CUSTOMER = 'INITIATE_REMOVE_WALLREADER_FROM_CUSTOMER';
    const TYPE_FINALIZE_REMOVE_WALLREADER_FROM_CUSTOMER = 'FINALIZE_REMOVE_WALLREADER_FROM_CUSTOMER';
    const TYPE_REMOVE_WALLREADER_FROM_CUSTOMER_FAILED = 'REMOVE_WALLREADER_FROM_CUSTOMER_FAILED';
    const TYPE_REPLACEMENT_WALLREADER_CREATED = 'REPLACEMENT_WALLREADER_CREATED';
    const TYPE_REPLACEMENT_READER_UNIT_CREATED = 'REPLACEMENT_READER_UNIT_CREATED';
    const TYPE_REPLACEMENT_WALLREADER_INSTALLED = 'REPLACEMENT_WALLREADER_INSTALLED';
    const TYPE_REPLACEMENT_READER_UNIT_INSTALLED = 'REPLACEMENT_READER_UNIT_INSTALLED';
    const TYPE_REPLACEMENT_WALLREADER_FAILED = 'REPLACEMENT_WALLREADER_FAILED';
    const TYPE_REPLACEMENT_READER_UNIT_FAILED = 'REPLACEMENT_READER_UNIT_FAILED';
    const TYPE_REMOVE_DAMAGED_WALLREADER = 'REMOVE_DAMAGED_WALLREADER';
    const TYPE_REMOVE_DAMAGED_WALLREADER_FAILED = 'REMOVE_DAMAGED_WALLREADER_FAILED';
    const TYPE_ISSUE_RECEIPT_EXPORTED = 'ISSUE_RECEIPT_EXPORTED';
    const TYPE_MAINTENANCE_MAIL_DISCONTINUED = 'MAINTENANCE_MAIL_DISCONTINUED';
    const TYPE_QUICK_REGISTRY_SMS_SENT = 'QUICK_REGISTRY_SMS_SENT';
    const TYPE_EXPORT_AREAS = 'EXPORT_AREAS';
    const TYPE_EXPORT_LOCKING_PLAN = 'EXPORT_LOCKING_PLAN';
    const TYPE_EXPORT_KEYRINGS = 'EXPORT_KEYRINGS';
    const TYPE_EXPORT_OWN_KEYRINGS = 'EXPORT_OWN_KEYRINGS';
    const TYPE_EXPORT_FOREIGN_KEYRINGS = 'EXPORT_FOREIGN_KEYRINGS';
    const TYPE_EXPORT_LOCKING_COMPONENTS = 'EXPORT_LOCKING_COMPONENTS';
    const TYPE_ACOS_EXPORTED = 'ACOS_EXPORTED';
    const TYPE_HANDS_FREE_MODE_ACTIVATED = 'HANDS_FREE_MODE_ACTIVATED';
    const TYPE_HANDS_FREE_MODE_DEACTIVATED = 'HANDS_FREE_MODE_DEACTIVATED';
    const TYPE_EXPORT_PERSONS = 'EXPORT_PERSONS';
    const TYPE_KEYRING_PROTOCOL_EXPORTED = 'KEYRING_PROTOCOL_EXPORTED';
    const TYPE_LOCKING_COMPONENT_PROTOCOL_EXPORTED = 'LOCKING_COMPONENT_PROTOCOL_EXPORTED';
    const TYPE_JOURNAL_EXPORTED = 'JOURNAL_EXPORTED';
    const TYPE_DEACTIVATE_HOLIDAYS = 'DEACTIVATE_HOLIDAYS';
    const TYPE_REACTIVATE_HOLIDAYS = 'REACTIVATE_HOLIDAYS';
    const TYPE_CREATE_HOLIDAY = 'CREATE_HOLIDAY';
    const TYPE_DELETE_HOLIDAY_SINGLE = 'DELETE_HOLIDAY_SINGLE';
    const TYPE_DELETE_HOLIDAY_SERIES_SINGLE = 'DELETE_HOLIDAY_SERIES_SINGLE';
    const TYPE_DELETE_HOLIDAY_SERIES_MULTIPLE = 'DELETE_HOLIDAY_SERIES_MULTIPLE';
    const TYPE_EDIT_HOLIDAY_SINGLE = 'EDIT_HOLIDAY_SINGLE';
    const TYPE_EDIT_HOLIDAY_SERIES_SINGLE = 'EDIT_HOLIDAY_SERIES_SINGLE';
    const TYPE_EDIT_HOLIDAY_SERIES_MULTIPLE = 'EDIT_HOLIDAY_SERIES_MULTIPLE';
    const TYPE_UNLOCK_FROM_LOCK_SCREEN_ACTIVATED = 'UNLOCK_FROM_LOCK_SCREEN_ACTIVATED';
    const TYPE_UNLOCK_FROM_LOCK_SCREEN_DEACTIVATED = 'UNLOCK_FROM_LOCK_SCREEN_DEACTIVATED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CREATE_KEYRING,
            self::TYPE_EDIT_CYLINDER,
            self::TYPE_EDIT_KEYRING,
            self::TYPE_CHANGE_KEYRING_OWNER,
            self::TYPE_REVOKE_KEYRING_OWNER,
            self::TYPE_CREATE_AUTHORIZATION_KEY,
            self::TYPE_EDIT_AUTHORIZATION_KEY,
            self::TYPE_DELETE_AUTHORIZATION_KEY_IN_STATE_CREATE,
            self::TYPE_MARK_AUTHORIZATION_KEY_AS_DELETED,
            self::TYPE_UNDELETE_AUTHORIZATION_KEY,
            self::TYPE_CREATE_PERSON,
            self::TYPE_EDIT_PERSON,
            self::TYPE_DELETE_PERSON,
            self::TYPE_CREATE_AREA,
            self::TYPE_EDIT_AREA,
            self::TYPE_DELETE_AREA,
            self::TYPE_ASSIGN_CYLINDER_TO_AREA,
            self::TYPE_ASSIGN_AREA_TO_CYLINDER,
            self::TYPE_UNASSIGN_CYLINDER_FROM_AREA,
            self::TYPE_UNASSIGN_AREA_FROM_CYLINDER,
            self::TYPE_QUANTITY_CREDIT_ADDED,
            self::TYPE_TEMPORAL_CREDIT_ADDED,
            self::TYPE_INVALID_CREDIT_ENTERED,
            self::TYPE_CREDIT_REDEEMING_LOCKED,
            self::TYPE_AUTH_KEY_PRODUCTION_FINISHED,
            self::TYPE_GENERATE_MOBILE_PHONE_PAIRING_CODE,
            self::TYPE_GENERATE_MOBILE_PHONE_RE_PAIRING_CODE,
            self::TYPE_FINALIZE_MOBILE_PHONE_PAIRING,
            self::TYPE_FINALIZE_MOBILE_PHONE_RE_PAIRING,
            self::TYPE_MEDIUM_EMPTIED,
            self::TYPE_CREATE_TIMEZONE,
            self::TYPE_EDIT_TIMEZONE,
            self::TYPE_EDIT_TIMEZONE_NEW_DEFAULT,
            self::TYPE_CREATE_DAYLIGHT_SAVING_ENTRIES,
            self::TYPE_EDIT_DAYLIGHT_SAVING_ENTRIES,
            self::TYPE_CREATE_ACO,
            self::TYPE_EDIT_ACO,
            self::TYPE_DELETE_ACO,
            self::TYPE_CREATE_ACO_FINISHED,
            self::TYPE_ASSIGN_KEY_CARD_TO_CUSTOMER_SUCCESS,
            self::TYPE_ASSIGN_CYLINDER_TO_CUSTOMER_VIA_CARD_READER_SUCCESS,
            self::TYPE_ASSIGN_CYLINDER_TO_CUSTOMER_VIA_MOBILE_PHONE_SUCCESS,
            self::TYPE_ASSIGN_CYLINDER_TO_CUSTOMER_FAILURE,
            self::TYPE_ASSIGN_KEY_CARD_TO_CUSTOMER_FAILURE,
            self::TYPE_INITIATE_REMOVE_CYLINDER_FROM_CUSTOMER,
            self::TYPE_FINALIZE_REMOVE_CYLINDER_FROM_CUSTOMER,
            self::TYPE_REMOVE_CYLINDER_FROM_CUSTOMER_FAILED,
            self::TYPE_REMOVE_KEYRING_FROM_CUSTOMER_FAILED,
            self::TYPE_INITIATE_REMOVE_KEYRING_FROM_CUSTOMER,
            self::TYPE_FINALIZE_REMOVE_MOBILE_PHONE_FROM_CUSTOMER,
            self::TYPE_FINALIZE_REMOVE_KEY_CARD_FROM_CUSTOMER,
            self::TYPE_EDIT_CUSTOMER_SETTINGS,
            self::TYPE_REACTIVATE_KEYRING_INITIATED,
            self::TYPE_REACTIVATE_KEYRING_FINISHED,
            self::TYPE_REACTIVATE_KEYRING_FINISHED_BY_SUPPORT,
            self::TYPE_DEACTIVATE_KEYRING_INITIATED,
            self::TYPE_DEACTIVATE_KEYRING_FINISHED,
            self::TYPE_DEACTIVATE_KEYRING_FINISHED_BY_SUPPORT,
            self::TYPE_PASSWORD_RESET,
            self::TYPE_ADD_SUPPORT_ACO,
            self::TYPE_DELETE_SUPPORT_ACO,
            self::TYPE_CREATE_SHARED_CYLINDER_CODE,
            self::TYPE_REDEEM_SHARED_CYLINDER_CODE_OWNER,
            self::TYPE_REDEEM_SHARED_CYLINDER_CODE,
            self::TYPE_REMOVE_EXPIRED_ACO_ACTIVATION,
            self::TYPE_PIN_RESET_INITIATED,
            self::TYPE_PIN_RESET_FINISHED,
            self::TYPE_SINGLE_LOCKING_SYSTEM_LOG_DELETED,
            self::TYPE_ALL_LOCKING_SYSTEM_LOGS_OF_A_PERSON_DELETED,
            self::TYPE_UNSHARE_CYLINDER,
            self::TYPE_REPLACEMENT_CYLINDER_CREATED,
            self::TYPE_REPLACEMENT_KNOB_CREATED,
            self::TYPE_REPLACEMENT_CYLINDER_INSTALLED,
            self::TYPE_REPLACEMENT_KNOB_INSTALLED,
            self::TYPE_REPLACEMENT_CYLINDER_FAILED,
            self::TYPE_REPLACEMENT_KNOB_FAILED,
            self::TYPE_EDIT_DEFAULT_LOG_SETTINGS,
            self::TYPE_CYLINDER_DEFAULTS_EDITED,
            self::TYPE_DELETE_MAINTENANCE_WINDOW,
            self::TYPE_EDIT_MAINTENANCE_WINDOW,
            self::TYPE_CREATE_MAINTENANCE_WINDOW,
            self::TYPE_ACKNOWLEDGE_MAINTENANCE_WINDOW,
            self::TYPE_VIEW_LOG,
            self::TYPE_REMOVE_KEYRING_AFTER_COMPLETE_DEACTIVATION,
            self::TYPE_MEDIUM_REMOVED_MANUALLY,
            self::TYPE_MEDIUM_MARKED_FOR_REMOVAL,
            self::TYPE_REMOVE_DAMAGED_CYLINDER,
            self::TYPE_REMOVE_DAMAGED_CYLINDER_FAILED,
            self::TYPE_EDIT_WALLREADER,
            self::TYPE_ASSIGN_WALLREADER_TO_CUSTOMER_VIA_CARD_READER_SUCCESS,
            self::TYPE_ASSIGN_WALLREADER_TO_CUSTOMER_VIA_MOBILE_PHONE_SUCCESS,
            self::TYPE_ASSIGN_WALLREADER_TO_CUSTOMER_FAILURE,
            self::TYPE_INITIATE_REMOVE_WALLREADER_FROM_CUSTOMER,
            self::TYPE_FINALIZE_REMOVE_WALLREADER_FROM_CUSTOMER,
            self::TYPE_REMOVE_WALLREADER_FROM_CUSTOMER_FAILED,
            self::TYPE_REPLACEMENT_WALLREADER_CREATED,
            self::TYPE_REPLACEMENT_READER_UNIT_CREATED,
            self::TYPE_REPLACEMENT_WALLREADER_INSTALLED,
            self::TYPE_REPLACEMENT_READER_UNIT_INSTALLED,
            self::TYPE_REPLACEMENT_WALLREADER_FAILED,
            self::TYPE_REPLACEMENT_READER_UNIT_FAILED,
            self::TYPE_REMOVE_DAMAGED_WALLREADER,
            self::TYPE_REMOVE_DAMAGED_WALLREADER_FAILED,
            self::TYPE_ISSUE_RECEIPT_EXPORTED,
            self::TYPE_MAINTENANCE_MAIL_DISCONTINUED,
            self::TYPE_QUICK_REGISTRY_SMS_SENT,
            self::TYPE_EXPORT_AREAS,
            self::TYPE_EXPORT_LOCKING_PLAN,
            self::TYPE_EXPORT_KEYRINGS,
            self::TYPE_EXPORT_OWN_KEYRINGS,
            self::TYPE_EXPORT_FOREIGN_KEYRINGS,
            self::TYPE_EXPORT_LOCKING_COMPONENTS,
            self::TYPE_ACOS_EXPORTED,
            self::TYPE_HANDS_FREE_MODE_ACTIVATED,
            self::TYPE_HANDS_FREE_MODE_DEACTIVATED,
            self::TYPE_EXPORT_PERSONS,
            self::TYPE_KEYRING_PROTOCOL_EXPORTED,
            self::TYPE_LOCKING_COMPONENT_PROTOCOL_EXPORTED,
            self::TYPE_JOURNAL_EXPORTED,
            self::TYPE_DEACTIVATE_HOLIDAYS,
            self::TYPE_REACTIVATE_HOLIDAYS,
            self::TYPE_CREATE_HOLIDAY,
            self::TYPE_DELETE_HOLIDAY_SINGLE,
            self::TYPE_DELETE_HOLIDAY_SERIES_SINGLE,
            self::TYPE_DELETE_HOLIDAY_SERIES_MULTIPLE,
            self::TYPE_EDIT_HOLIDAY_SINGLE,
            self::TYPE_EDIT_HOLIDAY_SERIES_SINGLE,
            self::TYPE_EDIT_HOLIDAY_SERIES_MULTIPLE,
            self::TYPE_UNLOCK_FROM_LOCK_SCREEN_ACTIVATED,
            self::TYPE_UNLOCK_FROM_LOCK_SCREEN_DEACTIVATED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['translations'] = isset($data['translations']) ? $data['translations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of event
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return map[string,string]
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param map[string,string] $translations Event type translations comprising all requested languages (default only \"de-DE\")
     *
     * @return $this
     */
    public function setTranslations($translations)
    {
        $this->container['translations'] = $translations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


