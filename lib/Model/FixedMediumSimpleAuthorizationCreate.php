<?php
/**
 * FixedMediumSimpleAuthorizationCreate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v14.40.2
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FixedMediumSimpleAuthorizationCreate Class Doc Comment
 *
 * @category Class
 * @description Model that is same as SimpleAuthorizationCreate, only with a fixed medium id (can’t be manually set, context dependant retrieval).
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FixedMediumSimpleAuthorizationCreate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FixedMediumSimpleAuthorizationCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authorization_info' => '\Swagger\Client\Model\SimpleAuthorizationInfo',
        'lock_id' => 'int',
        'area_id' => 'int',
        'remove_all_existing_authorizations_for_pair' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authorization_info' => null,
        'lock_id' => 'int64',
        'area_id' => 'int64',
        'remove_all_existing_authorizations_for_pair' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorization_info' => 'authorizationInfo',
        'lock_id' => 'lockId',
        'area_id' => 'areaId',
        'remove_all_existing_authorizations_for_pair' => 'removeAllExistingAuthorizationsForPair'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorization_info' => 'setAuthorizationInfo',
        'lock_id' => 'setLockId',
        'area_id' => 'setAreaId',
        'remove_all_existing_authorizations_for_pair' => 'setRemoveAllExistingAuthorizationsForPair'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorization_info' => 'getAuthorizationInfo',
        'lock_id' => 'getLockId',
        'area_id' => 'getAreaId',
        'remove_all_existing_authorizations_for_pair' => 'getRemoveAllExistingAuthorizationsForPair'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authorization_info'] = isset($data['authorization_info']) ? $data['authorization_info'] : null;
        $this->container['lock_id'] = isset($data['lock_id']) ? $data['lock_id'] : null;
        $this->container['area_id'] = isset($data['area_id']) ? $data['area_id'] : null;
        $this->container['remove_all_existing_authorizations_for_pair'] = isset($data['remove_all_existing_authorizations_for_pair']) ? $data['remove_all_existing_authorizations_for_pair'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['authorization_info'] === null) {
            $invalidProperties[] = "'authorization_info' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorization_info
     *
     * @return \Swagger\Client\Model\SimpleAuthorizationInfo
     */
    public function getAuthorizationInfo()
    {
        return $this->container['authorization_info'];
    }

    /**
     * Sets authorization_info
     *
     * @param \Swagger\Client\Model\SimpleAuthorizationInfo $authorization_info Simple authorization details
     *
     * @return $this
     */
    public function setAuthorizationInfo($authorization_info)
    {
        $this->container['authorization_info'] = $authorization_info;

        return $this;
    }

    /**
     * Gets lock_id
     *
     * @return int
     */
    public function getLockId()
    {
        return $this->container['lock_id'];
    }

    /**
     * Sets lock_id
     *
     * @param int $lock_id Lock for which the medium should be authorized. Required when no area id is set.
     *
     * @return $this
     */
    public function setLockId($lock_id)
    {
        $this->container['lock_id'] = $lock_id;

        return $this;
    }

    /**
     * Gets area_id
     *
     * @return int
     */
    public function getAreaId()
    {
        return $this->container['area_id'];
    }

    /**
     * Sets area_id
     *
     * @param int $area_id Area for which the medium should be authorized. Required when no lock id is set.
     *
     * @return $this
     */
    public function setAreaId($area_id)
    {
        $this->container['area_id'] = $area_id;

        return $this;
    }

    /**
     * Gets remove_all_existing_authorizations_for_pair
     *
     * @return bool
     */
    public function getRemoveAllExistingAuthorizationsForPair()
    {
        return $this->container['remove_all_existing_authorizations_for_pair'];
    }

    /**
     * Sets remove_all_existing_authorizations_for_pair
     *
     * @param bool $remove_all_existing_authorizations_for_pair Removes all authorizations for the given medium – lock or medium – area pair before creating the given simple authorization (avoids conflict potential which may result in failure).
     *
     * @return $this
     */
    public function setRemoveAllExistingAuthorizationsForPair($remove_all_existing_authorizations_for_pair)
    {
        $this->container['remove_all_existing_authorizations_for_pair'] = $remove_all_existing_authorizations_for_pair;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


