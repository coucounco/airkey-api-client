<?php
/**
 * PhoneSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v14.40.2
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PhoneSettings Class Doc Comment
 *
 * @category Class
 * @description Model that describes the settings of a phone defined in the access control system.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PhoneSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PhoneSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'in_maintenance_mode' => 'bool',
        'medium_log_visible' => 'bool',
        'pin_set' => 'bool',
        'pin_reset_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'in_maintenance_mode' => null,
        'medium_log_visible' => null,
        'pin_set' => null,
        'pin_reset_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'in_maintenance_mode' => 'inMaintenanceMode',
        'medium_log_visible' => 'mediumLogVisible',
        'pin_set' => 'pinSet',
        'pin_reset_time' => 'pinResetTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'in_maintenance_mode' => 'setInMaintenanceMode',
        'medium_log_visible' => 'setMediumLogVisible',
        'pin_set' => 'setPinSet',
        'pin_reset_time' => 'setPinResetTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'in_maintenance_mode' => 'getInMaintenanceMode',
        'medium_log_visible' => 'getMediumLogVisible',
        'pin_set' => 'getPinSet',
        'pin_reset_time' => 'getPinResetTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['in_maintenance_mode'] = isset($data['in_maintenance_mode']) ? $data['in_maintenance_mode'] : null;
        $this->container['medium_log_visible'] = isset($data['medium_log_visible']) ? $data['medium_log_visible'] : null;
        $this->container['pin_set'] = isset($data['pin_set']) ? $data['pin_set'] : null;
        $this->container['pin_reset_time'] = isset($data['pin_reset_time']) ? $data['pin_reset_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['in_maintenance_mode'] === null) {
            $invalidProperties[] = "'in_maintenance_mode' can't be null";
        }
        if ($this->container['medium_log_visible'] === null) {
            $invalidProperties[] = "'medium_log_visible' can't be null";
        }
        if (!is_null($this->container['pin_reset_time']) && (mb_strlen($this->container['pin_reset_time']) > 24)) {
            $invalidProperties[] = "invalid value for 'pin_reset_time', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['pin_reset_time']) && (mb_strlen($this->container['pin_reset_time']) < 0)) {
            $invalidProperties[] = "invalid value for 'pin_reset_time', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets in_maintenance_mode
     *
     * @return bool
     */
    public function getInMaintenanceMode()
    {
        return $this->container['in_maintenance_mode'];
    }

    /**
     * Sets in_maintenance_mode
     *
     * @param bool $in_maintenance_mode In maintenance mode or not
     *
     * @return $this
     */
    public function setInMaintenanceMode($in_maintenance_mode)
    {
        $this->container['in_maintenance_mode'] = $in_maintenance_mode;

        return $this;
    }

    /**
     * Gets medium_log_visible
     *
     * @return bool
     */
    public function getMediumLogVisible()
    {
        return $this->container['medium_log_visible'];
    }

    /**
     * Sets medium_log_visible
     *
     * @param bool $medium_log_visible Log of the medium is visible or not
     *
     * @return $this
     */
    public function setMediumLogVisible($medium_log_visible)
    {
        $this->container['medium_log_visible'] = $medium_log_visible;

        return $this;
    }

    /**
     * Gets pin_set
     *
     * @return bool
     */
    public function getPinSet()
    {
        return $this->container['pin_set'];
    }

    /**
     * Sets pin_set
     *
     * @param bool $pin_set Pin is set or not
     *
     * @return $this
     */
    public function setPinSet($pin_set)
    {
        $this->container['pin_set'] = $pin_set;

        return $this;
    }

    /**
     * Gets pin_reset_time
     *
     * @return string
     */
    public function getPinResetTime()
    {
        return $this->container['pin_reset_time'];
    }

    /**
     * Sets pin_reset_time
     *
     * @param string $pin_reset_time Timestamp of PIN reset (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)
     *
     * @return $this
     */
    public function setPinResetTime($pin_reset_time)
    {
        if (!is_null($pin_reset_time) && (mb_strlen($pin_reset_time) > 24)) {
            throw new \InvalidArgumentException('invalid length for $pin_reset_time when calling PhoneSettings., must be smaller than or equal to 24.');
        }
        if (!is_null($pin_reset_time) && (mb_strlen($pin_reset_time) < 0)) {
            throw new \InvalidArgumentException('invalid length for $pin_reset_time when calling PhoneSettings., must be bigger than or equal to 0.');
        }

        $this->container['pin_reset_time'] = $pin_reset_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


