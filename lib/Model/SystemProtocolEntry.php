<?php
/**
 * SystemProtocolEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v14.40.2
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SystemProtocolEntry Class Doc Comment
 *
 * @category Class
 * @description Model that describes a protocol entry of an event that was conducted by an administrator in the access control system.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SystemProtocolEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SystemProtocolEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'event' => '\Swagger\Client\Model\SystemProtocolEvent',
        'details' => '\Swagger\Client\Model\SystemProtocolDetails',
        'timestamp' => 'string',
        'lock_identifier' => 'string',
        'lock_id' => 'int',
        'medium_identifier' => 'string',
        'medium_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'event' => null,
        'details' => null,
        'timestamp' => null,
        'lock_identifier' => null,
        'lock_id' => 'int64',
        'medium_identifier' => null,
        'medium_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'event' => 'event',
        'details' => 'details',
        'timestamp' => 'timestamp',
        'lock_identifier' => 'lockIdentifier',
        'lock_id' => 'lockId',
        'medium_identifier' => 'mediumIdentifier',
        'medium_id' => 'mediumId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'event' => 'setEvent',
        'details' => 'setDetails',
        'timestamp' => 'setTimestamp',
        'lock_identifier' => 'setLockIdentifier',
        'lock_id' => 'setLockId',
        'medium_identifier' => 'setMediumIdentifier',
        'medium_id' => 'setMediumId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'event' => 'getEvent',
        'details' => 'getDetails',
        'timestamp' => 'getTimestamp',
        'lock_identifier' => 'getLockIdentifier',
        'lock_id' => 'getLockId',
        'medium_identifier' => 'getMediumIdentifier',
        'medium_id' => 'getMediumId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['lock_identifier'] = isset($data['lock_identifier']) ? $data['lock_identifier'] : null;
        $this->container['lock_id'] = isset($data['lock_id']) ? $data['lock_id'] : null;
        $this->container['medium_identifier'] = isset($data['medium_identifier']) ? $data['medium_identifier'] : null;
        $this->container['medium_id'] = isset($data['medium_id']) ? $data['medium_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \Swagger\Client\Model\SystemProtocolEvent
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \Swagger\Client\Model\SystemProtocolEvent $event Type of system protocol entry event
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Swagger\Client\Model\SystemProtocolDetails
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Swagger\Client\Model\SystemProtocolDetails $details Details of the system protocol entry event
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp Timestamp of the event (ISO 8601-format compliant date with time in UTC, milliseconds precision)
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets lock_identifier
     *
     * @return string
     */
    public function getLockIdentifier()
    {
        return $this->container['lock_identifier'];
    }

    /**
     * Sets lock_identifier
     *
     * @param string $lock_identifier Identifier of the locking component which was involved in the event, otherwise empty if no locking component was involved
     *
     * @return $this
     */
    public function setLockIdentifier($lock_identifier)
    {
        $this->container['lock_identifier'] = $lock_identifier;

        return $this;
    }

    /**
     * Gets lock_id
     *
     * @return int
     */
    public function getLockId()
    {
        return $this->container['lock_id'];
    }

    /**
     * Sets lock_id
     *
     * @param int $lock_id Unique id of the locking component which was involved in the event if it still exists in the access control system, otherwise empty
     *
     * @return $this
     */
    public function setLockId($lock_id)
    {
        $this->container['lock_id'] = $lock_id;

        return $this;
    }

    /**
     * Gets medium_identifier
     *
     * @return string
     */
    public function getMediumIdentifier()
    {
        return $this->container['medium_identifier'];
    }

    /**
     * Sets medium_identifier
     *
     * @param string $medium_identifier Identifier of the medium which was involved in the event, otherwise empty if no medium was involved,
     *
     * @return $this
     */
    public function setMediumIdentifier($medium_identifier)
    {
        $this->container['medium_identifier'] = $medium_identifier;

        return $this;
    }

    /**
     * Gets medium_id
     *
     * @return int
     */
    public function getMediumId()
    {
        return $this->container['medium_id'];
    }

    /**
     * Sets medium_id
     *
     * @param int $medium_id Unique id of the medium which was involved in the event if it still exists in the access control system, otherwise empty
     *
     * @return $this
     */
    public function setMediumId($medium_id)
    {
        $this->container['medium_id'] = $medium_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


