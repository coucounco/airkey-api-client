<?php
/**
 * LockProtocolEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVVA AirKey Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v14.40.2
 * Contact: office-wien@evva.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LockProtocolEntry Class Doc Comment
 *
 * @category Class
 * @description Model that describes a protocol entry associated with a lock defined in the access control system.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LockProtocolEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LockProtocolEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'event_category' => 'string',
        'event' => '\Swagger\Client\Model\LockProtocolEvent',
        'details' => '\Swagger\Client\Model\LockProtocolDetails',
        'lock_utc_delta' => 'int',
        'medium' => '\Swagger\Client\Model\SimpleMedium',
        'operator_name' => 'string',
        'source_lock' => 'bool',
        'source_medium' => 'bool',
        'timestamp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'event_category' => null,
        'event' => null,
        'details' => null,
        'lock_utc_delta' => 'int32',
        'medium' => null,
        'operator_name' => null,
        'source_lock' => null,
        'source_medium' => null,
        'timestamp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_category' => 'eventCategory',
        'event' => 'event',
        'details' => 'details',
        'lock_utc_delta' => 'lockUtcDelta',
        'medium' => 'medium',
        'operator_name' => 'operatorName',
        'source_lock' => 'sourceLock',
        'source_medium' => 'sourceMedium',
        'timestamp' => 'timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_category' => 'setEventCategory',
        'event' => 'setEvent',
        'details' => 'setDetails',
        'lock_utc_delta' => 'setLockUtcDelta',
        'medium' => 'setMedium',
        'operator_name' => 'setOperatorName',
        'source_lock' => 'setSourceLock',
        'source_medium' => 'setSourceMedium',
        'timestamp' => 'setTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_category' => 'getEventCategory',
        'event' => 'getEvent',
        'details' => 'getDetails',
        'lock_utc_delta' => 'getLockUtcDelta',
        'medium' => 'getMedium',
        'operator_name' => 'getOperatorName',
        'source_lock' => 'getSourceLock',
        'source_medium' => 'getSourceMedium',
        'timestamp' => 'getTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EVENT_CATEGORY_BACKEND_EVENT = 'BACKEND_EVENT';
    const EVENT_CATEGORY_LOCKING_EVENT = 'LOCKING_EVENT';
    const EVENT_CATEGORY_PERMANENT_OPENING_MODE_EVENT = 'PERMANENT_OPENING_MODE_EVENT';
    const EVENT_CATEGORY_SYNC_EVENT = 'SYNC_EVENT';
    const EVENT_CATEGORY_SYNC_BY_SUPPORT_EVENT = 'SYNC_BY_SUPPORT_EVENT';
    const EVENT_CATEGORY_DUMMY_EVENT = 'DUMMY_EVENT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventCategoryAllowableValues()
    {
        return [
            self::EVENT_CATEGORY_BACKEND_EVENT,
            self::EVENT_CATEGORY_LOCKING_EVENT,
            self::EVENT_CATEGORY_PERMANENT_OPENING_MODE_EVENT,
            self::EVENT_CATEGORY_SYNC_EVENT,
            self::EVENT_CATEGORY_SYNC_BY_SUPPORT_EVENT,
            self::EVENT_CATEGORY_DUMMY_EVENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event_category'] = isset($data['event_category']) ? $data['event_category'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['lock_utc_delta'] = isset($data['lock_utc_delta']) ? $data['lock_utc_delta'] : null;
        $this->container['medium'] = isset($data['medium']) ? $data['medium'] : null;
        $this->container['operator_name'] = isset($data['operator_name']) ? $data['operator_name'] : null;
        $this->container['source_lock'] = isset($data['source_lock']) ? $data['source_lock'] : null;
        $this->container['source_medium'] = isset($data['source_medium']) ? $data['source_medium'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEventCategoryAllowableValues();
        if (!is_null($this->container['event_category']) && !in_array($this->container['event_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'event_category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_category
     *
     * @return string
     */
    public function getEventCategory()
    {
        return $this->container['event_category'];
    }

    /**
     * Sets event_category
     *
     * @param string $event_category Category of event
     *
     * @return $this
     */
    public function setEventCategory($event_category)
    {
        $allowedValues = $this->getEventCategoryAllowableValues();
        if (!is_null($event_category) && !in_array($event_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'event_category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_category'] = $event_category;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \Swagger\Client\Model\LockProtocolEvent
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \Swagger\Client\Model\LockProtocolEvent $event Type of protocol entry event
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Swagger\Client\Model\LockProtocolDetails
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Swagger\Client\Model\LockProtocolDetails $details Details of the protocol entry event
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets lock_utc_delta
     *
     * @return int
     */
    public function getLockUtcDelta()
    {
        return $this->container['lock_utc_delta'];
    }

    /**
     * Sets lock_utc_delta
     *
     * @param int $lock_utc_delta Time difference of locking component regarding UTC
     *
     * @return $this
     */
    public function setLockUtcDelta($lock_utc_delta)
    {
        $this->container['lock_utc_delta'] = $lock_utc_delta;

        return $this;
    }

    /**
     * Gets medium
     *
     * @return \Swagger\Client\Model\SimpleMedium
     */
    public function getMedium()
    {
        return $this->container['medium'];
    }

    /**
     * Sets medium
     *
     * @param \Swagger\Client\Model\SimpleMedium $medium Medium which was used as source for this event
     *
     * @return $this
     */
    public function setMedium($medium)
    {
        $this->container['medium'] = $medium;

        return $this;
    }

    /**
     * Gets operator_name
     *
     * @return string
     */
    public function getOperatorName()
    {
        return $this->container['operator_name'];
    }

    /**
     * Sets operator_name
     *
     * @param string $operator_name Name of person who was responsible for this event
     *
     * @return $this
     */
    public function setOperatorName($operator_name)
    {
        $this->container['operator_name'] = $operator_name;

        return $this;
    }

    /**
     * Gets source_lock
     *
     * @return bool
     */
    public function getSourceLock()
    {
        return $this->container['source_lock'];
    }

    /**
     * Sets source_lock
     *
     * @param bool $source_lock Locking component has verified event or not
     *
     * @return $this
     */
    public function setSourceLock($source_lock)
    {
        $this->container['source_lock'] = $source_lock;

        return $this;
    }

    /**
     * Gets source_medium
     *
     * @return bool
     */
    public function getSourceMedium()
    {
        return $this->container['source_medium'];
    }

    /**
     * Sets source_medium
     *
     * @param bool $source_medium Medium has verified event or not
     *
     * @return $this
     */
    public function setSourceMedium($source_medium)
    {
        $this->container['source_medium'] = $source_medium;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp Timestamp of the event (ISO 8601-format compliant date with time in UTC, milliseconds precision)
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


